<?php
/**
 * @file
 * Code for the PW Petitions feature.
 */

include_once 'pw_petitions.features.inc';

/**
 * Implements hook_menu().
 */
function pw_petitions_menu() {
  $items = array();

  $items['petitions/thanks-for-signing'] = array(
    'title' => 'Thanks for your signing!',
    'access arguments' => array('access content'),
    'page callback' => 'redirect_to_petition',
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

function redirect_to_petition() {
  drupal_set_message("Vielen Dank, dass Sie die Petition unterzeichnet haben! Bitte teilen Sie die Petition in Ihren Netzwerken und unter Ihren Freunden!");
  drupal_goto('petitions');
}

/**
 * add additional handlers for petition webform
 *
 */
function pw_petitions_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
    case 'webform_client_form_10369':
      $form['#validate'][] = 'pw_petitions_form_validate';
      $form['#submit'][] = 'pw_petitions_form_submit';
  }
}

/**
 * Validation for petition form
 *
 * validates if user has never submitted this form under
 * this node path for this petition.
 *
 */

function pw_petitions_form_validate($form_id, $form_values) {

  // check if email was already used to sign this petition
  $webform_nid = $form_values['values']['details']['nid'];
  $e_mail_value = $form_values['values']['submitted']['e_mail'];
  $node_path_value = $form_values['values']['submitted']['node_path'];
  $sql = "SELECT wf.sid
          FROM webform_submissions wf
          INNER JOIN webform_submitted_data wf_data_email ON wf.sid = wf_data_email.sid
          INNER JOIN webform_submitted_data wf_data_nodepath ON wf.sid = wf_data_nodepath.sid
          WHERE wf.nid = :nid AND wf_data_email.data = :email AND wf_data_nodepath.data = :nodepath";
  $submissions = db_query($sql, array(
    ':nid' => $webform_nid,
    ':email' => $e_mail_value,
    ':nodepath' => $node_path_value
  ))->fetchCol();
  if (sizeof($submissions) > 0) {
    form_set_error("e_mail", t('You already have signed this petition.'));
  }
}

/**
 * Count signings
 *
 * Set signings to +1 of form is submitted
 *
 */
function pw_petitions_form_submit(&$form, &$form_state) {
  // count +1 to signings
  $node_path_value = $form_values['values']['submitted']['node_path'];
  if ($node = menu_get_object('node', 1, $node_path_value)) {
    $node->field_petition_signings[0]['value']++;
    node_save($node);
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Selects related template.
 *
 */
function pw_petitions_preprocess_node(&$variables) {
  if ($variables['type'] == 'pw_petition') {
    $node = $variables['node'];
    $items = field_get_items('node', $node, 'field_petition_status');

    // @TODO: items hat viele values
    if (!empty($items)) {
      $variables['theme_hook_suggestions'][] = 'node__' . $node->type . '__' . $variables['view_mode'] . '__' . $items[0]['value'];

      $block = block_load('webform', 'client-block-10508');
      $rendered_block = _block_render_blocks(array($block));
      $rendered_block['webform_client-block-10508']->subject = "";
    }
    else {
      $variables['theme_hook_suggestions'][] = 'node__' . $node->type . '__' . $variables['view_mode'];
      $block = block_load('webform', 'client-block-10369');
      $rendered_block = _block_render_blocks(array($block));
      $rendered_block['webform_client-block-10369']->subject = "";
    }
    
    $variables["signing_form"] = drupal_render(_block_get_renderable_array($rendered_block));

    switch ($variables['field_petition_partner'][0]['value']) {
      case "":
        $variables['partner_html'] = "";
        $variables['signing_url'] = $variables['node_url'];
        //$variables['sharethis'] = "<span st_url=\"https://www.abgeordnetenwatch.de$node_url\" st_title=\"$title\" st_summary=\"Petition $title auf abgeordnetenwatch.de\" class=\"st_sharethis_hcount\" displayText=\"sharethis\"></span>";
        $variables['sharethis'] = theme('sharethis', array(
          'url' => url("node/$node->nid", array('absolute' => TRUE)),
          'title' => $variables["title"],
          'summary' => "Petition " . $variables["title"] . " auf abgeordnetenwatch.de",
        ));
        break;
      case "change.org":
        $variables['partner_html'] = theme('image', array(
          'path' => drupal_get_path('theme', 'parliamentwatch') . '/images/logo-change.png',
          'width' => 119,
          'height' => 23,
          'alt' => 'Change.org',
        ));
        if (empty($items)) {
          $variables['signing_url'] = url("https://secured.abgeordnetenwatch.de/tools/newsletter.php", array(
            'external' => TRUE,
            'query' => array(
              'width' => 800,
              'height' => 450,
              'iframe' => TRUE,
              'continue' => $variables['field_petition_external_url'][0]['url'],
            )
          ));
          $variables['node_url'] = $variables['signing_url'];
        }
        else {
          $variables['signing_url'] = $variables['node_url'];
        }
        break;
      case "openpetition":
        $variables['partner_html'] = '<img src="/sites/all/themes/custom/parliamentwatch/images/logo-openpetition.png" width="119" height="36" alt="OpenPetition">';
        //$variables['signing_url'] = $field_petition_external_url['und'][0]['url'];//todo
        $variables['node_url'] = $variables['signing_url'];
        break;
    }

    $variables['themed_image'] = theme('image_style', array(
      'style_name' => 'pw_landscape_l', //Configure style here!
      'path' => $variables['field_teaser_image'][0]['uri'],
    ));

    if (!empty($variables['field_teaser_image'][0]['field_image_copyright']) || !empty($variables['field_teaser_image'][0]['field_image_copyright']['und'][0]['value'])) {
      $variables['field_image_copyright'] = TRUE;
    }
  }
}

/**
 *  Implements hook_feeds_after_parse().
 *
 *  Checks if filesize of source file differs to target filesize.
 */
function pw_petitions_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  if ($source->id == 'petition_updater' && !empty($source->feed_nid)) {

    // load target node
    $n = node_load($source->feed_nid);

    // set reference to processor
    $processor = $source->importer->processor;

    // copy mappings of protected config
    $new_mappings = array();
    $new_mappings['mappings'] = $processor->config['mappings'];
    $mappings_changed = FALSE;

    // run through all mappings
    foreach ($processor->config['mappings'] as $key => $a_field) {
      $target_mapping = $a_field['target'];
      $target_field = field_get_items('node', $n, $target_mapping);

      // check if target field is of type image
      if (isset($target_field[0]['type']) && $target_field[0]['type'] == 'image') {
        $source_mapping = $a_field['source'];
        $source_url = $result->items[0][$source_mapping];

        // check if source is a valid url
        if (check_url($source_url)) {
          $source_headers = get_headers($source_url, TRUE);

          // check if header is set
          if (isset($source_headers['Content-Length'])) {
            $source_filesize = intval($source_headers['Content-Length']);
            $target_filesize = $target_field[0]['filesize'];

            // compare filesizes
            if ($target_filesize == $source_filesize) {

              // finally unset mapping if filesizes are equal
              unset($new_mappings['mappings'][$key]);
              $mappings_changed = TRUE;
            }
          }
        }
      }
    }

    // set changed mappings
    if ($mappings_changed) {
      $processor->addConfig($new_mappings);
    }
  }
}

/**
 *  Implements hook_block_info().
 *
 *  create a block for displaying voting behavior.
 */

function pw_petitions_block_info() {

  $blocks['voting_behavior'] = array(
    
    // info: The name of the block.
    'info' => t('Displaying Voting Behavior for Petitions and Bills'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 *  Implements hook_block_view().
 *
 */

function pw_petitions_block_view($delta = '') {

  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'voting_behavior':
      $parliament = _pw_get_current_parliament_term();
      if($parliament) {
        $block['subject'] = t('Voting behaviour');
        $block['content'] = pw_petitions_voting_behavior();
      }
      break;
  }
  return $block;
}

function pw_petitions_voting_behavior() {

  $parliament = _pw_get_current_parliament_term();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'vote')
    ->propertyCondition('status', NODE_PUBLISHED);

  $result = $query->execute();
  if (isset($result['node'])) {
    $vote_nids = array_keys($result['node']);
    $vote_nodes = entity_load('node', $vote_nids);
  }

  $content_voting_behavior = array(
      '#markup' => theme('voting_behavior', array('numvotes' => sizeof($vote_nodes))),
    );

  $content = $content_voting_behavior;
  
  return $content;
}

function pw_petitions_theme() {
  return array(
    'voting_behavior' => array(
      'variables' => array('numvotes' => NULL),
      'template' => 'voting-behavior',
    ),
  );
}
