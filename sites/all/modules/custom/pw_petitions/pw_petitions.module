<?php

/**
 * @file
 * Code for the PW Petitions feature.
 */
include_once 'pw_petitions.features.inc';

/**
 * Implements hook_menu().
 */
function pw_petitions_menu() {
  $items['petitions/thanks-for-signing'] = [
    'title' => 'Thanks for your signing!',
    'page callback' => 'pw_petitions_redirect',
    'access arguments' => ['access content'],
    'type' => MENU_SUGGESTED_ITEM,
  ];
  $items['petitions'] = [
    'title' => 'PetitionPlus',
    'page callback' => 'pw_petitions_page',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  $items['petitions/%'] = [
    'title' => 'PetitionPlus',
    'page arguments' => [1],
    'access arguments' => ['access content'],
  ];
  return $items;
}

/**
 * Page callback: Redirects to petitions overview page.
 */
function pw_petitions_redirect() {
  drupal_set_message('Vielen Dank, dass Sie die Petition unterzeichnet haben! Bitte teilen Sie die Petition in Ihren Netzwerken und unter Ihren Freunden!');
  drupal_goto('petitions');
}

/**
 * Page callback: Displays a listing of petitions.
 */
function pw_petitions_page($parliament = NULL) {
  $build = [];

  $q = pw_petitions_base_query()
    ->propertyOrderBy('changed', 'DESC')
    ->fieldOrderBy('field_petition_signings', 'value', 'DESC')
    ->fieldOrderBy('field_donation_amount', 'value', 'DESC');

  if (isset($parliament)) {
    $terms = taxonomy_get_term_by_name($parliament, 'parliaments');

    if (!empty($terms)) {
      $q->fieldCondition('field_parliament', 'tid', reset($terms)->tid);
    }
  }

  $result = $q->pager(9)->execute();

  if (!empty($result['node'])) {
    $build = node_view_multiple(node_load_multiple(array_keys($result['node'])), 'tile');
    $build['nodes']['#theme_wrappers'] = ['container__tiles'];
    $build['pager'] = [
      '#theme' => 'pager',
      '#weight' => 5,
    ];
  }

  return $build;
}

/**
 * Implements hook_form_alter().
 */
function pw_petitions_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'webform_client_form_10369':
      $form['#validate'][] = 'pw_petitions_form_validate';
      $form['#submit'][] = 'pw_petitions_form_submit';
  }
}

/**
 * Form validation handler for petition form,
 *
 * Checks if user has never submitted this form under this node path for this
 * petition.
 */
function pw_petitions_form_validate($form_id, $form_values) {
  // Checks if email was already used to sign this petition.
  $webform_nid = $form_values['values']['details']['nid'];
  $e_mail_value = $form_values['values']['submitted']['e_mail'];
  $node_path_value = $form_values['values']['submitted']['node_path'];
  $sql = "SELECT wf.sid
    FROM webform_submissions wf
    INNER JOIN webform_submitted_data wf_data_email ON wf.sid = wf_data_email.sid
    INNER JOIN webform_submitted_data wf_data_nodepath ON wf.sid = wf_data_nodepath.sid
    WHERE wf.nid = :nid AND wf_data_email.data = :email AND wf_data_nodepath.data = :nodepath";
  $submissions = db_query($sql, array(
    ':nid' => $webform_nid,
    ':email' => $e_mail_value,
    ':nodepath' => $node_path_value
    ))->fetchCol();
  if (sizeof($submissions) > 0) {
    form_set_error('e_mail', t('You have already signed this petition.'));
  }
}

/**
 * Form submission handler for petition form.
 *
 * Increments signings when form is submitted.
 */
function pw_petitions_form_submit(&$form, &$form_state) {
  if ($form['#form_id'] == 'webform_client_form_10369') {
    $node = $node = menu_get_object('node', 1, $form['submitted']['node_path']['#value']);
    if ($node) {
      $node->field_petition_signings[$node->language][0]['value'] ++;
      node_save($node);
    }
  }
}

/**
 * Returns a query for fetching published nodes of type pw_petition.
 *
 * @return EntityFieldQuery
 *   The query object.
 */
function pw_petitions_base_query() {
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $q->entityCondition('bundle', 'pw_petition');
  $q->propertyCondition('status', NODE_PUBLISHED);

  return $q;
}
