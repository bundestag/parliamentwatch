<?php
/**
 * @file
 * Code for the PW Petitions feature.
 */

include_once 'pw_petitions.features.inc';

/**
 * Implements hook_menu().
 */
function pw_petitions_menu() {
  $items = array();

  $items['petitions/thanks-for-signing'] = array(
    'title' => 'Thanks for your signing!',
    'access arguments' => array('access content'),
    'page callback' => 'redirect_to_petition',
    'type' => MENU_SUGGESTED_ITEM,
    );
  return $items;
}

function redirect_to_petition() {
  drupal_set_message("Vielen Dank, dass Sie die Petition unterzeichnet haben! Bitte teilen Sie die Petition in Ihren Netzwerken und unter Ihren Freunden!");
  drupal_goto('petitions');
}

/**
 * add additional handlers for petition webform
 *
 */
function pw_petitions_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
    case 'webform_client_form_10369':
    $form['#validate'][] = 'pw_petitions_form_validate';
    $form['#submit'][] = 'pw_petitions_form_submit';
  }
}

/**
 * Validation for petition form
 *
 * validates if user has never submitted this form under
 * this node path for this petition.
 *
 */

function pw_petitions_form_validate($form_id, $form_values) {

  // check if email was already used to sign this petition
  $webform_nid = $form_values['values']['details']['nid'];
  $e_mail_value = $form_values['values']['submitted']['e_mail'];
  $node_path_value = $form_values['values']['submitted']['node_path'];
  $sql = "SELECT wf.sid
  FROM webform_submissions wf
  INNER JOIN webform_submitted_data wf_data_email ON wf.sid = wf_data_email.sid
  INNER JOIN webform_submitted_data wf_data_nodepath ON wf.sid = wf_data_nodepath.sid
  WHERE wf.nid = :nid AND wf_data_email.data = :email AND wf_data_nodepath.data = :nodepath";
  $submissions = db_query($sql, array(
    ':nid' => $webform_nid,
    ':email' => $e_mail_value,
    ':nodepath' => $node_path_value
    ))->fetchCol();
  if (sizeof($submissions) > 0) {
    form_set_error("e_mail", t('You already have signed this petition.'));
  }
}

/**
 * Count signings
 *
 * Set signings to +1 of form is submitted
 *
 */
function pw_petitions_form_submit(&$form, &$form_state) {

  if($form['#form_id'] == 'webform_client_form_10369'){
    $node_path_value = $form['submitted']['node_path']['#value'];
    if ($node = menu_get_object('node', 1, $node_path_value)) {

      // count +1 to signings
      $node->field_petition_signings[$node->language][0]['value']++;
      node_save($node);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Selects related template.
 *
 */
function pw_petitions_preprocess_node(&$variables) {
  if ($variables['type'] == 'pw_petition') {
    $node = $variables['node'];
    $petition_status = field_get_items('node', $node, 'field_petition_status');

    if (!empty($petition_status)) {
      $variables['theme_hook_suggestions'][] = 'node__' . $node->type . '__' . $variables['view_mode'] . '__' . $petition_status[0]['value'];


      if ($petition_status == "collecting_donations"){
        // Load donation form
        /* This rather complicated way was chosen because the normal module_invoke/
        render method produces only the pure block content (form in this case) and
        not the required div wrappers. Suggestions are welcome: ruh@abgeordnetenwatch.de
        */
        $block = block_load('webform', 'client-block-10508');
        $rendered_block = _block_render_blocks(array($block));
        $rendered_block['webform_client-block-10508']->subject = "";
      }
      // count votes from politicians
      if ($variables['view_mode'] == 'teaser' && in_array($petition_status[0]['value'], array('asking_parliament', 'passed_parliament'))) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'vote')
        ->fieldCondition('field_vote_node', 'target_id', $node->nid)
        ->fieldCondition('field_voted', 'value', 1)
        ->fieldCondition('field_parliament', 'tid', $node->field_parliament[LANGUAGE_NONE][0]['tid'])
        ->propertyCondition('status', NODE_PUBLISHED);
        $variables["count_votes"] = $query->count()->execute();
      }
    }
    else {
      $variables['theme_hook_suggestions'][] = 'node__' . $node->type . '__' . $variables['view_mode'];
      // Load signing form
      /* This rather complicated way was chosen because the normal module_invoke/
      render method produces only the pure block content (form in this case) and
      not the required div wrappers. Suggestions are welcome: ruh@abgeordnetenwatch.de
      */
      $block = block_load('webform', 'client-block-10369');
      $rendered_block = _block_render_blocks(array($block));
      $rendered_block['webform_client-block-10369']->subject = "";
    }

    // Due to our complicated block modification above, we need to re-render the block.
    if (empty($petition_status) || $petition_status == "collecting_donations"){
        $variables["main_node_form"] = drupal_render(_block_get_renderable_array($rendered_block));
    }
    switch ($variables['field_petition_partner'][0]['value']) {
      case "change.org":
      $variables['partner_html'] = theme('image', array(
        'path' => drupal_get_path('theme', 'parliamentwatch') . '/images/logo-change.png',
        'width' => 119,
        'height' => 23,
        'alt' => 'Change.org',
        ));
      if (empty($petition_status)) {
        $variables['signing_url'] = url("https://secured.abgeordnetenwatch.de/tools/newsletter.php", array(
          'external' => TRUE,
          'query' => array(
            'width' => 800,
            'height' => 450,
            'iframe' => TRUE,
            'continue' => $variables['field_petition_external_url'][0]['url'],
            )
          ));
          // If the petition is run by an external service, all links from
          // the node need to point to that URL. To avoid having to access
          // the nitty-gritty of all elements in use, we simply override
          // the node url in
        $variables['node_url'] = $variables['signing_url'];
      }
      else {
        $variables['signing_url'] = $variables['node_url'];
      }
      break;
      default:
      $variables['partner_html'] = "";
      $variables['signing_url'] = $variables['node_url'];
      break;
    }

    $variables['themed_image'] = theme('image_style', array(
      'style_name' => 'pw_landscape_l', //Configure style here!
      'path' => $variables['field_teaser_image'][0]['uri'],
      ));

    if (!empty($variables['field_teaser_image'][0]['field_image_copyright']) || !empty($variables['field_teaser_image'][0]['field_image_copyright']['und'][0]['value'])) {
      $variables['has_image_copyright'] = TRUE;
    }
  }
}

/**
 *  Implements hook_feeds_after_parse().
 *
 *  Checks if filesize of source file differs to target filesize.
 */
function pw_petitions_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  if ($source->id == 'petition_updater' && !empty($source->feed_nid)) {
    // load target node
    $n = node_load($source->feed_nid);

    // set reference to processor
    $processor = $source->importer->processor;

    // array with items to unset
    $keys_to_unset = array();

    // run through all mappings
    foreach ($processor->config['mappings'] as $key => $a_field) {

      $target_mapping = $a_field['target'];
      $target_field = field_get_items('node', $n, $target_mapping);

      // check if target field is of type image
      if (isset($target_field[0]['type']) && $target_field[0]['type'] == 'image') {

        $source_mapping = $a_field['source'];
        $source_url = $result->items[0][$source_mapping];

        // check if source is a valid url
        if (check_url($source_url)) {

          $source_headers = get_headers($source_url, TRUE);
          if(!empty($source_headers['Content-Length'])){
            $source_filesize = intval($source_headers['Content-Length']);
            $target_filesize = $target_field[0]['filesize'];

            // don't import same file again
            if ($target_filesize == $source_filesize) {
              $keys_to_unset[] = $key;
            }
          }
          else{
            // prevent from overwriting with file of zero length
            $keys_to_unset[] = $key;
          }
        }
        else{
          // prevent from overwriting with empty url
          $keys_to_unset[] = $key;
        }
      }
    }

    // set changed mappings
    if (sizeof($keys_to_unset) > 0) {

      // copy protected mappings
      $new_mappings = array();
      $new_mappings['mappings'] = $processor->config['mappings'];
      foreach ($keys_to_unset as $key) {
        unset($new_mappings['mappings'][$key]);
      }
      $processor->addConfig($new_mappings);
    }
  }
}
