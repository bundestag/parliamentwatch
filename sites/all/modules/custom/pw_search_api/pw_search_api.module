<?php

/**
 * @file
 * Code for the PW Search api feature.
 */
include_once 'pw_search_api.features.inc';
include_once 'pw_customfacets.inc';

/**
 * Implements hook_views_query_alter().
 */
function pw_search_api_search_api_views_query_alter(view &$view, SearchApiViewsQuery &$query) { // check for display
  if ($view->name == 'vote_search' && arg(0) == 'node' && is_numeric(arg(1))) {
    // Adds filter to only show items for the current node.
    $query->where[1]['conditions'][] = array("field_vote_node", arg(1), "=");
  }
}

/**
 * Implements hook_node_presave().
 *
 * Sets sort date field depending on node type
 */
function pw_search_api_node_presave($node) {
  switch ($node->type) {
    case 'poll':
      $node->field_search_sort_date['und'][0]['value'] = $node->field_poll_date['und'][0]['value'];
      $node->field_search_sort_date['und'][0]['value2'] = $node->field_search_sort_date['und'][0]['value'];
      break;
    case 'blogpost':
      $node->field_search_sort_date['und'][0]['value'] = date("Y-m-d H:i:s", $node->created);
      $node->field_search_sort_date['und'][0]['value2'] = $node->field_search_sort_date['und'][0]['value'];
      break;
    case 'dialogue':
      $node->field_search_sort_date['und'][0]['value'] = date("Y-m-d H:i:s", $node->created);
      $node->field_search_sort_date['und'][0]['value2'] = $node->field_search_sort_date['und'][0]['value'];
      break;
    case 'page':
      $node->field_search_sort_date['und'][0]['value'] = date("Y-m-d H:i:s", $node->created);
      $node->field_search_sort_date['und'][0]['value2'] = $node->field_search_sort_date['und'][0]['value'];
      break;
    case 'pw_petition':
      // Petition dates are only updated on status change.
      $current_node = node_load($node->nid);
      if ($current_node->field_petition_status['und'][0]['value'] != $node->field_petition_status['und'][0]['value']) {
        $node->field_search_sort_date['und'][0]['value'] = date("Y-m-d H:i:s", $node->changed);
        $node->field_search_sort_date['und'][0]['value2'] = $node->field_search_sort_date['und'][0]['value'];
      }
      break;
  }
}

/**
 * Helper function to initialize the sort date for all relevant nodes,
 */
function pw_search_api_set_sort_date() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', ['pw_petition'], 'IN'); //,'blogpost','page','dialogue','pw_petition'
  $nodes = $query->execute();
  $i = 1;
  $ct = count($nodes['node']);
  foreach ($nodes['node'] as $node) {
    print('Updated Node ' . $node->nid . "\t(" . $i . ' of ' . $ct . ')' . PHP_EOL);
    $i++;
    $current_node = node_load($node->nid);
    node_save($current_node);
  }
}

/**
 * Implements hook_search_api_index_items_alter().
 */
function pw_search_api_search_api_index_items_alter(array &$items, SearchApiIndex $index) {
  if ($index->machine_name == "politician_index") {
    // Fetch
    foreach ($items as $id => $item) {
      if (in_array("Candidate", $item->roles)) {
        $role = "candidate";
      } else {
        $role = "deputy";
      }
      $parliament = taxonomy_term_load($item->field_user_parliament['und'][0]['tid'])->name;
      $result = db_query('SELECT `vid` FROM `user_archive_cache` WHERE `uid` = :uid AND `parliament_name` = :parliament AND `user_role` = :role', array(
        ':uid' => $item->uid,
        ':parliament' => $parliament,
        ':role' => $role
        ))->fetchCol();
      $user_revision = user_revision_load($item->uid, $result[0]);

      if (empty($item->field_user_picture)) {
        $item->field_has_picture['und'][0]['value'] = "0";
      } else {
        $item->field_has_picture['und'][0]['value'] = "1";
      }
    }
  }
}

/**
 * Implements hook_search_api_processor_info().
 *
 * Registers preprocessor to add leading zero to 4-digit postal codes.
 */
function pw_search_api_search_api_processor_info() {
  $callbacks['add_leading_zero'] = array(
    'name' => t('Add leading zero'),
    'description' => t('Add leading zero to 4-digit area codes.'),
    'class' => 'SearchApiAddLeadingZero',
    'weight' => -1,
  );
  return $callbacks;
}
