<?php
/**
 * @file
 * Code for the PW Search feature.
 */

include_once 'pw_search.features.inc';

/**
 * @file
 * Adds a hidden field to the user that returns all hie previous names. This is necessary for the search index to find historical names.
 */

/**
 * Implements hook_entity_property_info_alter().
 */
function pw_search_entity_property_info_alter(&$info) {
//  $info['user']['properties']['historical_names'] = array(
//    'type' => 'text', // <<<<<<<<<<<< Es funktioniert so. Aber müsste es nicht list<text> heißen...? Wir liefern ein Array zurück im Callback.
//    'label' => t('Historical Names'),
//    'sanitized' => TRUE,
//    'getter callback' => 'pw_search_historical_names_getter_callback',
//  );
  $info['user']['properties']['dialogues'] = array(
    'type' => 'list<node>',
    'label' => t('Dialogues'),
    'sanitized' => TRUE,
    'getter callback' => 'pw_search_dialogues_getter_callback',
  );
  
}

/**
 * Getter callback for dialogues.
 */
function pw_search_dialogues_getter_callback($item) {
  $searcharray = array();
  // fetch all dialogues of which the recipient is the user with $item->uid:
  $rows = db_query('SELECT * FROM {field_data_field_dialogue_recipient} f where field_dialogue_recipient_target_id=:uid', array(':uid' => $item->uid))->fetchAll();
  foreach ($rows as $row) {
    $searcharray[] = $row->entity_id;
//    $tmpnode = node_load($row->entity_id); // load the dialogue (=question) node
//    $searcharray[] = $tmpnode->body["und"]["0"]["value"]; // this is the question's body
//    
//    // Now we fetch all comments for this dialogue:
//    $query = new EntityFieldQuery();
//    $query->entityCondition('entity_type', 'comment')
//      ->propertyCondition('nid', $row->entity_id);
//    $result = $query->execute();
//    $cids = array();
//    if (isset($result['comment']))
//      $cids = array_keys($result['comment']);
//    foreach ($cids as $cid) {
//      $comment = comment_load($cid);
//      $searcharray[] = preg_replace('#(<crypt>).*?(</crypt>)#', '', $comment->comment_body["und"]["0"]["value"]); // this is the comment body, where all occurrences of the <crypt> tag are replaced
//    } 
  }
  return $searcharray;
}

/**
 * Getter callback for historical names.
 */
function pw_search_historical_names_getter_callback($item) {
  $revisions = user_revision_list($item);
  $outputnames = array();
  foreach ($revisions as $revision) {
    $account_tmp = user_revision_load($revision->uid, $revision->vid);
    $outputnames[] = $account_tmp->field_user_fname["und"][0]["value"];
    $outputnames[] = $account_tmp->field_user_lname["und"][0]["value"];
  }
  return $outputnames;
}
