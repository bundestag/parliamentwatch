<?php

/**
 * @file pw_forms_filter.module
 */


/**
 * This function maintains the cache table user_filter_cache
 */
function pw_forms_filter_cron() {

  // first delete all items
  db_query('TRUNCATE TABLE {user_filter_cache}');

  // parties
  db_query("INSERT INTO user_filter_cache (output_tid, output_name, input_output_type, input_role_name, input_parliament_name)
    SELECT DISTINCT tparty.tid as output_tid, tparty.name as output_name, 'party' as input_output_type, trole.name as input_role_name, tparl.name as input_parliament_name
    FROM users AS u
    INNER JOIN user_revision AS urev ON u.uid = urev.uid
    INNER JOIN field_revision_field_user_roles_for_view_mode_s AS ur ON ur.entity_type = 'user' AND u.uid = ur.entity_id AND urev.vid = ur.revision_id
    INNER JOIN taxonomy_term_data AS trole ON ur.field_user_roles_for_view_mode_s_tid = trole.tid
    INNER JOIN field_revision_field_user_parliament AS uparl ON uparl.entity_type = 'user' AND u.uid = uparl.entity_id AND urev.vid = uparl.revision_id
    INNER JOIN taxonomy_term_data AS tparl ON uparl.field_user_parliament_tid = tparl.tid
    INNER JOIN field_revision_field_user_party AS uparty ON uparty.entity_type = 'user' AND u.uid = uparty.entity_id AND urev.vid = uparty.revision_id
    INNER JOIN taxonomy_term_data AS tparty ON uparty.field_user_party_tid = tparty.tid
    INNER JOIN user_archive_cache AS uac ON urev.vid = uac.vid
    WHERE u.status<>0");

  // constituencies
  db_query("INSERT INTO user_filter_cache (output_tid, output_name, input_output_type, input_role_name, input_parliament_name)
  SELECT DISTINCT tconstituency.tid as output_tid, tconstituency.name as output_name, 'constituency' as input_output_type, trole.name as input_role_name, tparl.name as input_parliament_name
  FROM users AS u
  INNER JOIN user_revision AS urev ON u.uid = urev.uid
  INNER JOIN field_revision_field_user_roles_for_view_mode_s AS ur ON ur.entity_type = 'user' AND u.uid = ur.entity_id AND urev.vid = ur.revision_id
  INNER JOIN taxonomy_term_data AS trole ON ur.field_user_roles_for_view_mode_s_tid = trole.tid
  INNER JOIN field_revision_field_user_parliament AS uparl ON uparl.entity_type = 'user' AND u.uid = uparl.entity_id AND urev.vid = uparl.revision_id
  INNER JOIN taxonomy_term_data AS tparl ON uparl.field_user_parliament_tid = tparl.tid
  INNER JOIN field_revision_field_user_constituency AS uconstituency ON uconstituency.entity_type = 'user' AND u.uid = uconstituency.entity_id AND urev.vid = uconstituency.revision_id
  INNER JOIN taxonomy_term_data AS tconstituency ON uconstituency.field_user_constituency_tid = tconstituency.tid
  INNER JOIN user_archive_cache AS uac ON urev.vid = uac.vid
  WHERE u.status<>0");

  // lists
  db_query("INSERT INTO user_filter_cache (output_tid, output_name, input_output_type, input_role_name, input_parliament_name)
  SELECT DISTINCT tlist.tid as output_tid, tlist.name as output_name, 'list' as input_output_type, trole.name as input_role_name, tparl.name as input_parliament_name
  FROM users AS u
  INNER JOIN user_revision AS urev ON u.uid = urev.uid
  INNER JOIN field_revision_field_user_roles_for_view_mode_s AS ur ON ur.entity_type = 'user' AND u.uid = ur.entity_id AND urev.vid = ur.revision_id
  INNER JOIN taxonomy_term_data AS trole ON ur.field_user_roles_for_view_mode_s_tid = trole.tid
  INNER JOIN field_revision_field_user_parliament AS uparl ON uparl.entity_type = 'user' AND u.uid = uparl.entity_id AND urev.vid = uparl.revision_id
  INNER JOIN taxonomy_term_data AS tparl ON uparl.field_user_parliament_tid = tparl.tid
  INNER JOIN field_revision_field_user_list AS ulist ON ulist.entity_type = 'user' AND u.uid = ulist.entity_id AND urev.vid = ulist.revision_id
  INNER JOIN taxonomy_term_data AS tlist ON ulist.field_user_list_tid = tlist.tid
  INNER JOIN user_archive_cache AS uac ON urev.vid = uac.vid
  WHERE u.status<>0");

  // list positions
  db_query("INSERT INTO user_filter_cache (output_tid, output_name, input_output_type, input_role_name, input_parliament_name)
  SELECT DISTINCT tlistposition.tid as output_tid, tlistposition.name as output_name, 'listposition' as input_output_type, trole.name as input_role_name, tparl.name as input_parliament_name
  FROM users AS u
  INNER JOIN user_revision AS urev ON u.uid = urev.uid
  INNER JOIN field_revision_field_user_roles_for_view_mode_s AS ur ON ur.entity_type = 'user' AND u.uid = ur.entity_id AND urev.vid = ur.revision_id
  INNER JOIN taxonomy_term_data AS trole ON ur.field_user_roles_for_view_mode_s_tid = trole.tid
  INNER JOIN field_revision_field_user_parliament AS uparl ON uparl.entity_type = 'user' AND u.uid = uparl.entity_id AND urev.vid = uparl.revision_id
  INNER JOIN taxonomy_term_data AS tparl ON uparl.field_user_parliament_tid = tparl.tid
  INNER JOIN field_revision_field_user_list_position AS ulistposition ON ulistposition.entity_type = 'user' AND u.uid = ulistposition.entity_id AND urev.vid = ulistposition.revision_id
  INNER JOIN taxonomy_term_data AS tlistposition ON ulistposition.field_user_list_position_tid = tlistposition.tid
  INNER JOIN user_archive_cache AS uac ON urev.vid = uac.vid
  WHERE u.status<>0");

  // electoral regions
  db_query("INSERT INTO user_filter_cache (output_tid, output_name, input_output_type, input_role_name, input_parliament_name)
  SELECT DISTINCT tregion.tid as output_tid, tregion.name as output_name, 'electoral_region' as input_output_type, ufc.input_role_name, ufc.input_parliament_name
  FROM user_filter_cache AS ufc
  INNER JOIN field_revision_field_electoral_region AS eregion ON eregion.entity_type = 'taxonomy_term' AND ufc.output_tid = eregion.entity_id
  INNER JOIN taxonomy_term_data AS tregion ON eregion.field_electoral_region_tid = tregion.tid
  ");
}

/**
 * Implements hook_form_alter()..
 */
function pw_forms_filter_form_alter(&$form, &$form_state, $form_id) {

  // profiles overview
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'profile_list_rev' && $form_state['view']->current_display == 'grid') {

    $form['reset'] = array(
      '#type' => 'markup',
      '#markup' => '<a class="icon-close" href="' . $form['#action'] . '">&nbsp;Zur√ºcksetzen</a>',
    );

    // parameters from url
    $url_parameters = array_keys(drupal_get_query_parameters());
    if (!empty($url_parameters)) {
      $url_parameters = explode(',', $url_parameters[0]);
    }

    // either form was already submitted by user or not
    $form_was_submitted = sizeof($form_state['view']->exposed_input) > 1;

    // which kind of profiles
    $role_name = arg(2) == 'deputies' ? 'Deputy' : 'Candidate';

    // load parliament term
    $parliament = _pw_get_current_parliament_term();

    // something went wrong
    if (empty($parliament)) {
      return FALSE;
    }

    // disable specific filters
    foreach (field_get_items('taxonomy_term', $parliament, 'field_parliament_filter_disabled') as $filter_name) {
      $filter_name = $filter_name['value'];
      unset($form[$filter_name]);
      unset($form['#info']['filter-' . $filter_name]);
      unset($form_state['view']->display_handler->options['filters'][$filter_name]);
      unset($form_state['view']->display_handler->handlers['filter'][$filter_name]);
      unset($form_state['view']->filter[$filter_name]);
    }

    // parameter for sql replacement
    $a_parameter = array(
      ':role_name' => $role_name,
      ':parliament_name' => $parliament->name
    );

    // parties - query database
    if (isset($form['field_user_party_tid'])) {
      $sql = "SELECT output_tid as tid, output_name as name FROM {user_filter_cache}
              WHERE input_output_type='party'
              AND input_role_name=:role_name
              AND input_parliament_name=:parliament_name";
      $result = db_query($sql, $a_parameter);
      $terms = $result->fetchAll();
      $options = array();
      foreach ($terms as $term) {
        $options[$term->tid] = $term->name;

        // checks url and sets filter
        $term_encoded = str_replace(' ', '_', $term->name);
        if (!$form_was_submitted && in_array($term_encoded, $url_parameters)) {
          $form_state['input']['field_user_party_tid'][] = $term->tid;
        }
      }
      asort($options);
      $form['field_user_party_tid']['#options'] = $options;
    }


    // electoral regions - query database
    if (isset($form['field_electoral_region_tid'])) {
      $sql = "SELECT output_tid as tid, output_name as name FROM {user_filter_cache}
              WHERE input_output_type='electoral_region'
              AND input_role_name=:role_name
              AND input_parliament_name=:parliament_name";
      $result = db_query($sql, $a_parameter);
      $terms = $result->fetchAll();
      $options = array();
      foreach ($terms as $term) {
        $options[$term->tid] = $term->name;
        // checks url and sets filter
        if (!$form_was_submitted && in_array($term->name, $url_parameters)) {
          $form_state['input']['field_electoral_region_tid'] = $term->tid;
        }
      }
      natsort($options);
      $options = array('All' => 'Alle') + $options;
      $form['field_electoral_region_tid']['#options'] = $options;
    }

    // constituencies - query database
    if (isset($form['field_user_constituency_tid'])) {
      $sql = "SELECT output_tid as tid, output_name as name FROM {user_filter_cache}
              WHERE input_output_type='constituency'
              AND input_role_name=:role_name
              AND input_parliament_name=:parliament_name";
      $result = db_query($sql, $a_parameter);
      $terms = $result->fetchAll();
      $options = array();
      foreach ($terms as $term) {
        $options[$term->tid] = $term->name;
        // checks url and sets filter
        if (!$form_was_submitted && in_array($term->name, $url_parameters)) {
          $form_state['input']['field_user_constituency_tid'] = $term->tid;
        }
      }
      natsort($options);
      $options = array('All' => 'Alle') + $options;
      $form['field_user_constituency_tid']['#options'] = $options;

      // rename constituency if is configured
      $field_rename_value = field_get_items('taxonomy_term', $parliament, 'field_parliament_constit_rename');
      if (!empty($field_rename_value)) {
        $form['#info']['filter-field_user_constituency_tid']['label'] = $field_rename_value[0]['value'];
      }

    }

    // lists - query database
    if (isset($form['field_user_list_tid'])) {
      $sql = "SELECT output_tid as tid, output_name as name FROM {user_filter_cache}
              WHERE input_output_type='list'
              AND input_role_name=:role_name
              AND input_parliament_name=:parliament_name";
      $result = db_query($sql, $a_parameter);
      $terms = $result->fetchAll();
      $options = array();
      foreach ($terms as $term) {
        $options[$term->tid] = $term->name;
        // checks url and sets filter
        if (!$form_was_submitted && in_array($term->name, $url_parameters)) {
          $form_state['input']['field_user_list_tid'] = $term->tid;
        }
      }
      natsort($options);
      $options = array('All' => 'Alle') + $options;
      $form['field_user_list_tid']['#options'] = $options;
    }

    // listposition - query database
    if (isset($form['field_user_list_position_tid'])) {
      $sql = "SELECT output_tid as tid, output_name as name FROM {user_filter_cache}
              WHERE input_output_type='listposition'
              AND input_role_name=:role_name
              AND input_parliament_name=:parliament_name";
      $result = db_query($sql, $a_parameter);
      $terms = $result->fetchAll();
      $options = array();
      foreach ($terms as $term) {
        $options[$term->tid] = $term->name;
        // checks url and sets filter
        if (!$form_was_submitted && in_array($term->name, $url_parameters)) {
          $form_state['input']['field_user_list_position_tid'] = $term->tid;
        }
      }
      natsort($options);
      $options = array('All' => 'Alle') + $options;
      $form['field_user_list_position_tid']['#options'] = $options;
    }

    // address (field_user_address:administrative_area) - checks url and sets filter
    if (isset($form['field_user_address_administrative_area'])) {
      if (!$form_was_submitted) {
        foreach ($form['field_user_address_administrative_area']['#options'] as $index => $area) {
          if (in_array($area, $url_parameters)) {
            $form_state['input']['field_user_address_administrative_area'] = $index;
          }
        }
      }
    }

    /*
    $sql = "SELECT DISTINCT address.field_user_address_administrative_area
            FROM field_data_field_user_address AS address
            WHERE address.field_user_address_administrative_area IS NOT NULL AND address.field_user_address_administrative_area != ''
            ORDER BY address.field_user_address_administrative_area";
    $result = db_query($sql, $a_parameter);
    $areas = $result->fetchAll();

    $options = array('All' => 'Alle');
    foreach ($areas as $index => $area) {
      $options[$index] = $area->field_user_address_administrative_area;

      // checks url and sets filter
      //if(!$form_was_submitted && in_array(strtolower($term->name), $url_parameters)){
      //  $form_state['input']['field_user_  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'profile_list_rev' && $form_state['view']->current_display == 'grid') {address_administrative_area'] = $term->tid;
      //}
    }
    $form['field_user_address_administrative_area']['#options'] = $options;
    */
  }


  // question and answers in profiles
  elseif ($form_id == 'views_exposed_form' && $form_state['view']->name == 'profile_questions_answers' && $form_state['view']->current_display == 'profile') {
    $form['#action'] = '/' . request_path();
    $form['reset'] = array(
      '#type' => 'markup',
      '#markup' => '<a class="icon-close" href="' . $form['#action'] . '">&nbsp;Zur√ºcksetzen</a>',
    );

    $user = _pw_get_current_user();
    $parliament = _pw_get_current_parliament_term();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'dialogue')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_dialogue_recipient', 'target_id', $user->uid)
      ->fieldCondition('field_parliament', 'tid', $parliament->tid);
    $result = $query->execute();

    // load dialogue nodes
    if (!empty($result['node'])) {
      $dialogue_ids = array_keys($result['node']);
      $dialogues = node_load_multiple($dialogue_ids);

      // alter filter for topics
      $dialogue_topic_tids = array();
      foreach ($dialogues as $dialogue) {
        if (sizeof($dialogue->field_dialogue_topic[LANGUAGE_NONE]) > 0) {
          $dialogue_topic_tids[] = $dialogue->field_dialogue_topic[LANGUAGE_NONE][0]['tid'];
        }
      }
      $topic_terms = taxonomy_term_load_multiple($dialogue_topic_tids);
      $options = array('All' => 'Alle');
      foreach ($topic_terms as $term) {
        $options[$term->tid] = $term->name;
      }
      $form['field_dialogue_topic_tid']['#options'] = $options;
    }
  }

}
