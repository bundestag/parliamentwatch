<?php

/**
 * @file pw_cleanup.module
 */

/**
 * Implements hook_menu().
 */
function pw_cleanup_menu() {
  $items = array();

  $items['admin/config/pw/cleanup'] = array(
    'title' => 'PW Cleanup',
    'description' => 'test 123',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_cleanup_settings_form'),
    'access arguments' => array('administer site configuration'),
    );
  return $items;
}

/**
 * Implements hook_uninstall().
 */
function pw_cleanup_uninstall() {
  global $conf;
  foreach (array_keys($conf) as $key) {
   if (strpos($key, 'pw_cleanup_') === 0) {
     variable_del($key);
   }
 }
}

/**
 * Form builder.
 */
function pw_cleanup_settings_form($form, &$form_state) {

  // retrieve public / private files paths
  $file_public_path = variable_get('file_public_path', conf_path() . '/files');
  $file_private_path = variable_get('file_private_path', '');

  // prepare file paths for selection
  $options_directories = glob($file_public_path.'/*', GLOB_ONLYDIR);
  array_unshift($options_directories, $file_public_path);
  $options_directories = array_flip($options_directories);
  foreach($options_directories as $directory => $index) {

    // add only directories which are not within the private path
    if(!empty($file_private_path) && strpos($directory, $file_private_path) === 0){
      unset($options_directories[$directory]);
    }
    else{
      // add directory as value
      $options_directories[$directory] = $directory;
    }
  }

  // directories to start search from
  $form['pw_cleanup_directories'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => 'Directories to scan',
    '#options' => $options_directories,
    '#default_value' => variable_get('pw_cleanup_directories', FALSE),
    '#size' => 20,
    '#required' => TRUE,
    );

  // set maximum files to show for selection
  $php_max_input_vars = ini_get('max_input_vars');
  $form['pw_cleanup_max_files'] = array(
    '#type' => 'textfield',
    '#title' =>'Max files to show',
    '#description' => 'Please note that there is a max_input_vars settings for php. Limit got by ini_get() is '.$php_max_input_vars,
    '#default_value' => variable_get('pw_cleanup_max_files', is_numeric($php_max_input_vars) && $php_max_input_vars > 100?$php_max_input_vars-100:500),
    '#required' => TRUE,
    );

  // header for files table
  $header_files = array(
    'filename' => array('data' => 'filename'),
    'path' => array('data' => 'path'),
    );

  // rows for files table
  $options_files = array();
  $directories = variable_get('pw_cleanup_directories');
  if(!empty($directories)){
    $max_files = variable_get('pw_cleanup_max_files');
    foreach($directories as $directory){

      // scan direcory - recurse only if not root files directory
      $files = file_scan_directory($directory, '/.*\..*/', array('recurse' => $directory != $file_public_path));
      foreach($files as $file){

        // file is not in use
        $file_uri = str_replace($file_public_path.'/', 'public://', $file->uri);
        $efq = new EntityFieldQuery();
        $result = $efq->entityCondition('entity_type', 'file')
        ->propertyCondition('uri', $file_uri)
        ->execute();
        if(empty($result['file']) || empty(file_usage_list(reset($result['file'])))){
          $row = array();
          $row['filename'] = $file->filename;
          $row['path'] = str_replace($file_public_path, '.', dirname($file->uri));

          // add row either with fid or uri as index
          $index = !empty($result['file'])?key($result['file']):$file->uri;
          $options_files[$index] = $row;

          if(sizeof($options_files) >= $max_files){
            break 2;
          }
        }
      }
    }

  // add description to table
  }
  $form['pw_cleanup_files_desc'] = array(
    '#markup' => 'Files to delete - please mark.',
    );

  // files table
  $form['pw_cleanup_files'] = array(
    '#type' => 'tableselect',
    '#header' => $header_files,
    '#options' => $options_files,
    '#empty' => 'No content available.',
    );

  // add submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    );

  return $form;
}

/**
 * Form submit handler.
 */
function pw_cleanup_settings_form_submit($form, &$form_state) {

  // store settings
  variable_set('pw_cleanup_directories', $form['pw_cleanup_directories']['#value']);
  variable_set('pw_cleanup_max_files', $form['pw_cleanup_max_files']['#value']);

  // retrieve public path
  $file_public_path = variable_get('file_public_path', conf_path() . '/files');

  $files_to_delete = $form['pw_cleanup_files']['#value'];
  foreach($files_to_delete as $file_to_delete){

    $delete_success = FALSE;

    // delete the file by
    if(is_numeric($file_to_delete)){
      $file = file_load($file_to_delete);
      if(file_delete($file)){
        $delete_success = TRUE;
        drupal_set_message("File with fid $file_to_delete and path ".$file->uri." was deleted", "status");
      }
    }
    // delete the file directly from disk
    elseif(file_unmanaged_delete($file_to_delete)){
      $delete_success = TRUE;
      drupal_set_message("File $file_to_delete was deleted", "status");
    }

    // throw message
    if(!$delete_success){
      drupal_set_message("File $file_to_delete wasn't deleted", "error");
    }
  }
}
