<?php
/**
 * @file
 * Code for the PW Parliaments feature.
 */

include_once 'pw_parliaments.features.inc';

function pw_parliaments_menu() {
  $items['parliaments/suggestions'] = [
    'title' => 'Suggested parliaments',
    'page callback' => 'pw_parliaments_suggestions',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function pw_parliaments_taxonomy_term_presave($term) {
  // check if is parliaments vocabulary
  if($term->vid == 18 && module_exists('pw_userarchives')){
    db_delete('user_archive_cache')
      ->condition('parliament_name', $term->original->name)
      ->execute();
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function pw_parliaments_taxonomy_term_update($term) {
  // check if is parliaments vocabulary
  if($term->vid == 18 && module_exists('pw_userarchives')){
    pw_userarchives_cron();
    if(module_exists('pw_cache')){
      $query = db_select('user_archive_cache', 'uac')
        ->fields('uac', array('user_name', 'vid', 'actual_profile'))
        ->condition('parliament_name', $term->name);
      $result = $query->execute();
      if($result->rowCount() > 0){
        while($row = $result->fetchAssoc()){
          if($row['actual_profile'] == 1){
            $expire_paths[] = 'profile/'.$row['user_name'];
          }
          else{
            $expire_paths[] = 'profile/'.$row['user_name'].'/archive/'.$row['vid'];
          }
        }
        pw_cache_expire_cache($expire_paths);
      }
    }
  }
}

/**
 * Implements hook_taxonomy_term_view_alter().
 */
function pw_parliaments_menu_alter(&$items) {
  $items['taxonomy/term/%taxonomy_term']['page callback'] = 'pw_parliaments_taxonomy_term_page';
  unset($items['taxonomy/term/%taxonomy_term_load']['file']);
}

/**
 * Implements hook_block_list_alter().
 *
 * Removes title block from taxonomy term pages of funded parliaments.
 */
function pw_parliaments_block_list_alter(&$blocks) {
  $term = menu_get_object('taxonomy_term', 2);

  if (!isset($term) || !pw_parliaments_is_funded($term)) {
    return;
  }

  foreach ($blocks as $key => $block) {
    if ($block->module == 'pw_globals' && $block->delta == 'title') {
      unset($blocks[$key]);
    }
  }
}

/**
 * Page callback: Returns JSON object for parliament suggestions.
 *
 * The result lists parliaments with constituencies matching the given digits
 * of the postal_code parameter from the URL and indicates whether the user
 * will be directed to the candidates or deputies search.
 *
 * Example:
 *
 * GET /parliaments/suggestions?postal_code=30159
 *
 * {
 *   30159: [
 *     {"parliament": "Bundestag", "role": "deputies"},
 *     {"parliament": "Niedersachsen", "role": "candidates"},
 *   ]
 * }
 *
 * @return string
 *   JSON object for parliament suggestions.
 */
function pw_parliaments_suggestions() {
  $suggestions = [];
  $current_parliaments = pw_globals_current_parliaments();

  if (!isset(drupal_get_query_parameters()['postal_code'])) {
    return MENU_ACCESS_DENIED;
  }

  $postal_code = drupal_get_query_parameters()['postal_code'];

  $q = db_select('field_data_field_user_parliament', 'parliament');
  $q->join('field_data_field_user_constituency', 'constituency', 'parliament.entity_id = constituency.entity_id');
  $q->join('field_data_field_constituency_area_codes', 'acref', 'constituency.field_user_constituency_tid = acref.entity_id');
  $q->join('taxonomy_term_data', 'postal_codes', 'acref.field_constituency_area_codes_tid = postal_codes.tid');
  $q->condition('postal_codes.name', "$postal_code%", 'LIKE');
  $q->condition('parliament.field_user_parliament_tid', array_keys($current_parliaments));
  $q->addExpression("GROUP_CONCAT(postal_codes.name, ' ')", 'postal_codes');
  $q->fields('parliament', ['field_user_parliament_tid']);
  $q->groupBy('parliament.field_user_parliament_tid');

  $data = [];

  foreach ($q->execute() as $row) {
    $role = _pw_globals_politician_search_role_condition($current_parliaments[$row->field_user_parliament_tid]);
    $suggestions[] = [
      'postalCodes' => $row->postal_codes,
      'parliament' => $current_parliaments[$row->field_user_parliament_tid]->name,
      'role' => $role,
      'url' => url('profiles/' . $row->field_user_parliament_tid . '/' . $role),
    ];
  }

  return drupal_json_output($suggestions);
}

/**
 * Displays parliament pages, leaving other term pages to the default callback.
 */
function pw_parliaments_taxonomy_term_page($term) {
  if ($term->vocabulary_machine_name == 'parliaments') {
    if (pw_parliaments_is_funded($term)) {
      // Ensure side effects of taxonomy_term_view like generation of metatags
      // are triggered.
      taxonomy_term_view($term);
      return '';
    }
    else {
      return taxonomy_term_view($term);
    }
  }

  $build = taxonomy_term_view($term);
  $nids = taxonomy_select_nodes($term->tid, TRUE, variable_get('default_nodes_main', 12));

  if ($nids) {
    $nodes = node_load_multiple($nids);
    $build = node_view_multiple($nodes, 'tile');
    $build['#theme_wrappers'] = ['container__tiles'];
    $build['pager'] = [
      '#theme' => 'pager',
      '#weight' => 5,
    ];
  }
  else {
    $build['no_content'] = [
      '#prefix' => '<p>',
      '#markup' => t('There is currently no content classified with this term.'),
      '#suffix' => '</p>',
    ];
  }

  return $build;
}

/**
 * Returns TRUE if the given parliament is funded, FALSE otherwise.
 *
 * If the given term is not a parliament term returns NULL.
 *
 * @param object $term
 *   The parliament term.
 *
 * @return bool
 *   TRUE if the given parliament is funded, FALSE otherwise
 */
function pw_parliaments_is_funded($term) {
  if ($term->vocabulary_machine_name != 'parliaments') {
    return NULL;
  }
  elseif (empty($term->description)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
