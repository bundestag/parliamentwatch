<?php

/**
 * @file
 * Code for the PW Kandidatencheck feature.
 */
include_once 'pw_kandidatencheck.features.inc';

/**
 * Implements hook_field_extra_fields().
 */
function pw_kandidatencheck_field_extra_fields() {
  $extra['user']['user']['display']['candidate_match'] = [
    'label' => t('Candidate match'),
    'description' => t(''),
    'weight' => 100
  ];
  return $extra;
}

/**
 * Implements hook_node_load().
 */
function pw_kandidatencheck_node_load($nodes, $types) {
  if (in_array('pw_kc_position', $types)) {
    $map = function ($item) {
      $items = field_get_items('node', $item, 'field_pw_kc_thesis_reference');

      if ($items) {
        return $items[0]['target_id'];
      }
    };
    node_load_multiple(array_filter(array_map($map, $nodes)));
  }
}

/**
 * Implements hook_user_view().
 */
function pw_kandidatencheck_user_view($account, $view_mode, $langcode) {
  $extra = field_extra_fields_get_display('user', 'user', $view_mode);

  if (isset($extra['candidate_match']) && $extra['candidate_match']['visible'] && _pw_user_has_role($account, 'Politician')) {
    $result = pw_kandidatencheck_by_user_revision_query($account)->execute();

    if (!empty($result['node'])) {
      $nodes = node_load_multiple(array_keys($result['node']));
      $compare_thesis_number = function ($a, $b) {
        $thesis_number_a = pw_kandidatencheck_thesis($a)->field_kc_thesis_number[LANGUAGE_NONE][0]['value'];
        $thesis_number_b = pw_kandidatencheck_thesis($b)->field_kc_thesis_number[LANGUAGE_NONE][0]['value'];

        if ($thesis_number_a == $thesis_number_b) {
          return 0;
        }
        else {
          return $thesis_number_a < $thesis_number_b ? -1 : 1;
        }
      };
      uasort($nodes, $compare_thesis_number);
      $account->content['candidate_match'] = node_view_multiple($nodes, 'embedded');
      $account->content['candidate_match']['#weight'] = $extra['candidate_match']['weight'];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pw_kandidatencheck_form_user_profile_form_alter(&$form, &$form_state) {
  if (_pw_kandidatencheck_should_render_form_element($form['#user'])) {
    $image = theme('image', ['path' => drupal_get_path('module', 'pw_kandidatencheck') . '/kandidatencheck_teaser.png', 'attributes' => ['height' => 79, 'width' => 858]]);
    $form['candidate_match'] = [
      '#theme' => 'link',
      '#text' => $image,
      '#path' => 'https://kandidatencheck.abgeordnetenwatch.de/thesen/',
      '#options' => [
        'query' => ['id' => md5(variable_get('pw_salt') . $form['#user']->uuid)],
        'html' => TRUE,
        'attributes' => ['target' => '_blank'],
      ],
      '#weight' => -10,
    ];
  }
}

/**
 * Returns query for all Kandidatencheck answers of the given account version.
 *
 * @param object $account
 *   The user account (version).
 *
 * @return EntityFieldQuery
 *   The query object.
 */
function pw_kandidatencheck_by_user_revision_query($account) {
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $q->entityCondition('bundle', 'pw_kc_position');
  $q->propertyCondition('status', NODE_PUBLISHED);
  $q->fieldCondition('field_pw_kc_user_reference', 'target_id', $account->uid);
  $q->fieldCondition('field_parliament', 'tid', pw_profiles_parliament($account)->tid);

  return $q;
}

/**
 * Returns thesis node associated with the given node.
 *
 * @param object $node
 *   The node object.
 *
 * @return object
 *   The thesis node.
 */
function pw_kandidatencheck_thesis($node) {
  $thesis = NULL;
  $items = field_get_items('node', $node, 'field_pw_kc_thesis_reference');

  if ($items) {
    $thesis = node_load($items[0]['target_id']);
  }

  return $thesis;
}

/**
 * Returns TRUE if the form element should be rendered, FALSE otherwise.
 *
 * Checks whether the account has the role Candidate and the feature is
 * available for the associated parliament.
 *
 * @param type $account
 *   The account object.
 *
 * @return boolean
 *   TRUE if the form element should be rendered, FALSE otherwise.
 */
function _pw_kandidatencheck_should_render_form_element($account) {
  if (!_pw_user_has_role($account, 'Candidate')) {
    return FALSE;
  }

  $enabled_parliaments = variable_get('pw_kandidatencheck_enabled_parliament_tids', []);

  if (!in_array(pw_profiles_parliament($account)->tid, $enabled_parliaments)) {
    return FALSE;
  }

  return TRUE;
}
