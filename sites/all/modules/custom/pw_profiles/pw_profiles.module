<?php

/**
 * @file
 * Code for the Profiles feature.
 */

include_once 'pw_profiles.features.inc';

/**
 * Implements hook_menu().
 */
function pw_profiles_menu() {
  $items['profiles/%taxonomy_term/%'] = [
    'title callback' => 'pw_profiles_page_title',
    'title arguments' => [1, 2],
    'page callback' => 'pw_profiles_page',
    'page arguments' => [1, 2],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function pw_profiles_menu_alter(&$items) {
  $items['profile/%pw_profiles_username/archive/%'] = $items['user/%user/revisions/%/view'];
  $items['profile/%pw_profiles_username/archive/%']['access callback'] = 'user_view_access';
  $items['profile/%pw_profiles_username/archive/%']['access arguments'] = [1];
}

/**
 * Implements hook_form_alter().
 */
function pw_profiles_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    unset($form['locale']);
    unset($form['mimemail']);
    unset($form['overlay_control']);
    $form['#validate'][] = 'pw_profiles_form_validate';
    $form['account']['name']['#description'] = t('Only lowercase letters (a-z), numbers and dash are allowed.');

    // edit users UUID
    $role_admin = user_role_load_by_name('administrator');
    global $user;
    if ($role_admin && user_has_role($role_admin->rid, $user)) {
      $form['uuid'] = array(
        '#type' => 'textfield',
        '#title' => t('UUID'),
        '#default_value' => $form['#user']->uuid,
        '#required' => TRUE,
      );
    }

    // sort fields by parliament
    if(isset($form['field_user_parliament'][LANGUAGE_NONE]['#default_value'][0])){
      $parliament_tid = $form['field_user_parliament'][LANGUAGE_NONE]['#default_value'][0];
      foreach(array('field_user_constituency', 'field_user_list') as $field_name){
        if(isset($form[$field_name]['und']['#options'])){
          $form[$field_name]['und']['#options'] = _pw_sort_by_parliament($form[$field_name]['und']['#options'], $parliament_tid);
        }
      }
    }
  }
  elseif ($form_id == 'user_revision_edit_form') {
    unset($form['field_user_external_url']);
    unset($form['antispam_moderator']);
    unset($form['ckeditor']);
    unset($form['mimemail']);
    unset($form['overlay_control']);
    unset($form['xmlsitemap']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pw_profiles_form_pw_profiles_filters_form_alter(&$form, &$form_state) {
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

/**
 * Form validation handler for user_profile_form().
 *
 * @see pw_profiles_form_alter()
 */
function pw_profiles_form_validate($form, &$form_state) {
  if (isset($form_state['input']['name'])) {
    $username = $form_state['input']['name'];
    if (!preg_match('/^[a-z0-9\-]+$/', $username)) {
      form_set_error('name', $form['account']['name']['#description']);
    }
  }
  if (isset($form_state['input']['uuid'])) {
    $uuid = $form_state['input']['uuid'];
    if (!preg_match('/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/', $uuid)) {
      form_set_error('uuid', t('Please enter a valid UUID.'));
    }
    elseif ($user = entity_uuid_load('user', array($uuid))) {
      if($form['#user']->uid != key($user)){
        $user = array_pop($user);
        form_set_error('uuid', t('UUID already used by @name', ['@name' => l(_pw_get_fullname($user), 'user/' . $user->uid)]));
      }
    }
  }
}

/**
 * Implements hook_user_presave().
 *
 * FFI: Saves changes to the user role in the corresponding taxonomy.
 * This is important for the profile switch that relies on this taxonomy.
 */
function pw_profiles_user_presave(&$edit, $account, $category) {
  // fetch the chosen roles from $edit['roles']:
  $roleIdArray = [];

  // $edit['roles'] is unset if user_save() is called programmatically with
  // modifications that do not include the roles. In order to reset the roles
  // anyway, we load the roles from the $account:
  if (!isset($edit['roles'])) {
    foreach ($account->roles as $key => $value) {
      $edit['roles'][$key] = $key;
    }
  }
  foreach ($edit['roles'] as $key => $value) {
    if (!empty($value)) {
      $roleIdArray[] = $key;
    }
  }
  // reset the $edit['field_user_roles_for_view_mode_s']['und'] array:
  $edit['field_user_roles_for_view_mode_s']['und'] = [];

  foreach ($roleIdArray as $roleId) {
    $role = user_role_load($roleId);
    $roleName = $role->name; // i.e., Politician
    // search for this roleName in the taxonomy:
    $taxonomyArray = taxonomy_get_term_by_name($roleName, 'pw_profile_roles_for_view_mode_switch');
    foreach ($taxonomyArray as $taxonomy) {
      $tid = $taxonomy->tid;
      $edit['field_user_roles_for_view_mode_s']['und'][] = array('tid' => "$tid");
      break; // If there are several taxonomies with the same name that's a data error.
    }
  }
}

/**
 * Implements hook_user_load().
 */
function pw_profiles_user_load($users) {
  $vids = array_map(function ($account) { return $account->vid; }, $users);
  $q = db_select('user_archive_cache', 'uac')
    ->fields('uac', ['uid', 'number_of_questions', 'number_of_answers'])
    ->condition('vid', $vids, 'IN');

  foreach ($q->execute()->fetchAll() as $row) {
    $users[$row->uid]->number_of_questions = $row->number_of_questions;
    $users[$row->uid]->number_of_answers = $row->number_of_answers;
  }

}

/**
 *  Implements hook_user_update().
 */
function pw_profiles_user_update(&$edit, $account, $category) {

  // custom abort flag to prevent circular updates
  if(isset($account->abort_update) && $account->abort_update){
    return;
  }

  // check if username was changed and update path then
  if ($account->name != $account->original->name) {
    $path = path_load(array('source' => 'user/' . $account->uid));
    if ($path) {
      $path['alias'] = 'profile/' . $account->name;
      path_save($path);
    }
    $user_revisions = user_revision_list($account);
    foreach ($user_revisions as $user_revision) {
      if ($user_revision->name != $account->name) {
        $revision_edit = [];
        $revision_edit['name'] = $account->name;
        _user_revision_edit_save($user_revision, $revision_edit);
      }
    }
  }

  // trigger user archive cron
  if (function_exists('pw_userarchives_cron') && $account->uid) {

    // reset to actual profile only if profile was not updated by a form (eg feeds importer or cron)
    $reset_actual_profile = !isset($_REQUEST['form_id']);
    pw_userarchives_cron($account->uid, $reset_actual_profile);
  }
}

/**
 * Implements hook_user_view().
 */
function pw_profiles_user_view($account, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    $options = _pw_profiles_revision_switcher_options($account);

    if (!empty($options)) {
      $account->content['revisions'] = [
        '#theme' => 'select',
        '#options' => $options,
        '#value' => url(current_path()),
      ];
    }

    $account->content['#attached']['js'][drupal_get_path('module', 'pw_profiles') . '/twitter-widgets.js'] = [
      'type' => 'file',
    ];
  }

  if (in_array(menu_get_item()['page_callback'], ['user_view_page', 'user_revision_show'])) {
    $parliament_tid = pw_profiles_parliament($account)->tid;
    if (in_array(PW_GLOBALS_DEPUTY_RID, array_keys($account->roles))) {
      menu_tree_set_path('main-menu', "profiles/$parliament_tid/deputies");
    }
    else if (in_array(PW_GLOBALS_CANDIDATE_RID, array_keys($account->roles))) {
      menu_tree_set_path('main-menu', "profiles/$parliament_tid/candidates");
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function pw_profiles_entity_info_alter(&$entity_info) {
  $entity_info['user']['view modes']['full'] = array(
    'label' => t('Full'),
    'custom settings' => FALSE,
  );
  $entity_info['user']['view modes']['list_item'] = array(
    'label' => t('List item'),
    'custom settings' => FALSE,
  );
  $entity_info['user']['view modes']['tile'] = array(
    'label' => t('Tile'),
    'custom settings' => FALSE,
  );
  $entity_info['user']['uri callback'] = 'pw_profiles_user_uri';
}

/**
 * Entity URI callback; returns path to current or archived profile.
 *
 * @param object $user
 *   The user object
 *
 * @return array
 *   The path to a representation of the user revision
 */
function pw_profiles_user_uri($user) {
  if (isset($user->actual_profile) && $user->actual_profile == 0) {
    $path = 'profile/' . $user->name . '/archive/' . $user->vid;
  }
  else {
    $path = 'user/' . $user->uid;
  }
  return array(
    'path' => $path,
  );
}

/**
 * Page callback: Displays a list of profiles.
 *
 * Selects user revisions based on parliament and role.
 *
 * @param string $parliament_term
 *   The parliament term.
 *
 * @param string $role_name
 *   The role.
 *
 * @return array
 *   The render array.
 */
function pw_profiles_page($parliament_term, $role_name) {
  $limit = 12;

  $q = search_api_query('politician_archive_index');
  $q->condition('field_user_retired', NULL, '=');
  $q->condition('field_user_parliament', $parliament_term->tid);

  if ($role_name == 'deputies') {
    $q->condition('field_user_roles_for_view_mode_s', PW_GLOBALS_DEPUTY_TID);
  }
  else {
    $q->condition('field_user_roles_for_view_mode_s', PW_GLOBALS_CANDIDATE_TID);
  }

  if (isset(drupal_get_query_parameters()['constituency'])) {
    $q->condition('field_user_constituency', drupal_get_query_parameters()['constituency']);
  }

  if (isset(drupal_get_query_parameters()['list'])) {
    $q->condition('field_user_list', drupal_get_query_parameters()['list']);
  }

  if (isset(drupal_get_query_parameters()['list_position'])) {
    $q->condition('field_user_list_position', drupal_get_query_parameters()['list_position']);
  }

  if (isset(drupal_get_query_parameters()['party'])) {
    $f = new SearchApiQueryFilter('OR');
    foreach (drupal_get_query_parameters()['party'] as $party) {
      $f->condition('field_user_party', $party);
    }
    $q->filter($f);
  }

  if (isset(drupal_get_query_parameters()['gender'])) {
    $f = new SearchApiQueryFilter('OR');
    foreach (drupal_get_query_parameters()['gender'] as $gender) {
      $f->condition('field_user_gender', $gender);
    }
    $q->filter($f);
  }

  if (isset(drupal_get_query_parameters()['keys'])) {
    $q->keys(drupal_get_query_parameters()['keys']);
  }

  $response = $q
    ->sort('field_has_picture', 'DESC')
    ->sort('field_user_qanda_ratio', 'DESC')
    ->sort('field_user_lname')
    ->sort('search_api_relevance')
    ->range(pager_find_page() * $limit, $limit)
    ->execute();

  if ($response['result count'] > 0) {
    pager_default_initialize($response['result count'], $limit);
    $politicians = pw_userarchives_politician_load_multiple(array_keys($response['results']));
    $weight = 0;
    foreach ($politicians as $vid => $politician) {
      $build['user'][$vid] = user_view($politician, 'tile');
      $build['user'][$vid]['#weight'] = ++$weight;
    }
    $build['user']['pager'] = [
      '#theme' => 'pager',
      '#weight' => ++$weight,
    ];
  }
  else {
    $build['user'] = [
      '#markup' => t('Sorry, there are no results matching your query.'),
    ];
  }

  $build['user']['#theme_wrappers'] = ['container__tiles'];
  $build['filters'] = drupal_get_form('pw_profiles_filters_form', $parliament_term, $role_name);
  $build['filters']['#weight'] = -5;

  return $build;
}

/**
 * Title callback; returns title for profile lists.
 *
 * @param string $parliament
 *   The parliament name
 *
 * @param string $role_name
 *   The role
 *
 * @return string
 *   The title of the page
 */
function pw_profiles_page_title($parliament, $role_name) {

  $role = $role_name == 'candidates' ? 'Kandidierende' : 'Abgeordnete';

  if (stripos($parliament->name, 'Bundestag') > -1) {
    $text = $role_name == 'candidates' ? '@role für den @parliament' : '@role aus dem @parliament';
  }
  elseif (stripos($parliament->name, 'Saarland') > -1) {
    $text = '@role für das @parliament';
  }
  elseif (substr($parliament->name, 0, 2) == "EU") {
    $text = '@role für die @parliament';
  }
  else {
    $text = '@role für @parliament';
  }

  return format_string($text, array('@role' => $role, '@parliament' => $parliament->name));
}

/**
 * Returns parliament term associated with the given account.
 *
 * Politician accounts are always associated with a parliament, whether they
 * are deputies or candidates.
 *
 * @param object $account
 *   The account object.
 *
 * @return object
 *   The parliament term.
 */
function pw_profiles_parliament($account) {
  $parliament_term = NULL;
  $items = field_get_items('user', $account, 'field_user_parliament');

  if ($items) {
    $parliament_term = taxonomy_term_load($items[0]['tid']);
  }

  return $parliament_term;
}

/**
 * Load all archived revisions of the given account.
 *
 * @param object $account
 *   The account object.
 *
 * @param string $direction
 *   The order direction (ascending by default).
 *
 * @return array
 *   An array of user (revision) objects.
 */
function pw_profiles_archived_revisions($account, $direction = 'ASC') {
  $revisions = [];

  $result = db_select('user_archive_cache', 'uac')
    ->fields('uac', ['vid'])
    ->condition('uid', $account->uid)
    ->orderBy('vid', $direction)
    ->execute();

  foreach ($result->fetchCol() as $vid) {
    $revisions[] = user_revision_load($account->uid, $vid);
  }

  return $revisions;
}

/**
 * Returns a query for fetching uids and vids.
 *
 * @param array $filters
 *   The filters to apply to the query
 *
 * @return SelectQueryInterface
 *   The query object
 */
function pw_profiles_user_revision_query($filters = []) {
  $query = db_select('user_revision', 'ur');
  $query->join('user_archive_cache', 'uac', 'uac.vid = ur.vid');
  $query->fields('ur')->fields('uac');
  _pw_uac_add_conditions($query, $filters);

  if (!empty($filters['party'])) {
    $query->join('field_revision_field_user_party', 'fup', 'fup.revision_id = ur.vid');
    $query->condition('fup.field_user_party_tid', $filters['party'], 'IN');
  }

  if (!empty($filters['region'])) {
    $query->join('field_revision_field_user_constituency', 'fuc', 'fuc.revision_id = ur.vid');
    $query->join('field_data_field_electoral_region', 'fer', 'fuc.field_user_constituency_tid = fer.entity_id');
    $query->join('field_revision_field_user_list', 'ful', 'ful.revision_id = ur.vid');
    $query->join('field_data_field_electoral_region', 'fer2', 'ful.field_user_list_tid = fer2.entity_id');
    $query->condition(db_or()
      ->condition('fer.field_electoral_region_tid', $filters['region'])
      ->condition('fer2.field_electoral_region_tid', $filters['region']));
  }

  if (!empty($filters['constituency'])) {
    if (empty($filters['region'])) {
      $query->join('field_revision_field_user_constituency', 'fuc', 'fuc.revision_id = ur.vid');
    }
    $query->condition('fuc.field_user_constituency_tid', $filters['constituency']);
  }

  if (!empty($filters['list'])) {
    if (empty($filters['region'])) {
      $query->join('field_revision_field_user_list', 'ful', 'ful.revision_id = ur.vid');
    }
    $query->condition('ful.field_user_list_tid', $filters['list']);
  }

  if (!empty($filters['list_position'])) {
    $query->join('field_revision_field_user_list_position', 'fulp', 'fulp.revision_id = ur.vid');
    $query->condition('fulp.field_user_list_position_tid', $filters['list_position']);
  }

  if (!empty($filters['last_name'])) {
    $query->join('field_revision_field_user_lname', 'fuln', 'fuln.revision_id = ur.vid');
    $query->condition('fuln.field_user_lname_value', $filters['last_name'] . '%', 'LIKE');
  }

  if (!empty($filters['age'])) {
    $query->join('field_revision_field_user_age', 'fua', 'fua.revision_id = ur.vid');
    $query->condition('fua.field_user_age_value', $filters['age'], '>=');
  }

  if (!empty($filters['gender'])) {
    $query->join('field_revision_field_user_gender', 'fug', 'fug.revision_id = ur.vid');
    $query->condition('fug.field_user_gender_value', $filters['gender']);
  }

  return $query;
}

/**
 * Form constructor for the profile filters form.
 */
function pw_profiles_filters_form($form, &$form_state, $parliament, $role_name) {

  $filters = [
    'roles' => $role_name == 'candidates' ? 'candidate' : 'deputy',
    'parliament' => $parliament->name,
    'date' => date('Y-m-d'),
  ];

  $query = pw_profiles_user_revision_query($filters);
  $query->leftJoin('field_revision_field_user_constituency', 'fuc', 'fuc.revision_id = ur.vid');
  $query->addField('fuc', 'field_user_constituency_tid');
  $query->leftJoin('field_revision_field_user_party', 'fup', 'fup.revision_id = ur.vid');
  $query->addField('fup', 'field_user_party_tid');
  $query->leftJoin('field_revision_field_user_list', 'ful', 'ful.revision_id = ur.vid');
  $query->addField('ful', 'field_user_list_tid');
  $query->leftJoin('field_revision_field_user_list_position', 'fulp', 'fulp.revision_id = ur.vid');
  $query->addField('fulp', 'field_user_list_position_tid');
  $query->leftJoin('field_revision_field_user_lname', 'fuln', 'fuln.revision_id = ur.vid');
  $query->addField('fuln', 'field_user_lname_value');
  $query->leftJoin('field_revision_field_user_gender', 'fug', 'fug.revision_id = ur.vid');
  $query->addField('fug', 'field_user_gender_value');

  $constituency_values = [];
  $party_values = [];
  $list_values = [];
  $list_position_values = [];
  $gender_options = [];

  foreach ($query->execute() as $row) {
    if (isset($row->field_user_constituency_tid)) {
      $constituency_values[] = $row->field_user_constituency_tid;
    }
    if (isset($row->field_user_list_tid)) {
      $list_values[] = $row->field_user_list_tid;
    }
    if (isset($row->field_user_list_position_tid)) {
      $list_position_values[] = $row->field_user_list_position_tid;
    }
    if (isset($row->field_user_party_tid)) {
      $party_values[] = $row->field_user_party_tid;
    }
    if (isset($row->field_user_gender_value)) {
      $gender_options[$row->field_user_gender_value] = t($row->field_user_gender_value);
    }
  }

  $parameters = drupal_get_query_parameters();

  $form['#method'] = 'get';
  $form['#theme'] = 'filterbar';
  $form['keys'] = [
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#default_value' => isset($parameters['keys']) ? $parameters['keys'] : '',
  ];
  if (!empty($constituency_values)) {
    $form['constituency'] = array(
      '#type' => 'select',
      '#title' => isset($parliament->field_parliament_constit_rename[LANGUAGE_NONE][0]['value']) ? $parliament->field_parliament_constit_rename[LANGUAGE_NONE][0]['value'] : t('Constituency'),
      '#title_display' => 'invisible',
      '#options' => ['' => t('All')] + _pw_profiles_options($constituency_values),
      '#default_value' => empty($parameters['constituency']) ? '' : $parameters['constituency'],
    );
  }
  if (!empty($list_values) && !pw_profiles_filter_disabled('field_user_list_tid', $parliament)) {
    $form['list'] = array(
      '#type' => 'radios',
      '#title' => isset($parliament->field_parliament_list_rename[LANGUAGE_NONE][0]['value']) ? $parliament->field_parliament_list_rename[LANGUAGE_NONE][0]['value'] : t('List'),
      '#title_display' => 'invisible',
      '#options' => ['' => t('All')] + _pw_profiles_options($list_values),
      '#default_value' => empty($parameters['list']) ? '' : $parameters['list'],
    );
  }
  if (!empty($list_position_values) && !pw_profiles_filter_disabled('field_user_list_position_tid', $parliament)) {
    $form['list_position'] = array(
      '#type' => 'select',
      '#title' => t('List position'),
      '#title_display' => 'invisible',
      '#options' => ['' => t('All')] + _pw_profiles_options($list_position_values),
      '#default_value' => empty($parameters['list_position']) ? '' : $parameters['list_position'],
    );
  }
  $form['party'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Filter by party'),
    '#title_display' => 'invisible',
    '#options' => ['' => t('All')] + _pw_profiles_options($party_values),
    '#multiple' => TRUE,
    '#default_value' => empty($parameters['party']) ? [] : $parameters['party'],
  );
  $form['age'] = array(
    '#type' => 'textfield',
    '#attributes' => ['type' => 'number'],
    '#title' => t('Age'),
    '#title_display' => 'invisible',
    '#default_value' => empty($parameters['age']) ? [] : $parameters['age'],
  );
  $form['gender'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Gender'),
    '#title_display' => 'invisible',
    '#options' => $gender_options,
    '#default_value' => empty($parameters['gender']) ? [] : $parameters['gender'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter profiles'),
  );

  return $form;
}

/**
 * Returns TRUE if the filter is disabled for the parliament, FALSE otherwise.
 *
 * @param string $filter
 *
 * @param object $parliament
 *
 * @return bool
 */
function pw_profiles_filter_disabled($filter, $parliament) {
  $items = field_get_items('taxonomy_term', $parliament, 'field_parliament_filter_disabled');

  if (is_array($items)) {
    foreach ($items as $item) {
      if ($item['value'] == $filter) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Returns the account object identified by the given name.
 *
 * @param string $name
 *   The username.
 *
 * @return object
 *   An account object with the given name.
 */
function pw_profiles_username_load($name) {
  return user_load_by_name($name);
}

/**
 * Returns taxonomy term options for the given term IDs.
 *
 * @param array $values
 *   An array of taxonomy term IDs
 *
 * @return array
 *   An array of taxonomy term names keyed by term ID.
 */
function _pw_profiles_options(array $values) {
  static $terms = [];

  if (empty($terms)) {
    $terms = db_select('taxonomy_term_data', 't')
      ->fields('t', array('tid', 'name'))
      ->condition('vid', array(17, 19, 32, 38, 39), 'IN')
      ->execute()
      ->fetchAllKeyed();
    natsort($terms);
  }

  return array_intersect_key($terms, array_flip($values));
}

/**
 * Returns an associative array to be used as options for a select box.
 *
 * @param object $account
 *   The account object.
 *
 * @return array
 *   An array with URLs as keys and labels for the legislative terms as values.
 */
function _pw_profiles_revision_switcher_options($account) {
  $options = [];

  foreach (pw_profiles_archived_revisions($account, 'DESC') as $revision) {
    if (in_array(PW_GLOBALS_DEPUTY_RID, array_keys($revision->roles))) {
      $text = pw_profiles_parliament($revision)->name;
    }
    else {
      $text = preg_replace('/\-\d+\s*$/', '', pw_profiles_parliament($revision)->name) . ' (Wahlen)';
    }
    $options[url(entity_uri('user', $revision)['path'])] = $text;
  }
  return $options;
}
