<?php
/**
 * @file
 * Code for the Profiles feature.
 */

include_once 'pw_profiles.features.inc';

/**
 * Configure view mode teaser for user.
 */
function pw_profiles_update_7105() {
  $text_fields = array(
    'field_user_title' => 'text_plain',
    'field_user_fname' => 'text_plain',
    'field_user_lname' => 'text_plain',
    'field_user_constituency' => 'taxonomy_term_reference_plain',
    'field_user_party' => 'taxonomy_term_reference_plain',
    'field_user_questions_get' => 'number_integer',
    'field_user_answers_give' => 'number_integer',
  );

  foreach ($text_fields as $field_name => $type) {
    $instance = field_info_instance('user', $field_name, 'user');
    $instance['display']['teaser']['label'] = 'hidden';
    $instance['display']['teaser']['type'] = $type;
    field_update_instance($instance);
  }

  $field_user_picture = field_info_instance('user', 'field_user_picture', 'user');
  $field_user_picture['display']['teaser']['label'] = 'hidden';
  $field_user_picture['display']['teaser']['type'] = 'image';
  $field_user_picture['display']['teaser']['settings']['image_style'] = 'pw_portrait_l__normal';
  $field_user_picture['display']['teaser']['settings']['image_link'] = 'content';
  field_update_instance($field_user_picture);
}

/**
 * Enlarges field output_name field in table user_filter_cache to 255 characters:
 */
function pw_profiles_update_7104() {
  db_change_field('user_filter_cache', 'output_name', 'output_name', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));
}

/**
 * Add index to the table to optimize select queries from pw_forms_filter_alter:
 */
function pw_profiles_update_7103() {
  db_add_index('user_filter_cache', 'pw_forms_filter_alter_ix', array(
    'input_output_type',
    'input_role_name',
    'input_parliament_name'
  ));
}

/**
 * (Un-)Installs the needed cache table for user filters
 * @return array
 */
function pw_profiles_schema() {
  $schema['user_filter_cache'] = array(
    'fields' =>
      array(
        'output_tid' =>
          array(
            'type' => 'int',
            'unsigned' => TRUE,
            'not null' => TRUE,
            'default' => 0,
          ),
        'output_name' =>
          array(
            'type' => 'varchar',
            'length' => 45,
            'not null' => TRUE,
            'default' => '',
          ),
        'input_output_type' =>
          array(
            'type' => 'varchar',
            'length' => 45,
            'not null' => TRUE,
            'default' => '',
          ),
        'input_role_name' =>
          array(
            'type' => 'varchar',
            'length' => 45,
            'not null' => TRUE,
            'default' => '',
          ),
        'input_parliament_name' =>
          array(
            'type' => 'varchar',
            'length' => 45,
            'not null' => TRUE,
            'default' => '',
          ),
      ),
    'indexes' =>
      array(),
    'unique_keys' =>
      array(
        'uniqueness' =>
          array(
            0 => 'output_tid',
            1 => 'output_name',
            2 => 'input_output_type',
            3 => 'input_role_name',
            4 => 'input_parliament_name',
          ),
      ),
    'module' => 'pw_profiles',
    'name' => 'user_filter_cache',
  );
  return $schema;
}

function pw_profiles_menu() {
  $items = array();

  $items['profiles/new/%taxonomy_term/%'] = array(
    'title callback' => 'pw_profiles_new_title',
    'title arguments' => array(2, 3),
    'page callback' => 'pw_profiles_new',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function pw_profiles_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "user_profile_form") {
    unset($form["locale"]);
    $view = views_get_view('calendar');
    $view->set_display('block_2');
    $form['views_embedder'] = array(
      '#value' => views_embed_view('calendar', $display_id = 'block_2'),
      '#weight' => 0,
    );
    $form['#validate'][] = 'my_user_register_validate';
    $form['account']['name']['#description'] = t('Only lowercase letters (a-z), numbers and dash are allowed.');

    // sort fields by parliament
    if(isset($form['field_user_parliament'][LANGUAGE_NONE]['#default_value'][0])){
      $parliament_tid = $form['field_user_parliament'][LANGUAGE_NONE]['#default_value'][0];
      foreach(array('field_user_constituency', 'field_user_list') as $field_name){
        if(isset($form[$field_name]['und']['#options'])){
          $form[$field_name]['und']['#options'] = _pw_sort_by_parliament($form[$field_name]['und']['#options'], $parliament_tid);
        }
      }
    }
  }
  elseif ($form_id == "user_revision_edit_form") {
    unset($form["field_user_external_url"]);
    unset($form["antispam_moderator"]);
    unset($form["ckeditor"]);
    unset($form["mimemail"]);
    unset($form["overlay_control"]);
    unset($form["xmlsitemap"]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pw_profiles_form_pw_profiles_filters_form_alter(&$form, &$form_state) {
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}

function my_user_register_validate($form, &$form_state) {
  if (isset($form_state['input']['name'])) {
    $username = $form_state['input']['name'];
    if (!preg_match('/^[a-z0-9\-]+$/', $username)) {
      form_set_error('name', t($form['account']['name']['#description']));
    }
  }
}

/**
 * FFI: Saves changes to the user role in the corresponding taxonomy.
 * This is important for the profile switch that relies on this taxonomy.
 */
function pw_profiles_user_presave(&$edit, $account, $category) {
  // fetch the chosen roles from $edit['roles']:
  $roleIdArray = array();

  // $edit['roles'] is unset if user_save() is called programmatically with
  // modifications that do not include the roles. In order to reset the roles
  // anyway, we load the roles from the $account:
  if (!isset($edit['roles'])) {
    foreach ($account->roles as $key => $value) {
      $edit['roles'][$key] = $key;
    }
  }
  foreach ($edit['roles'] as $key => $value) {
    if (!empty($value)) {
      $roleIdArray[] = $key;
    }
  }
  // reset the $edit['field_user_roles_for_view_mode_s']['und'] array:
  $edit['field_user_roles_for_view_mode_s']['und'] = array();

  foreach ($roleIdArray as $roleId) {
    $role = user_role_load($roleId);
    $roleName = $role->name; // i.e., Politician
    // search for this roleName in the taxonomy:
    $taxonomyArray = taxonomy_get_term_by_name($roleName, 'pw_profile_roles_for_view_mode_switch');
    foreach ($taxonomyArray as $taxonomy) {
      $tid = $taxonomy->tid;
      $edit['field_user_roles_for_view_mode_s']['und'][] = array('tid' => "$tid");
      break; // If there are several taxonomies with the same name that's a data error.
    }
  }
}

/**
 * Implements hook_views_query_alter().
 * reduces views result to one user (politician) instead of many caused by user revisions
 */
function pw_profiles_views_query_alter(&$view, &$query) {

  if ($view->name == 'profile_list_rev') {

    // combine filter on electoral regions by list AND constituency
    if(sizeof($query->where[2]['conditions']) > 0 && strpos($query->where[2]['conditions'][0]['field'], 'taxonomy_term_data_field_revision_field_user_constituency__field_data_field_electoral_region2') > -1) {
      $query->add_where(2, 'taxonomy_term_data_field_revision_field_user_list.tid', $query->where[2]['conditions'][0]['value'], '=');
    }

    // query for all vids of this parliament / role and reduce result to MAX(vid) per uid
    $parliament = _pw_get_current_parliament_term();
    $user_role = arg(2) == 'candidates'?'candidate':'deputy';
    $subquery = db_select('user_archive_cache', 'uac');
    _pw_uac_add_conditions($subquery, array(
        'parliament' => $parliament->name,
        'roles' => $user_role,
        'date' => date('Y-m-d'),
      )
    );
    $subquery->addField('uac', 'vid');
    $result_vids = $subquery->execute()->fetchCol();

    // add vids as condition to views query
    $query->add_where(0, 'user_revision.vid', $result_vids);

    // add the group by on the user id field to prevent duplicates caused by user revisions
    /*
    $query->add_field('users', 'uid', 'users_uid', array('function' => 'groupby'));
    $query->add_groupby('users_uid');
    */

    // set custom title for overview page
    if($view->name == 'profile_list_rev' && $view->current_display == 'grid'){
      $role_name = $user_role == 'candidate'?'Kandidierende':'Abgeordnete';
      if(stripos($parliament->name, 'Bundestag') > -1){
        $text = $user_role == 'candidate'?'@role f端r den @parliament':'@role aus dem @parliament';
      }
      elseif(stripos($parliament->name, 'Saarland') > -1){
        $text = '@role f端r das @parliament';
      }
      elseif(substr($parliament->name, 0, 2) == "EU"){
        $text = '@role f端r die @parliament';
      }
      else{
        $text = '@role f端r @parliament';
      }
      $view->build_info['title'] = format_string($text, array('@role' => $role_name, '@parliament' => $parliament->name));
    }

  }
}

/**
 *  Implements hook_views_pre_render().
 *  Overwrites label of constituency in basic infos view in specific cases like "Stimmkreis" for Bremen.
 */
function pw_profiles_views_pre_render(&$view) {
  if ($view->name == 'pw_user_profile_fields_rev' && $view->current_display == 'basic_info') {
    $parliament = _pw_get_current_parliament_term();
    if (!empty($parliament)) {
      $field_rename_value = field_get_items('taxonomy_term', $parliament, 'field_parliament_constit_rename');
      if (!empty($field_rename_value)) {
        if(isset($view->field['field_user_constituency-revision_id'])){
          $view->field['field_user_constituency-revision_id']->options['label'] = $field_rename_value[0]['value'];
        }
      }
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter().
 * Trys to find string "[field_user_fname]" in question and answers view in profiles.
 * If found don't render the fields user_questions_and_answers and question_and_answers_filter .
 */
function pw_profiles_ds_pre_render_alter(&$layout_render_array, $context) {
  if (isset($layout_render_array['left_2'])) {
    foreach ($layout_render_array['left_2'] as $index => $render_array) {
      if ($render_array['#field_name'] == 'user_questions_and_answers' && strpos($render_array['#items'][0]['value'], '[field_user_fname]')) {
        unset($layout_render_array['left_2'][$index]);
        if (isset($layout_render_array['right_2'])) {
          foreach ($layout_render_array['right_2'] as $index => $render_array) {
            if ($render_array['#field_name'] == 'question_and_answers_filter') {
              unset($layout_render_array['right_2'][$index]);
              break;
            }
          }
          break;
        }
      }
    }
  }
}

/**
 *  Implements hook_user_update().
 */
function pw_profiles_user_update(&$edit, $account, $category) {

  // custom abort flag to prevent circular updates
  if(isset($account->abort_update) && $account->abort_update){
    return;
  }

  // check if username was changed and update path then
  if ($account->name != $account->original->name) {
    $path = path_load(array('source' => 'user/' . $account->uid));
    if ($path) {
      $path['alias'] = 'profile/' . $account->name;
      path_save($path);
    }
    $user_revisions = user_revision_list($account);
    foreach ($user_revisions as $user_revision) {
      if ($user_revision->name != $account->name) {
        $revision_edit = array();
        $revision_edit['name'] = $account->name;
        _user_revision_edit_save($user_revision, $revision_edit);
      }
    }
  }

  // trigger user archive cron
  if (function_exists('pw_userarchives_cron') && $account->uid) {
    pw_userarchives_cron($account->uid);
  }
}

/**
 * Implements hook_block_info().
 */
function pw_profiles_block_info() {
  $blocks = array();

  $blocks['filters'] = array(
    'info' => t('Profile filters'),
    'cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pw_profiles_block_view($delta) {
  switch ($delta) {
    case 'filters':
      return pw_profiles_filters_block();
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function pw_profiles_entity_info_alter(&$entity_info) {
  $entity_info['user']['view modes']['teaser'] = array(
    'label' => t('Teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Page callback; displays a list of profiles.
 *
 * Selects user revisions based on parliament and role.
 *
 * @param object $parliament
 * @param string $role_name
 */
function pw_profiles_new($parliament, $role_name) {
  $filters = array(
    'roles' => $role_name,
    'parliament' => $parliament->name,
    'date' => date('Y-m-d'),
  ) + drupal_get_query_parameters();

  $build = entity_view('user', pw_profiles_user_load_multiple($filters, 30), 'teaser');
  $build['user']['#theme_wrappers'] = array('container');
  $build['user']['#attributes']['class'] = array('profile-list', 'clearfix');
  $build['pager'] = array('#theme' => 'pager', '#weight' => 5);

  return $build;
}

/**
 * Title callback; returns title for profile lists.
 */
function pw_profiles_new_title($parliament, $role_name) {
  $role = $role_name == 'candidate' ? 'Kandidierende' : 'Abgeordnete';

  if(stripos($parliament->name, 'Bundestag') > -1) {
    $text = $role_name == 'candidate' ? '@role f端r den @parliament' : '@role aus dem @parliament';
  }
  elseif(stripos($parliament->name, 'Saarland') > -1) {
    $text = '@role f端r das @parliament';
  }
  elseif(substr($parliament->name, 0, 2) == "EU") {
    $text = '@role f端r die @parliament';
  }
  else{
    $text = '@role f端r @parliament';
  }

  return format_string($text, array('@role' => $role, '@parliament' => $parliament->name));
}

/**
 * Returns user versions matching the given filters.
 *
 * @param array $filters
 *
 * @param int $limit
 *
 * @return array
 */
function pw_profiles_user_load_multiple($filters = array(), $limit = NULL) {
  $users = array();

  $query = pw_profiles_user_revision_query($filters);
  if (empty($filters['last_name'])) {
    $query->join('field_revision_field_user_lname', 'fuln', 'fuln.revision_id = ur.vid');
  }
  $query->leftJoin('field_revision_field_user_picture', 'fupic', 'fupic.revision_id = ur.vid');
  $query->addExpression('CASE WHEN fupic.field_user_picture_fid IS NOT NULL THEN 1 ELSE 0 END', 'picture_uploaded');
  $query
    ->orderBy('uac.number_of_answers', 'DESC')
    ->orderBy('uac.number_of_questions', 'DESC')
    ->orderBy('picture_uploaded', 'DESC')
    ->orderBy('fuln.field_user_lname_value')
    ->extend('PagerDefault')
    ->limit($limit);

  foreach ($query->execute()->fetchAll() as $row) {
    $users[$row->uid] = $row;
  }

  field_attach_load_revision('user', $users);

  return $users;
}

/**
 * Returns a query for fetching uids and vids.
 *
 * @param array $filters
 *   The filters to apply to the query
 *
 * @return SelectQueryInterface
 *   The query object
 */
function pw_profiles_user_revision_query($filters = array()) {
  $query = db_select('user_revision', 'ur')->fields('ur');
  $query->join('user_archive_cache', 'uac', 'uac.vid = ur.vid');
  _pw_uac_add_conditions($query, $filters);

  if (!empty($filters['party'])) {
    $query->join('field_revision_field_user_party', 'fup', 'fup.revision_id = ur.vid');
    $query->condition('fup.field_user_party_tid', $filters['party'], 'IN');
  }

  if (!empty($filters['region'])) {
    $query->join('field_revision_field_user_constituency', 'fuc', 'fuc.revision_id = ur.vid');
    $query->join('field_data_field_electoral_region', 'fer', 'fuc.field_user_constituency_tid = fer.entity_id');
    $query->join('field_revision_field_user_list', 'ful', 'ful.revision_id = ur.vid');
    $query->join('field_data_field_electoral_region', 'fer2', 'ful.field_user_list_tid = fer2.entity_id');
    $query->condition(db_or()
      ->condition('fer.field_electoral_region_tid', $filters['region'])
      ->condition('fer2.field_electoral_region_tid', $filters['region']));
  }

  if (!empty($filters['constituency'])) {
    if (empty($filters['region'])) {
      $query->join('field_revision_field_user_constituency', 'fuc', 'fuc.revision_id = ur.vid');
    }
    $query->condition('fuc.field_user_constituency_tid', $filters['constituency']);
  }

  if (!empty($filters['list'])) {
    if (empty($filters['region'])) {
      $query->join('field_revision_field_user_list', 'ful', 'ful.revision_id = ur.vid');
    }
    $query->condition('ful.field_user_list_tid', $filters['list']);
  }

  if (!empty($filters['list_position'])) {
    $query->join('field_revision_field_user_list_position', 'fulp', 'fulp.revision_id = ur.vid');
    $query->condition('fulp.field_user_list_position_tid', $filters['list_position']);
  }

  if (!empty($filters['last_name'])) {
    $query->join('field_revision_field_user_last_name', 'fuln', 'fuln.revision_id = ur.vid');
    $query->condition('fuln.field_user_last_name_value', $filters['fuln'] . '%', 'LIKE');
  }

  if (!empty($filters['gender'])) {
    $query->join('field_revision_field_user_gender', 'fug', 'fug.revision_id = ur.vid');
    $query->condition('fug.field_user_gender_value', $filters['fug']);
  }

  return $query;
}

/**
 * Renders a block displaying filters for refining the search.
 *
 * @return array
 *   The render array
 */
function pw_profiles_filters_block() {
  $block = array();

  $block['subject'] = t('Filter list');
  $block['content']['form'] = drupal_get_form('pw_profiles_filters_form');

  return $block;
}

/**
 * Form constructor for the profile filters form.
 */
function pw_profiles_filters_form($form, &$form_state) {
  if (menu_get_item()['page_callback'] == 'pw_profiles_new') {
    $filters = array(
      'roles' => menu_get_item()['map'][3],
      'parliament' => menu_get_item()['map'][2]->name,
      'date' => date('Y-m-d'),
    );
  }

  $query = pw_profiles_user_revision_query($filters);
  $query->join('field_revision_field_user_constituency', 'fuc', 'fuc.revision_id = ur.vid');
  $query->addField('fuc', 'field_user_constituency_tid');
  $query->join('field_revision_field_user_party', 'fup', 'fup.revision_id = ur.vid');
  $query->addField('fup', 'field_user_party_tid');
  $query->join('field_revision_field_user_list', 'ful', 'ful.revision_id = ur.vid');
  $query->addField('ful', 'field_user_list_tid');
  $query->join('field_revision_field_user_list_position', 'fulp', 'fulp.revision_id = ur.vid');
  $query->addField('fulp', 'field_user_list_position_tid');
  $query->join('field_revision_field_user_lname', 'fuln', 'fuln.revision_id = ur.vid');
  $query->addField('fuln', 'field_user_lname_value');
  $query->join('field_revision_field_user_gender', 'fug', 'fug.revision_id = ur.vid');
  $query->addField('fug', 'field_user_gender_value');
  $query->join('field_data_field_electoral_region', 'fer', 'fuc.field_user_constituency_tid = fer.entity_id');
  $query->addField('fer', 'field_electoral_region_tid');

  foreach ($query->execute()->fetchAll() as $row) {
    $region_values[] = $row->field_electoral_region_tid;
    $constituency_values[] = $row->field_user_constituency_tid;
    $party_values[] = $row->field_user_party_tid;
    $list_values[] = $row->field_user_list_tid;
    $list_position_values[] = $row->field_user_list_position_tid;
    $last_name_initial = drupal_substr($row->field_user_lname_value, 0, 1);
    $last_name_options[$last_name_initial] = $last_name_initial;
    $gender_options[$row->field_user_gender_value] = $row->field_user_gender_value;
  }

  $parameters = drupal_get_query_parameters();

  ksort($last_name_options);

  $form['#method'] = 'get';
  $form['last_name'] = array(
    '#type' => 'radios',
    '#title' => t('Filter by name'),
    '#name' => 'last_name',
    '#options' => $last_name_options,
    '#multiple' => FALSE,
    '#default_value' => isset($parameters['region']) ? $parameters['region'] : '',
  );
  $form['region'] = array(
    '#type' => 'select',
    '#title' => t('Filter by region'),
    '#name' => 'region',
    '#options' => _pw_profiles_options($region_values),
    '#multiple' => FALSE,
    '#default_value' => isset($parameters['region']) ? $parameters['region'] : '',
  );
  $form['constituency'] = array(
    '#type' => 'select',
    '#title' => t('Constituency'),
    '#name' => 'constituency',
    '#options' => _pw_profiles_options($constituency_values),
    '#default_value' => empty($parameters['constituency']) ? '' : $parameters['constituency'],
  );
  $form['list'] = array(
    '#type' => 'select',
    '#title' => t('List'),
    '#name' => 'list',
    '#options' => _pw_profiles_options($list_values),
    '#default_value' => empty($parameters['list']) ? '' : $parameters['list'],
  );
  $form['list_position'] = array(
    '#type' => 'select',
    '#title' => t('List position'),
    '#name' => 'list_position',
    '#options' => _pw_profiles_options($list_position_values),
    '#default_value' => empty($parameters['list_position']) ? '' : $parameters['list_position'],
  );
  $form['party'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Party'),
    '#name' => 'party',
    '#options' => _pw_profiles_options($party_values),
    '#default_value' => empty($parameters['party']) ? array() : $parameters['party'],
  );
  $form['gender'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Gender'),
    '#name' => 'gender',
    '#options' => $gender_options,
    '#default_value' => empty($parameters['gender']) ? array() : $parameters['gender'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter profiles'),
  );

  return $form;
}

function _pw_profiles_options($values) {
  static $terms = array();

  if (empty($terms)) {
    $terms = db_select('taxonomy_term_data', 't')
      ->fields('t', array('tid', 'name'))
      ->condition('vid', array(17, 19, 32, 38, 39), 'IN')
      ->execute()
      ->fetchAllKeyed();
    natsort($terms);
  }

  return array('' => t('All')) + array_intersect_key($terms, array_flip($values));
}
