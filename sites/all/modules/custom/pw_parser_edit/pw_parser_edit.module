<?php

/**
 * @file
 * Provides form for editing individual user account fields.
 */

/**
 * Implements hook_menu()
 */
function pw_parser_edit_menu() {

  $items = array();
  $items['user/%user/edit/sidejobs/%'] = array(
    'title callback' => 'user_page_title',
    'title arguments' => array(1),
    'access callback' => array('user_edit_access'),
    'access arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_parser_edit_sidejobs_form', 1, 4),
  );
  $items['user/%user/edit/%/%'] = array(
    'title callback' => 'user_page_title',
    'title arguments' => array(1),
    'access callback' => array('user_edit_access'),
    'access arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_parser_edit_field_form', 1, 3, 4),
  );

  return $items;
}



/**
 * Form constructor for the user sidejobs edit form.
 */
function pw_parser_edit_sidejobs_form($form, &$form_state, $account, $parliament_name) {
  global $user;

  $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => 'sidejob', 'language' => LANGUAGE_NONE);

  if (!isset($form_state['node'])) {
    if (!isset($node->title)) {
      $node->title = NULL;
    }
    node_object_prepare($node);
    $form_state['node'] = $node;
  }
  else {
    $node = $form_state['node'];
  }

  $form['#attached'] = array(
    'css' => array(drupal_get_path('module', 'pw_parser_edit') . '/pw_parser_edit.css'),
  );
  $form['#parents'] = array();
  // @todo D8: Remove. Modules should access the node using $form_state['node'].
  $form['#node'] = $node;

  // If no language is provided use the default site language.
  $options['language'] = field_valid_language(entity_language('node', $node));

  $form['new'] = array(
    '#prefix' => '<div class="sidejobs-new">',
    '#suffix' => '</div>'
  );
  $form['new'] += (array) _field_invoke_default('form', 'node', $node, $form, $form_state, $options);
  $form['new']['field_politician'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $account->name;

  $form['list'] = array(
    '#prefix' => '<div class="sidejobs-list">',
    '#suffix' => '</div>'
  );

  foreach (pw_sidejobs_load($account) as $sidejob) {
    $elements = node_view($sidejob, 'tabular');
    $form['list']['#weight'] = 100;
    $form['list'][$sidejob->nid] = array('#type' => 'container');
    $form['list'][$sidejob->nid]['node'] = array(
      '#markup' => drupal_render($elements),
    );
    $form['list'][$sidejob->nid]['actions'] = array('#type' => 'actions');
    $form['list'][$sidejob->nid]['actions']['delete'] = array(
      '#markup' => l(t('Delete'), 'node/' . $sidejob->nid . '/delete')
    );
    $form['list'][$sidejob->nid]['actions']['replace'] = array(
      '#type' => 'submit',
      '#name' => 'replace-' . $sidejob->nid,
      '#submit' => array('pw_parser_edit_sidejobs_replace'),
      '#value' => t('Replace'),
    );
  }

  return $form;
}

/**
 * Form constructor for the user field edit form.
 */
function pw_parser_edit_field_form($form, &$form_state, $account, $field_name, $parliament_name) {
  // Include user.pages.inc for user profile form handlers.
  module_load_include('inc', 'user', 'user.pages');

  // Ensure access to update this particular field is granted.
  $field = field_info_field($field_name);
  if (!field_access('edit', $field, 'user', $account)) {
    return MENU_ACCESS_DENIED;
  }

  if (!isset($form_state['user'])) {
    $form_state['user'] = $account;
  }
  else {
    $account = $form_state['user'];
  }

  $form['#parents'] = array();
  // @todo Legacy support. Modules are encouraged to access the entity using
  //   $form_state. Remove in Drupal 8.
  $form['#user'] = $account;
  $form['#user_category'] = 'account';
  $form['#validate'][] = 'user_profile_form_validate';
  $form['#submit'][] = 'user_profile_form_submit';
  $form['#submit'][] = 'pw_parser_edit_field_form_submit';
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  if (isset(drupal_get_query_parameters()['value'])) {
    $new_values = drupal_get_query_parameters()['value'];
  }

  $options = array(
    'language' => field_valid_language(entity_language('user', $account)),
    'field_name' => $field_name,
  );
  $form += (array) _field_invoke_default('form', 'user', $account, $form, $form_state, $options);

  for ($i = 0; $i < count($new_values); $i++) {
    $language = $form[$field_name]['#language'];

    if ($form[$field_name][$language][$i]['#type'] == 'text_format') {
      $widget = &$form[$field_name][$language][$i];
    }
    elseif (isset($form[$field_name][$language][$i]['value'])) {
      $widget = &$form[$field_name][$language][$i]['value'];
    }

    $widget['#default_value'] = $new_values[$i];
    $widget['#description'] = $account->{$field_name}[$language][$i]['value'];
  }

  return $form;
}

/**
 * Form submission handler for pw_parser_edit_field_form().
 *
 * @see pw_parser_edit_field_form()
 */
function pw_parser_edit_field_form_submit($form, &$form_state) {
  $form_state['redirect'] = entity_uri('user', $form_state['user']);
}
