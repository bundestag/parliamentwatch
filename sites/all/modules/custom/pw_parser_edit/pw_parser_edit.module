<?php

/**
 * @file
 * API for editing fields directly.
 */

/**
 * Implements hook_menu()
 */

function pw_parser_edit_menu() {

  $items = array();
  $items['admin/field/edit/%/%/%/%'] = array(
    'access arguments' => array(TRUE),
    'access callback' => TRUE,
    'page callback' => 'pw_parser_edit_field_edit_page',
    'page arguments' => array(3, 4, 5, 6),
    );

  return $items;
}

/**
 * Page callback to edit an entity field.
 */
function pw_parser_edit_field_edit_page($entity_type, $entity_uuid, $field_name, $parliament_name){

  // Ensure the entity type is valid:
  if (empty($entity_type)) {
    return MENU_NOT_FOUND;
  }

  $entity_info = entity_get_info($entity_type);
  if (!$entity_info) {
    return MENU_NOT_FOUND;
  }

  // get entity id by entity uuid
  $entity_ids = entity_get_id_by_uuid($entity_type, array($entity_uuid));
  if (empty($entity_ids)) {
    return MENU_NOT_FOUND;
  }
  $entity_id = reset($entity_ids);

  // load revision id
  $query = db_select('user_archive_cache', 'uac');
  $query->fields('uac', array('uid', 'vid'));
  _pw_uac_add_conditions($query, array(
    'parliament' => $parliament_name,
    'roles' => 'deputy',
    'date' => date('Y-m-d'),
    'uid' => $entity_id,
    )
  );
  $result = $query->execute()->fetchAll();
  if(empty($result)){
    return MENU_NOT_FOUND;
  }

  $entity_revision_id = reset($result)->vid;
  //$entity_revision_id = 101901;
  //$entity_id = reset($result)->uid;
  if (!$entity_revision_id) {
    return MENU_NOT_FOUND;
  }

  //$entity = entity_revision_load($entity_type, $entity_revision_id);
  $entity = user_revision_load($entity_id, $entity_revision_id);
  if (!$entity) {
    return MENU_NOT_FOUND;
  }

  if (!isset($langcode)) {
    $langcode = entity_language($entity_type, $entity);
  }

  // Ensure access to update the entity is granted.
  if (!entity_access('update', $entity_type, $entity)) {
    return MENU_ACCESS_DENIED;
  }

  // Ensure access to actually update this particular field is granted.
  $field = field_info_field($field_name);
  if (!field_access('edit', $field, $entity_type, $entity)) {
    return MENU_ACCESS_DENIED;
  }

  list( , , $bundle) = entity_extract_ids($entity_type, $entity);
  $field_instance = field_info_instance($entity_type, $field_name, $bundle);

  if (empty($field_instance)) {
    return MENU_NOT_FOUND;
  }
  $subform_id = 'pw_parser_edit_field_edit_form';
  $form_state = array(
    'entity_type' => $entity_type,
    'entity' => $entity,
    'field_name' => $field_name,
    'langcode' => $langcode,
    'no_redirect' => TRUE,
    'redirect' => $_GET['q'],
    'field_instance' => $field_instance,
    'bundle' => $bundle,
    'subform_id' => $subform_id,
    );
  $output = drupal_build_form('pw_parser_edit_edit_form', $form_state);

  if (!empty($form_state['executed'])) {
    //entity_save($entity_type, $form_state['entity']);
    form_state_values_clean($form_state);
    _user_revision_edit_save($form_state['entity'], $form_state['values']);
    drupal_goto($form_state['redirect']);
  }
  return $output;
}

/**
 * Field editing form.
 */
function pw_parser_edit_edit_form($form, &$form_state) {
  $form_state['subform_id']($form, $form_state);
  $form['#parents'] = array();

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    );


  // Ensure this actually gets on there.
  //$form['#submit'][] = 'pw_parser_edit_field_edit_form_submit';
  return $form;
}

/**
 * Subform to edit a field instance.
 *
 * This isn't a true form. As such it modifies the $form by reference.
 */
function pw_parser_edit_field_edit_form(&$form, &$form_state) {
  $form['#parents'] = array();

  $entity_type = $form_state['entity_type'];
  $entity = $form_state['entity'];
  $field_name = $form_state['field_name'];
  $field_instance = $form_state['field_instance'];
  $langcode = $form_state['langcode'];
  $bundle = $form_state['bundle'];

  ctools_include('fields');
  // If no language is provided use the default site language.
  $options = array(
    'language' => field_valid_language($langcode),
    'default' => TRUE,
    );

  $form += (array) ctools_field_invoke_field($field_instance, 'form', $entity_type, $entity, $form, $form_state, $options);
  $field_value = $form[$field_name]['und'][0]['value']['#default_value'];
  $form[$field_name]['und'][0]['value']['#default_value'] = 'TEST123';
  $form[$field_name.'_current_value'] = array(
    '#markup' => 'current value: '.$field_value,
    );
  $form['#pre_render'][] = '_field_extra_fields_pre_render';
  $form['#entity_type'] = $entity_type;
  $form['#bundle'] = $bundle;
  $form['#user_revision'] = $entity;

  // Let other modules make changes to the form.
  // Exclude some modules.
  $excluded_modules = array(
    'field_group',
    'metatag',
    'panelizer',
    'redirect',
    );
  // Avoid module_invoke_all() to let parameters be taken by reference.
  foreach (module_implements('field_attach_form') as $module) {
    if (in_array($module, $excluded_modules)) {
      continue;
    }
    $function = $module . '_field_attach_form';
    $function($entity_type, $entity, $form, $form_state, $langcode);
  }

  //$form['#submit'][] = 'pw_parser_edit_field_edit_form_submit';
}


/**
 * Submit field editing form
 */
function pw_parser_edit_field_edit_form_submit($form, &$form_state) {
  $entity_type = $form_state['entity_type'];
  $entity = $form_state['entity'];
  $field_name = $form_state['field_name'];
  $field_instance = $form_state['field_instance'];
  $langcode = $form_state['langcode'];
  // TODO
  return;

  // Extract field values from submitted values.
  ctools_field_invoke_field_default($field_instance, 'extract_form_values', $entity_type, $entity, $form, $form_state);

  ctools_field_invoke_field_default($field_instance, 'submit', $entity_type, $entity, $form, $form_state);

  // Let other modules act on submitting the entity.
  // Avoid module_invoke_all() to let $form_state be taken by reference.
  foreach (module_implements('field_attach_submit') as $module) {
    $function = $module . '_field_attach_submit';
    $function($entity_type, $entity, $form, $form_state);
  }
}
