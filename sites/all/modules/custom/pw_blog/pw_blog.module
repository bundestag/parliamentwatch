<?php
/**
 * @file
 * Code for the PW Blog feature.
 */

include_once 'pw_blog.features.inc';

/**
 * Implements hook_menu().
 */
function pw_blog_menu() {
  $items = [];
  $items['blog'] = [
    'title' => 'Blog',
    'page callback' => 'pw_blog_page',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_blockreference_blocks_pre_alter().
 */
function pw_blog_blockreference_blocks_pre_alter(&$blocks, $context) {
  if ($context['entity']->type == 'blogpost') {
    $allowed_block_ids = array('webform:client-block-104846');
    foreach ($blocks as $id => $block) {
      if (!in_array($id, $allowed_block_ids)) {
        unset($blocks[$id]);
      }
    }
  }
}

/**
 * Page callback: Displays a listing of blog posts.
 */
function pw_blog_page() {
  $build = [];

  $result = pw_blog_base_query()
    ->propertyOrderBy('created', 'DESC')
    ->pager()
    ->execute();

  if (!empty($result['node'])) {
    $build = node_view_multiple(node_load_multiple(array_keys($result['node'])), 'tile');
    $build['nodes']['#theme_wrappers'] = ['container__tiles'];
    $build['pager'] = [
      '#theme' => 'pager',
      '#weight' => 5,
    ];
  }

  return $build;
}

/**
 * Returns a query for fetching published nodes of type blogpost.
 *
 * @return EntityFieldQuery
 *   The query object.
 */
function pw_blog_base_query() {
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $q->entityCondition('bundle', 'blogpost');
  $q->propertyCondition('status', NODE_PUBLISHED);

  return $q;
}
