<?php

/**
 * @file
 * Update functions for the pw_globals module.
 */

/**
 * Disable obsolete modules.
 */
function pw_globals_update_7001() {
  $uninstall = [
    'colorbox',
    'content_menu',
    'drulenium',
    'ds',
    'feedback_simple',
    'menu_attributes',
    'omega_tools',
    'pw_menu',
    'pw_subsite_configuration',
    'quicktabs',
    'scroll_to_top',
    'sharethis',
    'tb_megamenu',
  ];

  module_disable($uninstall);
  drupal_uninstall_modules($uninstall);
}

/**
 * Configure main menu blocks.
 */
function pw_globals_update_7002() {
  $block_1 = [
    'theme' => 'parliamentwatch',
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 0,
    'region' => 'header_top',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
  ];
  $config_1 = [
    'admin_title' => '',
    'depth' => 1,
    'depth_relative' => 0,
    'expanded' => 0,
    'follow' => 0,
    'level' => 1,
    'parent' => 'main-menu:0',
    'sort' => FALSE,
    'title_link' => FALSE,
  ];
  _pw_globals_add_menu_block($block_1, $config_1);
  $block_2 = [
    'theme' => 'parliamentwatch',
    'status' => BLOCK_CUSTOM_ENABLED,
    'weight' => 1,
    'region' => 'header_bottom',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
    'cache' => DRUPAL_NO_CACHE,
    'title' => '<none>',
  ];
  $config_2 = [
    'admin_title' => '',
    'depth' => 1,
    'depth_relative' => 0,
    'expanded' => 0,
    'follow' => 0,
    'level' => 2,
    'parent' => 'main-menu:0',
    'sort' => 0,
    'title_link' => 0,
  ];
  _pw_globals_add_menu_block($block_2, $config_2);
}

/**
 * Set variable parliamentwatch_state_parliament_tids.
 */
function pw_globals_update_7003() {
  variable_set('parliamentwatch_state_parliament_tids', [
    21316,
    16285,
    23273,
    17180,
    18064,
    18030,
    16284,
    23275,
    16282,
    23615,
    21393,
    16278,
    17178,
    16266,
    23616,
    17179,
  ]);
}

/**
 * Add links to main menu.
 */
function pw_globals_update_7004() {
  menu_delete_links('main-menu');

  $state_parliament_terms = taxonomy_term_load_multiple(variable_get('parliamentwatch_state_parliament_tids', []));
  $weight = 0;

  _pw_globals_menu_parliament_tree_add('bundestag', 'Bundestag', $weight++);
  foreach ($state_parliament_terms as $term) {
    _pw_globals_menu_parliament_tree_add(drupal_lookup_path('alias', "taxonomy/term/$term->tid"), $term->name, $weight++);
  }
  _pw_globals_menu_parliament_tree_add('eu', 'EU', $weight++);
  _pw_globals_menu_link_add('blog', 'Blog', $weight++);
  _pw_globals_menu_link_add('ueber-uns', 'Info', $weight++);
}

/**
 * Delete obsolete redirects.
 */
function pw_globals_update_7005() {
  redirect_delete(32872);
}

/**
 * Switch admin theme to Seven.
 */
function pw_globals_update_7006() {
  theme_enable(['seven']);
  theme_disable(['pw_seven']);
  variable_set('admin_theme', 'seven');
}

/**
 * Delete obsolete menus.
 */
function pw_globals_update_7007() {
  menu_delete(menu_load('devel'));
  menu_delete(menu_load('features'));
  menu_delete(menu_load('menu-main-menu-de'));
  menu_delete(menu_load('menu-meta-de'));
  menu_delete(menu_load('menu-support-us-de'));
  menu_delete(menu_load('menu-about-us-de'));
  menu_delete(menu_load('menu-elections-de'));
}

/**
 * Delete obsolete fields.
 */
function pw_globals_update_7008() {
  field_delete_field('field_user_questions_get');
  field_delete_field('field_user_answers_give');
  field_delete_field('field_share_sum');
  field_delete_field('drulenium_num_command_errors');
  field_delete_field('drulenium_num_command_failures');
  field_delete_field('drulenium_num_command_passes');
  field_delete_field('drulenium_num_test_failures');
  field_delete_field('drulenium_num_test_passes');
  field_delete_field('drulenium_num_test_total');
  field_delete_field('drulenium_result');
  field_delete_field('drulenium_revision');
  field_delete_field('drulenium_suite');
  field_delete_field('drulenium_total_time');
  field_delete_field('drulenium_version');
}

/**
 * Delete obsolete custom blocks.
 */
function pw_globals_update_7009() {
  _pw_globals_delete_block(73);
}

/**
 * Adds a new menu block.
 */
function _pw_globals_add_menu_block($block, $config) {
  $block_ids = variable_get('menu_block_ids', array());
  $delta = empty($block_ids) ? 1 : max($block_ids) + 1;
  $block_ids[] = $delta;
  variable_set('menu_block_ids', $block_ids);
  $block['delta'] = $config['delta'] = $delta;
  $block['module'] = 'menu_block';
  menu_block_block_save($delta, $config);
  _pw_globals_add_block($block);
}

/**
 * Adds a block.
 *
 * @param array $block
 *   The block configuration
 */
function _pw_globals_add_block($block) {
  db_insert('block')
    ->fields(array(
      'module',
      'delta',
      'theme',
      'status',
      'weight',
      'region',
      'visibility',
      'pages',
      'cache',
      'title',
    ))
    ->values($block)
    ->execute();
  if (array_key_exists('roles', $block)) {
    db_delete('block_role')
      ->condition('module', $block['module'])
      ->condition('delta', $block['delta'])
      ->execute();
    $query = db_insert('block_role')->fields(array('module', 'delta', 'rid'));
    foreach ($block['roles'] as $rid) {
      $query->values(array(
        $block['module'],
        $block['delta'],
        $rid,
      ));
      $query->execute();
    }
  }
  if (array_key_exists('node_types', $block)) {
    db_delete('block_node_type')
      ->condition('module', $block['module'])
      ->condition('delta', $block['delta'])
      ->execute();
    $query = db_insert('block_node_type')->fields(array('module', 'delta', 'type'));
    foreach ($block['node_types'] as $type) {
      $query->values(array(
        $block['module'],
        $block['delta'],
        $type,
      ));
      $query->execute();
    }
  }
}

/**
 * Updates a block.
 *
 * @param array $block
 *   An array representing a block record
 * @param string $module
 *   A module
 * @param string $delta
 *   A block delta
 * @param string $theme
 *   A theme
 */
function _pw_globals_update_block($block, $module, $delta, $theme = NULL) {
  $query = db_update('block')
    ->fields($block)
    ->condition('module', $module)
    ->condition('delta', $delta);

  if (isset($theme)) {
    $query->condition('theme', $theme);
  }

  $query->execute();
}

/**
 * Deletes a block.
 *
 * @param int $bid
 *   The block ID.
 */
function _pw_globals_delete_block($bid) {
  db_delete('block_custom')
    ->condition('bid', $bid)
    ->execute();
  db_delete('block')
    ->condition('module', 'block')
    ->condition('delta', $bid)
    ->execute();
  db_delete('block_role')
    ->condition('module', 'block')
    ->condition('delta', $bid)
    ->execute();
}

/**
 * Adds a link to the main menu.
 *
 * @param string $path
 *   The link path.
 * @param string $title
 *   The link title.
 * @param int $weight
 *   The weight.
 * @param int $plid
 *   The (optional) parent item ID.
 *
 * @return int
 *   The mlid of the saved menu link, or FALSE if the menu link could not be
 *   saved.
 */
function _pw_globals_menu_link_add($path, $title, $weight, $plid = 0) {
  $item = [
    'link_path' => drupal_lookup_path('source', $path) ?: $path,
    'link_title' => $title,
    'menu_name' => 'main-menu',
    'weight' => $weight,
    'expanded' => TRUE,
    'plid' => $plid,
  ];
  return menu_link_save($item);
}

/**
 * Adds parliament menu link and its tree to the main menu.
 *
 * @param string $path
 *   The link path.
 * @param string $title
 *   The link title.
 * @param int $weight
 *   The weight.
 *
 * @return int
 *   The mlid of the saved menu link, or FALSE if the menu link could not be
 *   saved.
 */
function _pw_globals_menu_parliament_tree_add($path, $title, $weight) {
  $sub_items = [
    'Abgeordnete' => 'profile',
    'Abstimmungen' => 'abstimmungen',
    'AusschÃ¼sse' => 'ausschuesse',
    'Petitionen' => 'petitionen',
    'Wahlrecht' => 'wahlrecht',
  ];

  $plid = _pw_globals_menu_link_add($path, $title, $weight);

  foreach ($sub_items as $key => $value) {
    _pw_globals_menu_link_add("$path/$value", $key, $weight++, $plid);
  }

  return $plid;
}
