<?php

/**
 * @file
 * Includes main hooks.
 */

// -- hooks

function pw_userarchives_cron() {
    $query = check_user_archives_database();    

    // Delete the archive entries for the chosen users first:
    $res = $query->execute();
    while ($row = $res->fetchAssoc()) {
      db_delete('user_archive_cache')
        ->condition('uid', $row["uid"])
        ->execute();
    }
    
    // Insert new archive entries:
    $dbconnection = db_insert('user_archive_cache');
    $dbconnection->from($query)->execute(); // INSERT INTO ... FROM SELECT ...
    
    // Calculate number of questions and answers and insert them into:
    // (1) the revision table (for showing them in the profile view)
    // (2) the userarchive table (for showing them in the sidebar)
    // 
    // Question query:
    //SELECT 
    //COUNT(nid) AS count
    //FROM node AS n 
    //INNER JOIN field_data_field_dialogue_recipient AS r ON r.entity_type = 'node' AND r.entity_id = n.nid 
    //INNER JOIN field_data_field_dialogue_message_type AS f ON f.entity_type = 'node' AND f.entity_id = n.nid 
    //JOIN field_revision_field_pw_parmliament p ON p.entity_id=n.nid
    //JOIN taxonomy_term_data rn ON rn.tid=p.field_pw_parmliament_tid
    //WHERE r.field_dialogue_recipient_target_id = 25050 AND n.status = 1 AND rn.name='Hamburg 2008-2011'
    //GROUP BY f.field_dialogue_message_type_value
    $res1 = $query->execute();
    while ($row = $res1->fetchAssoc()) {      
      $questionQuery = db_select('node', 'n');
      $questionQuery->addExpression('COUNT(n.nid)', 'count');
      $questionQuery->join('field_data_field_dialogue_recipient', 'r', 'r.entity_type = \'node\' AND r.entity_id = n.nid');
      $questionQuery->join('field_data_field_dialogue_message_type', 'f', 'f.entity_type = \'node\' AND f.entity_id = n.nid');
      $questionQuery->join('field_revision_field_pw_parmliament', 'p', 'p.entity_id=n.nid');
      $questionQuery->join('taxonomy_term_data', 'rn', 'rn.tid=p.field_pw_parmliament_tid');
      $questionQuery->condition('r.field_dialogue_recipient_target_id', $row['uid']);
      $questionQuery->condition('n.status', 1);
      $questionQuery->condition('rn.name', $row['parliament_name']);
      $questionQuery->groupBy('f.field_dialogue_message_type_value');
      $questionRes = $questionQuery->execute();
      while ($questionRow = $questionRes->fetchAssoc()) {
        db_update('user_archive_cache')
                ->fields(array('number_of_questions' => $questionRow['count']))
                ->condition('uid', $row['uid'])
                ->condition('vid', $row['vid'])
                ->execute();
        db_update('field_revision_field_user_questions_get')
                ->fields(array('field_user_questions_get_value' => $questionRow['count']))
                ->condition('entity_id', $row['uid'])
                ->condition('revision_id', $row['vid'])
                ->execute();
//        return 'uid: '.$row['uid'].' vid: '.$row['vid'].' count: '.$questionRow['count'];
      }
      
      $answerQuery = db_select('comment', 'c');
      $answerQuery->addExpression('COUNT(c.cid)', 'count');
      $answerQuery->join('field_data_field_dialogue_message_type', 'f', 'f.entity_type = \'comment\' AND f.entity_id = c.cid');
      $answerQuery->join('node', 'n', 'n.nid=c.nid');
      $answerQuery->join('field_revision_field_pw_parmliament', 'p', 'p.entity_id=n.nid');
      $answerQuery->join('taxonomy_term_data', 'rn', 'rn.tid=p.field_pw_parmliament_tid');
      $answerQuery->condition('c.uid', $row['uid']);
      $answerQuery->condition('c.status', 1);
      $answerQuery->condition('rn.name', $row['parliament_name']);
      $answerQuery->groupBy('f.field_dialogue_message_type_value');
      $answerRes = $answerQuery->execute();
      while ($answerRow = $answerRes->fetchAssoc()) {
        db_update('user_archive_cache')
                ->fields(array('number_of_answers' => $answerRow['count']))
                ->condition('uid', $row['uid'])
                ->condition('vid', $row['vid'])
                ->execute();
        db_update('field_revision_field_user_answers_give')
                ->fields(array('field_user_answers_give_value' => $answerRow['count']))
                ->condition('entity_id', $row['uid'])
                ->condition('revision_id', $row['vid'])
                ->execute();
//        return 'uid: '.$row['uid'].' vid: '.$row['vid'].' count: '.$questionRow['count'];
      }
      
    }
    
    
    // 
    //SELECT COUNT(cid) AS count 
    //FROM comment AS c 
    //INNER JOIN field_data_field_dialogue_message_type AS f ON f.entity_type = 'comment' AND f.entity_id = c.cid 
    //JOIN node n ON n.nid=c.nid
    //JOIN field_revision_field_pw_parmliament p ON p.entity_id=n.nid
    //JOIN taxonomy_term_data rn ON rn.tid=p.field_pw_parmliament_tid
    //WHERE c.uid = 25050 AND c.status = 1 AND rn.name='Hamburg 2008-2011'
    //GROUP BY f.field_dialogue_message_type_value
    

    return "Done";
}

// -- functions

/**
 * Creates schema for user archive if necessary, selects and returns users and 
 * their revisions that have changed in the last 24 hours.
 * @return type
 */
function check_user_archives_database() {
    
    $a_day_ago = time() - (24 * 60 * 60);
    
    $query = db_select('user_revision', 'ur');
    $query->addField('ur', 'uid');
    $query->addField('ur', 'name', 'user_name');
    $query->addField('ur', 'vid');
    $query->addField('td', 'name', 'parliament_name');
    $query->addField('ur', 'timestamp');
    $query->addExpression('LOWER(rn.name)', 'user_role');
    $query->join('field_revision_field_user_parliament', 'up', 'ur.uid = up.entity_id AND ur.vid = up.revision_id');
    $query->join('taxonomy_term_data', 'td', 'td.tid=up.field_user_parliament_tid');
    $query->join('field_revision_field_user_roles_for_view_mode_s', 'ro', 'ro.entity_id=ur.uid AND ro.revision_id=ur.vid');
    $query->join('taxonomy_term_data', 'rn', 'rn.tid=ro.field_user_roles_for_view_mode_s_tid');
//    $query->condition('ur.status', '1');
//    $query->condition('ur.uid', 24905); // only for testing
    $query->condition('ur.timestamp', $a_day_ago, '>');
    $query->condition('rn.name', array('Deputy', 'Candidate'), 'IN');
    $query->groupBy('ur.uid, up.field_user_parliament_tid');
    $query->orderBy('ur.timestamp');
    
    return $query;
}

/**
 * Implementation of hook_menu() for testing the cron functionality.
 */
function pw_userarchives_menu() {
  $items['admin/config/pw_userarchives/settings'] = array(
      'title' => 'PW Userarchives Cron',
      'description' => 'Run daily cron manually.',
      'page callback' => 'pw_userarchives_cron',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}