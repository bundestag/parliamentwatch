<?php
/**
 * @file
 * Code for the pw poll feature.
 */
define('FILE_DEFAULT_ALLOWED_EXTENSIONS', 'png');
include_once 'pw_poll.features.inc';

/**
 *Implementation of hool_insert
 */
  
function pw_poll_node_insert($node){
	if($node->type == 'pw_poll'){
    db_query("UPDATE field_data_field_pw_views_reference SET field_pw_views_reference_vargs =:tid WHERE entity_id =:nid",array(':tid'=>$node->field_pw_parmliament['und'][0]['tid'],':nid'=>$node->nid));
		$node = _pw_poll_prepare_poll_data($node);
	}
}

/**
 *Implementation of hool_update
 */

function pw_poll_node_update($node){
	if($node->type == 'pw_poll'){
		db_query("UPDATE field_data_field_pw_views_reference SET field_pw_views_reference_vargs =:tid WHERE entity_id =:nid",array(':tid'=>$node->field_pw_parmliament['und'][0]['tid'],':nid'=>$node->nid));
    $node = _pw_poll_prepare_poll_data($node);
	}
}

/**
 *Helper function to prepare polls for node
 *
 */

function _pw_poll_prepare_poll_data($node){
  db_query("DELETE FROM {votingapi_vote} WHERE entity_id=:nid",array(":nid"=>$node->nid));
  $widgets = rate_get_active_widgets('node',$node->type);
  foreach($widgets as $widget){
    $options = array();
    foreach($widget->options as $option){
      $options[$option[0]] = $option[1];
    }
  }
  $widgets = rate_get_active_widgets('node',$node->type);
  if($node->field_pw_csv_upload['und'][0]['fid']){
    $file = file_load($node->field_pw_csv_upload['und'][0]['fid']);
    $csv = file_create_url($file->uri);
    $arrResult = array();
    $handle = fopen($file->uri, "r");
    if( $handle ) {
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $user = user_load_by_name($data[0]);
        if($user){
          $option = array_search($data[1], $options);
          $vote = array();
          $vote['entity_id'] = $node->nid;
          $vote['uid'] = $user->uid;
          $vote['value'] = $option;
          $vote['tag'] = $widgets[1]->tag;
          $vote['value_type'] = $widgets[1]->value_type;
          $votes[] = $vote;
        }
      }
      //echo "<pre>".print_r($votes,1)."</pre>";

      fclose($handle);
    }

  }else if($raw = $node->field_pw_raw_csv_data['und'][0]['value']){
    $data_row = explode("\n", $raw);
    foreach($data_row as $key => $row){
      $data = explode(",",$row);
      $user = user_load_by_name($data[0]);
      if($user){
        $option = array_search(rtrim($data[1]), $options);
        $vote = array();
        $vote['entity_id'] = $node->nid;
        $vote['uid'] = $user->uid;
        $vote['value'] = $option;
        $vote['tag'] = $widgets[1]->tag;
        $vote['value_type'] = $widgets[1]->value_type;
        $votes[] = $vote;
      }

    }
    //echo "<pre>".print_r($votes,1)."</pre>";
  }
  $results = votingapi_set_votes($votes);
  if(count($results)){
    //Get Overview Chart from Google Chart API and save to node object
    $overview_chart = pw_blocks_get_chart($node->nid, 'total', TRUE);
    $overview_url = chart_url($overview_chart['overview']);
    $overview_tmp_image = file_get_contents('http:'.$overview_url);
    $overview_file = file_save_data($overview_tmp_image, NULL, 'public://'.$node->nid.'_overview.png', FILE_EXISTS_RENAME);
    $overview_file->title = t('Overview');
    
    $node->field_pw_overview_chart[LANGUAGE_NONE]['0'] = (array)$overview_file;


    $party_charts = pw_blocks_get_chart($node->nid, 'party', TRUE);
    $i = 0;
    foreach($party_charts as $party => $data){
      
      $party_url = chart_url($data);
      $party_tmp_image = file_get_contents('http:'.$party_url); 
      $party_img_name_cleanup = array(' ','/');
      $party_file = file_save_data($party_tmp_image, NULL,  'public://'.$node->nid.'_'.str_replace(' ','_',$party).'.png', FILE_EXISTS_REPLACE);
      $party_file->title = $party;
      $node->field_pw_party_chart[LANGUAGE_NONE][$i] = (array)$party_file;
      $i++;
    }
  }
  //$node = node_save($node);
  return $node;
}
