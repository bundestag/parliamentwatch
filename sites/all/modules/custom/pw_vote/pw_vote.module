<?php
/**
 * @file
 * Code for the PW Vote feature.
 */

include_once 'pw_vote.features.inc';


/**
 *  Implements hook_block_info().
 *
 *  create a block that displays voting behaviors.
 */

function pw_vote_block_info() {

  $blocks['voting_behavior'] = array(

    // info: The name of the block.
    'info' => t('Displays voting behavior'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 *  Implements hook_block_view().
 *
 */

function pw_vote_block_view($delta = '') {

  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'voting_behavior':
      $parliament = _pw_get_current_parliament_term();
      if ($parliament) {
        $block['subject'] = t('Voting behaviour');
        $block['content'] = pw_vote_voting_behavior();
      }
      break;
  }
  return $block;
}

function pw_vote_voting_behavior() {

  $parliament = _pw_get_current_parliament_term();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'vote')
    ->fieldCondition('field_parliament', $parliament->tid)
    ->propertyCondition('status', NODE_PUBLISHED);

  $result = $query->execute();
  if (isset($result['node'])) {
    $vote_nids = array_keys($result['node']);
    $vote_nodes = entity_load('node', $vote_nids);
  }

  $content_voting_behavior = array(
    '#markup' => theme('voting_behavior', array('numvotes' => sizeof($vote_nodes))),
  );

  $content = $content_voting_behavior;

  return $content;
}

function pw_vote_theme() {
  return array(
    'voting_behavior' => array(
      'variables' => array('numvotes' => NULL),
      'template' => 'voting-behavior',
    ),
  );
}