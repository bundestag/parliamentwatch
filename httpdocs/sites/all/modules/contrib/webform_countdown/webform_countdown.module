<?php

/**
 * @file
 * Webform countdown code module.
 */

/**
 *  Define component and its basic capabilities.
 */
function webform_countdown_webform_component_info() {
  $components = array();
  $components['countdown'] = array(
    'label' => t('Countdown'),
    'description' => t('Create a textarea with a dynamic character count that updates as users type.'),
    'features' => array(
      'csv' => TRUE,
      'email' => TRUE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => TRUE,
      'title_display' => TRUE,
      'title_inline' => TRUE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
  );
  return $components;
}

/**
 * Implements _webform_defaults_component().
 */
function _webform_defaults_countdown() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'value' => '',
    'required' => 0,
    'extra' => array(
      'type' => 'char',
      'max' => '140',
      'message' => 'characters remaining',
      'cols' => '',
      'rows' => '',
      'title_display' => 0,
      'resizable' => 1,
      'disabled' => 0,
      'description' => '',
      'description_above' => FALSE,
      'placeholder' => '',
      'attributes' => array(),
      'private' => FALSE,
      'analysis' => FALSE,
    ),
  );
}

/**
 * Implements _webform_theme_component().
 */
function _webform_theme_countdown() {
  return array(
    'webform_display_countdown' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements _webform_edit_component().
 */
function _webform_edit_countdown($component) {
  $form = array();
  $form['value'] = array(
    '#type' => 'textarea',
    '#title' => t('Default value'),
    '#default_value' => $component['value'],
    '#description' => t('The default value of the field.') . theme('webform_token_help'),
    '#cols' => 60,
    '#rows' => 5,
    '#weight' => 0,
  );
  $form['validation']['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#description' => t('Determines whether the counter counts chracters or words.'),
    '#default_value' => $component['extra']['type'],
    '#options' => array(
      'char' => t('Character'),
      'word' => t('Word'),
    ),
    '#multiple' => FALSE,
    '#weight' => 4,
    '#parents' => array('extra', 'type'),
    '#weight' => 1,
  );
  $form['validation']['max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum'),
    '#default_value' => $component['extra']['max'],
    '#description' => t('Maximum number of characters the field will accept.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#parents' => array('extra', 'max'),
    '#weight' => 2,
  );
  $form['validation']['message'] = array(
    '#type' => 'textfield',
    '#title' => t('Message'),
    '#default_value' => $component['extra']['message'],
    '#description' => t('Message that gets displayed alongside counter.'),
    '#parents' => array('extra', 'message'),
    '#weight' => 3,
  );
  $form['display']['cols'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $component['extra']['cols'],
    '#description' => t('Width of the textarea in columns. This property might not have a visual impact depending on the CSS of your site.') . ' ' . t('Leaving blank will use the default size.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#parents' => array('extra', 'cols'),
  );
  $form['display']['rows'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => $component['extra']['rows'],
    '#description' => t('Height of the textarea in rows.') . ' ' . t('Leaving blank will use the default size.'),
    '#size' => 5,
    '#maxlength' => 10,
    '#parents' => array('extra', 'rows'),
  );
  $form['display']['resizable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Resizable'),
    '#description' => t('Make this field resizable by the user.'),
    '#weight' => 2,
    '#default_value' => $component['extra']['resizable'],
    '#parents' => array('extra', 'resizable'),
  );
  $form['display']['placeholder'] = array(
    '#type' => 'textfield',
    '#title' => t('Placeholder'),
    '#default_value' => $component['extra']['placeholder'],
    '#description' => t('The placeholder will be shown in the field until the user starts entering a value.'),
    '#parents' => array('extra', 'placeholder'),
  );
  $form['display']['disabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disabled'),
    '#return_value' => 1,
    '#description' => t('Make this field non-editable. Useful for setting an unchangeable default value.'),
    '#weight' => 11,
    '#default_value' => $component['extra']['disabled'],
    '#parents' => array('extra', 'disabled'),
  );
  return $form;;
}

/**
 * Implements _webform_render_component().
 */
function _webform_render_countdown($component, $value = NULL, $filter = TRUE) {
  $node = isset($component['nid']) ? node_load($component['nid']) : NULL;

  $element = array(
    '#type' => 'textarea',
    '#title' => $filter ? _webform_filter_xss($component['name']) : $component['name'],
    '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
    '#default_value' => $filter ? _webform_filter_values($component['value'], $node) : $component['value'],
    '#required' => $component['required'],
    '#weight' => $component['weight'],
    '#description' => $filter ? _webform_filter_descriptions($component['extra']['description'], $node) : $component['extra']['description'],
    '#rows' => !empty($component['extra']['rows']) ? $component['extra']['rows'] : 5,
    '#cols' => !empty($component['extra']['cols']) ? $component['extra']['cols'] : 60,
    '#attributes' => $component['extra']['attributes'],
    '#resizable' => (bool) $component['extra']['resizable'], // MUST be FALSE to disable.
    '#theme_wrappers' => array('webform_element'),
    '#translatable' => array('title', 'description'),
    '#element_validate' => array('webform_countdown_validate'),
    '#attached' => array('js' => _webform_countdown_add_counter($component['form_key'], $component['extra']['max'], $component['extra']['type'], $component['extra']['message'])),
  );

  if ($component['required']) {
    $element['#attributes']['required'] = 'required';
  }

  if ($component['extra']['placeholder']) {
    $element['#attributes']['placeholder'] = $component['extra']['placeholder'];
  }

  if ($component['extra']['disabled']) {
    if ($filter) {
      $element['#attributes']['readonly'] = 'readonly';
    }
    else {
      $element['#disabled'] = TRUE;
    }
  }

  if (isset($value[0])) {
    $element['#default_value'] = $value[0];
  }

  return $element;
}

/**
 * Implements _webform_display_component().
 */
function _webform_display_countdown($component, $value, $format = 'html', $submission = array()) {
  return array(
    '#title' => $component['name'],
    '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_countdown',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#format' => $format,
    '#value' => isset($value[0]) ? $value[0] : '',
    '#translatable' => array('title'),
  );
}

/**
 * Custom Theme function for collected countdown data.
 */
function theme_webform_display_countdown($variables) {
  $element = $variables['element'];
  $output = $element['#format'] == 'html' ? nl2br(check_plain($element['#value'])) : $element['#value'];
  if (drupal_strlen($output) > 80) {
    $output = ($element['#format'] == 'html') ? '<div class="webform-long-answer">' . $output . '</div>' : $output;
  }
  return $output !== '' ? $output : ' ';
}

/**
 * Implements _webform_analysis_component().
 */
function _webform_analysis_countdown($component, $sids = array(), $single = FALSE, $join = NULL) {
  $query = db_select('webform_submitted_data', 'wsd', array('fetch' => PDO::FETCH_ASSOC))
    ->fields('wsd', array('no', 'data'))
    ->condition('wsd.nid', $component['nid'])
    ->condition('wsd.cid', $component['cid']);

  if (count($sids)) {
    $query->condition('wsd.sid', $sids, 'IN');
  }

  if ($join) {
    $query->innerJoin($join, 'ws2_', 'wsd.sid = ws2_.sid');
  }

  $nonblanks = 0;
  $submissions = 0;
  $wordcount = 0;

  $result = $query->execute();
  foreach ($result as $data) {
    if (drupal_strlen(trim($data['data'])) > 0) {
      $nonblanks++;
      $wordcount += _webform_countdown_count_words($data['data']);
    }
    $submissions++;
  }

  $rows[0] = array(t('Left Blank'), ($submissions - $nonblanks));
  $rows[1] = array(t('User entered value'), $nonblanks);

  $other[] = array(t('Average submission length in words (ex blanks)'), ($nonblanks != 0 ? number_format($wordcount/$nonblanks, 2) : '0'));

  return array(
    'table_rows' => $rows,
    'other_data' => $other,
  );
}

/**
 * Implements _webform_table_component().
 */
function _webform_table_countdown($component, $value) {
  return empty($value[0]) ? '' : check_plain($value[0]);
}

/**
 * Implements _webform_csv_headers_component().
 */
function _webform_csv_headers_countdown($component, $export_options) {
  $header = array();
  $header[0] = '';
  $header[1] = '';
  $header[2] = $export_options['header_keys'] ? $component['form_key'] : $component['name'];
  return $header;
}

/**
 * Implements _webform_csv_data_component().
 */
function _webform_csv_data_countdown($component, $export_options, $value) {
  return empty($value[0]) ? '' : $value[0];
}

/**
 * Validate input against maximum characters.
 */
function webform_countdown_validate($element, $form_state, $form) {
  // Check to ensure value has been entered.
  if (!empty($element['#value'])) {
    if ($element['#webform_component']['extra']['type'] == 'char') {
      // Check to ensure character count is less than or equal to max.
      // PHP strlen() does not match JavaScripts .length if string has newlines,
      // so convert newlines to single char.
      $tmpvalue = str_replace("\r\n", "\n", $element['#value']);
      if (mb_strlen($tmpvalue) > $element['#webform_component']['extra']['max']) {
        form_error($element, t('The @title field should contain a maximum of @max characters.', array('@title' => $element['#title'], '@max' => $element['#webform_component']['extra']['max'])));
      }
    }
    else if ($element['#webform_component']['extra']['type'] == 'word') {
      // Check to ensure word count is less than or equal to max.
      if (_webform_countdown_count_words($element['#value']) > $element['#webform_component']['extra']['max']) {
        form_error($element, t('The @title field should contain a maximum of @max words.', array('@title' => $element['#title'], '@max' => $element['#webform_component']['extra']['max'])));
      }
    }
  }

  $element['#attached']['js'] = array('js' => _webform_countdown_add_counter($element['#webform_component']['form_key'], $element['#webform_component']['extra']['max'], $element['#webform_component']['extra']['type'], $element['#webform_component']['extra']['message']));
}

/**
 * Add JS to implement counter.
 */
function _webform_countdown_add_counter($form_key, $max = 140, $type = 'char', $message = 'characters remaining') {
  $js = array();

  // Add Word and Character Counter library
  $js[] = array(
    'data' => libraries_get_path('word-and-character-counter') . '/word-and-character-counter.js',
    'type' => 'file',
  );

  // Generate element settings
  $settings[$form_key] = array(
    'key' => $form_key,
    'max' => $max,
    'type' => $type,
    'message' => $message,
  );

  // Send settings to Drupal js
  $js[] = array(
    'data' => array('webformCountdown' => $settings),
    'type' => 'setting',
  );

  // Add webform_countdown.js
  $js[] = array(
    'data' => drupal_get_path('module', 'webform_countdown') . '/webform_countdown.js',
    'type' => 'file',
  );

  return $js;
}

/**
 * Count the number of words in a value.
 *
 * Strip HTML first.
 */
function _webform_countdown_count_words($val) {
  $val = strip_tags($val);
  // Replace entities representing spaces with actual spaces.
  $val = str_replace('&nbsp;', ' ', $val);
  $val = str_replace('&#160;', ' ', $val);

  return count(explode(' ', trim(preg_replace('/\s+/', ' ', $val))));
}
