<?php

/**
 * @file
 * Code for the PW Poll feature.
 */

include_once 'pw_poll.features.inc';

/**
 * Implements hook_menu().
 */
function pw_poll_menu() {
  $items['polls'] = [
    'title' => 'Polls',
    'page callback' => 'pw_poll_page',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  $items['polls/%taxonomy_term'] = [
    'title' => 'Polls',
    'page arguments' => [1],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implements hook_node_view().
 */
function pw_poll_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'poll' && node_is_page($node)) {
    $parliament_tid = $node->field_parliament[LANGUAGE_NONE][0]['tid'];
    menu_tree_set_path('main-menu', "polls/$parliament_tid");
  }
}

/**
 * Implements hook_block_info().
 */
function pw_poll_block_info() {
  $blocks['intro'] = [
    'info' => t('Poll intro'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  $blocks['timeline'] = [
    'info' => t('Poll timeline'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  $blocks['related'] = [
    'info' => t('Related polls'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  $blocks['recent'] = [
    'info' => t('Recent polls (in parliament)'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pw_poll_block_view($delta = '') {
  switch ($delta) {
    case 'intro':
      return pw_poll_intro_block();
    case 'timeline':
      return pw_poll_timeline_block();
    case 'related':
      return pw_poll_related_block();
    case 'recent':
      return pw_poll_recent_block();
    default:
      return [];
  }
}

/**
 * Page callback: Displays a listing of polls.
 */
function pw_poll_page($parliament_term = NULL) {
  $build = [];

  $q = pw_poll_base_query()
    ->fieldOrderBy('field_poll_date', 'value', 'DESC');

  if (isset($parliament_term)) {
    $q->fieldCondition('field_parliament', 'tid', $parliament_term->tid);
  }

  $result = $q->pager(12)->execute();

  if (!empty($result['node'])) {
    $nodes = node_load_multiple(array_keys($result['node']));

    foreach (pw_poll_results($nodes) as $nid => $result) {
      $nodes[$nid]->result = $result;
    }

    $build = node_view_multiple($nodes, 'tile');
    $build['#theme_wrappers'] = ['container__tiles'];
    $build['pager'] = [
      '#theme' => 'pager',
      '#weight' => 5,
    ];
  }

  return $build;
}

/**
 * Displays poll intro.
 *
 * @return array
 *   The block render array.
 */
function pw_poll_intro_block() {
  $block = [];
  $node = menu_get_object();

  if (!$node) {
    return $block;
  }

  $block['subject'] = t('Poll intro');
  $block['content'] = node_view($node, 'intro');

  return $block;
}

/**
 * Displays poll timeline.
 *
 * @return array
 *   The block render array.
 */
function pw_poll_timeline_block() {
  $block = [];
  $node = menu_get_object();

  if (!$node) {
    return $block;
  }

  $q = pw_poll_base_query();
  $q->fieldOrderBy('field_poll_date', 'value');
  $q->fieldCondition('field_parliament', 'tid', $node->field_parliament[LANGUAGE_NONE][0]['tid']);

  $result = $q->execute();

  if (empty($result['node'])) {
    return block;
  }

  $nodes = node_load_multiple(array_keys($result['node']));

  foreach (pw_poll_results($nodes) as $nid => $result) {
    $nodes[$nid]->result = $result;
  }

  $nodes_by_day = [];

  foreach ($nodes as $node) {
    $day = format_date(strtotime($node->field_poll_date[LANGUAGE_NONE][0]['value']), 'custom', 'd.m.Y');
    $nodes_by_day[$day][] = node_view($node, 'timeline');
  }

  foreach (array_keys($nodes_by_day) as $key) {
    $nodes_by_day[$key]['#theme_wrappers'] = ['container__timeline'];
    $nodes_by_day[$key]['#date'] = $key;
  }

  $block['subject'] = t('All polls of this parliament');
  $block['content'] = $nodes_by_day;

  return $block;
}

/**
 * Displays related polls.
 *
 * @return array
 *   The block render array.
 */
function pw_poll_related_block() {
  $block = [];
  $node = menu_get_object();

  if (!$node) {
    return $block;
  }

  $items = field_get_items('node', $node, 'field_topics');

  $q = pw_poll_base_query();
  $q->fieldOrderBy('field_poll_date', 'value');
  $q->fieldCondition('field_parliament', 'tid', $node->field_parliament[LANGUAGE_NONE][0]['tid']);
  $q->range(0, 3);
  if ($items) {
    $q->fieldCondition('field_topics', 'tid', array_column($items, 'tid'));
  }

  $result = $q->execute();

  if (empty($result['node'])) {
    return $block;
  }

  $nodes = node_load_multiple(array_keys($result['node']));

  foreach (pw_poll_results($nodes) as $nid => $result) {
    $nodes[$nid]->result = $result;
  }

  $block['subject'] = t('Related polls');
  $block['content'] = node_view_multiple($nodes, 'tile');

  return $block;
}

/**
 * Displays recent polls in parliament.
 *
 * @return array
 *   The block render array.
 */
function pw_poll_recent_block() {
  $block = [];
  $parliament_term = menu_get_object('taxonomy_term', 2);

  if (!$parliament_term || $parliament_term->vocabulary_machine_name != 'parliaments') {
    return $block;
  }

  $q = pw_poll_base_query();
  $q->fieldOrderBy('field_poll_date', 'value', 'DESC');
  $q->fieldCondition('field_parliament', 'tid', $parliament_term->tid);
  $q->range(0, 3);

  $result = $q->execute();

  if (empty($result['node'])) {
    return $block;
  }

  $nodes = node_load_multiple(array_keys($result['node']));

  foreach (pw_poll_results($nodes) as $nid => $result) {
    $nodes[$nid]->result = $result;
  }

  $block['subject'] = t('New polls');
  $block['content'] = node_view_multiple($nodes, 'tile');

  return $block;
}

/**
 * Returns a query for fetching published nodes of type poll.
 *
 * @return EntityFieldQuery
 *   The query object.
 */
function pw_poll_base_query() {
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $q->entityCondition('bundle', 'poll');
  $q->propertyCondition('status', NODE_PUBLISHED);

  return $q;
}

/**
 * Returns the results for the given nodes.
 *
 * @param array
 *   The poll nodes.
 *
 * @return array
 *   The results keyed by nid.
 */
function pw_poll_results($nodes) {
  $results = [];
  $eligible_nodes = array_filter($nodes, 'pw_poll_result_complete');

  if (empty($eligible_nodes)) {
    return $results;
  }

  $q = db_select('field_data_field_vote', 'v');
  $q->join('field_data_field_vote_node', 'p', 'v.entity_id = p.entity_id');
  $q->addField('p', 'field_vote_node_target_id', 'nid');
  $q->addField('v', 'field_vote_tid');
  $q->addExpression('COUNT(v.field_vote_tid)', 'vote_count');
  $q->condition('p.field_vote_node_target_id', array_map(function ($item) { return $item->nid; }, $eligible_nodes));
  $q->groupBy('p.field_vote_node_target_id')->groupBy('v.field_vote_tid');

  foreach ($q->execute() as $row) {
    switch ($row->field_vote_tid) {
      case 19667:
        $results[$row->nid]['yes'] = (int) $row->vote_count;
        break;
      case 19668:
        $results[$row->nid]['no'] = (int) $row->vote_count;
        break;
      case 19669:
        $results[$row->nid]['abstain'] = (int) $row->vote_count;
        break;
      case 19670:
        $results[$row->nid]['no-show'] = (int) $row->vote_count;
        break;
    }
  }

  $defaults = ['yes' => 0, 'no' => 0, 'abstain' => 0, 'no-show' => 0];

  foreach (array_keys($results) as $nid) {
    $results[$nid] += $defaults;
  }

  return $results;
}

/**
 * Returns whether all votes for the given poll have been imported or not.
 *
 * The return value depends on the related parliament only.
 *
 * @param object $node
 *   The poll node.
 *
 * @return boolean
 *   TRUE if all votes for this poll have been imported, FALSE otherwise.
 */
function pw_poll_result_complete($node) {
  $items = field_get_items('node', $node, 'field_parliament');
  if ($items) {
    return !in_array($items[0]['tid'], [16117, 16236, 16251]);
  }
  else {
    return TRUE;
  }
}
