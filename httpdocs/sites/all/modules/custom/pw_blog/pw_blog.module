<?php
/**
 * @file
 * Code for the PW Blog feature.
 */

include_once 'pw_blog.features.inc';

/**
 * Implements hook_menu().
 */
function pw_blog_menu() {
  $items = [];
  $items['blog'] = [
    'title' => 'Blog',
    'page callback' => 'pw_blog_page',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_blockreference_blocks_pre_alter().
 */
function pw_blog_blockreference_blocks_pre_alter(&$blocks, $context) {
  if ($context['entity']->type == 'blogpost') {
    $allowed_block_ids = array('webform:client-block-104846', 'pw_blog:newsletter_subscription');
    foreach ($blocks as $id => $block) {
      if (!in_array($id, $allowed_block_ids)) {
        unset($blocks[$id]);
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function pw_blog_block_info() {
  $blocks['related_blogposts'] = [
    'info' => t('Related blog posts'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  $blocks['recent_blogposts'] = [
    'info' => t('Recent blog posts'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  ];
  $blocks['newsletter_subscription'] = [
    'info' => 'Newsletter Subscription',
    'cache' => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pw_blog_block_view($delta = '') {
  switch ($delta) {
    case 'related_blogposts':
      return pw_blog_related_blogposts_block();
    case 'recent_blogposts':
      return pw_blog_recent_blogposts_block();
    case 'newsletter_subscription':
      return pw_blog_newsletter_subscription_block();
    default:
      return [];
  }
}

/**
 * Page callback: Displays a listing of blog posts.
 */
function pw_blog_page() {
  $build = [];

  $result = pw_blog_base_query()
    ->propertyOrderBy('created', 'DESC')
    ->pager(12)
    ->execute();

  if (!empty($result['node'])) {
    $build = node_view_multiple(node_load_multiple(array_keys($result['node'])), 'tile');
    $build['#theme_wrappers'] = ['container__tiles'];
    $build['pager'] = [
      '#theme' => 'pager',
      '#weight' => 5,
    ];
  }

  return $build;
}

/**
 * Displays related blog posts.
 *
 * @return array
 *   The block render array.
 */
function pw_blog_related_blogposts_block() {
  $node = menu_get_object();

  if (!isset($node)) {
    return;
  }

  $block = [
    'subject' => t('Related blog posts'),
  ];

  $items = field_get_items('node', $node, 'field_topics');

  if (empty($items)) {
    return;
  }

  $result = pw_blog_base_query()
    ->fieldCondition('field_topics', 'tid', array_column($items, 'tid'), 'IN')
    ->propertyCondition('nid', $node->nid, '<>')
    ->propertyOrderBy('created', 'DESC')
    ->range(0, 3)
    ->execute();

  if (!empty($result['node'])) {
    $block['content'] = node_view_multiple(node_load_multiple(array_keys($result['node'])), 'tile');
  }

  return $block;
}

/**
 * Displays recent blog posts.
 *
 * @return array
 *   The block render array.
 */
function pw_blog_recent_blogposts_block() {
  $block = [
    'subject' => t('New blog entries'),
  ];

  $result = pw_blog_base_query()
    ->propertyOrderBy('created', 'DESC')
    ->range(0, 3)
    ->execute();

  if (!empty($result['node'])) {
    $nodes_rendered = node_view_multiple(node_load_multiple(array_keys($result['node'])), 'tile');
    $block['content']['head']['nodes'] = array_shift($nodes_rendered['nodes']);
    $block['content']['tail']['nodes'] = $nodes_rendered['nodes'];
    $block['content']['tail']['#theme_wrappers'] = ['container__small_tiles'];
  }

  return $block;
}

/**
 * Displays newsletter subscription for blog-posts
 *
 * @return array
 *   The block render array.
 */
function pw_blog_newsletter_subscription_block() {
  $block = [];
  return $block;
}

/**
 * Returns a query for fetching published nodes of type blogpost.
 *
 * @return EntityFieldQuery
 *   The query object.
 */
function pw_blog_base_query() {
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $q->entityCondition('bundle', 'blogpost');
  $q->propertyCondition('status', NODE_PUBLISHED);

  return $q;
}
