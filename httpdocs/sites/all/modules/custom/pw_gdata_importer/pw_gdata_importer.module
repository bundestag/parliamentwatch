<?php
/**
 * @file
 * Code for the PW GData Importer feature.
 */

include_once 'pw_gdata_importer.features.inc';

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function pw_gdata_importer_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  if ($bundle_name === NULL) {
    return;
  }

  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);
    if ($info['type'] == 'entityreference') {
      $targets[$name . ':uuid'] = array(
        'name' => t('@label (by UUID)', array('@label' => $instance['label'])),
        'callback' => 'pw_gdata_importer_feeds_set_target',
      );
    }
  }

  if (isset($targets['uid'])) {
    $targets['uid:uuid'] = array(
      'name' => t('uid (by UUID)', array('@label' => $instance['label'])),
      'callback' => 'pw_gdata_importer_feeds_set_target',
    );
  }

  if ($entity_type == 'taxonomy_term' && $bundle_name == 'constituency') {
    if (isset($targets['Temporary target 1'])) {
      $targets['Temporary target 1']['unique_callbacks'][] = '_pw_gdata_importer_constituency_tid';
      $targets['Temporary target 1']['optional_unique'] = TRUE;
    }
    if (isset($targets['field_constituency_street'])) {
      $targets['field_constituency_street']['callback'] = '_pw_gdata_importer_add_constituency_street';
    }
  }
}

/**
 * Performs entity reference mapping by UUID.
 *
 * @see entityreference_feeds_set_target().
 */
function pw_gdata_importer_feeds_set_target($source, $entity, $target, $value, $mapping) {
  if (empty($value)) {
    return;
  }

  if (is_array($value)) {
    $values = $value;
  }
  else {
    $values = array($value);
  }

  list($target) = explode(':', $target, 2);

  $info = field_info_field($target);

  $language = isset($mapping['language']) ? $mapping['language'] : LANGUAGE_NONE;
  if($info['settings']['target_type'] == 'node'){
    $entity_ids = db_select('node', 'n')
      ->fields('n', array('uuid', 'nid'))
      ->condition('uuid', array_values($values), 'IN')
      ->execute()
      ->fetchAllKeyed();
  }

  // default is user
  else{
    $entity_ids = db_select('users', 'u')
      ->fields('u', array('uuid', 'uid'))
      ->condition('uuid', array_values($values), 'IN')
      ->execute()
      ->fetchAllKeyed();
  }

  $iterator = 0;
  $field = isset($entity->target) ? $entity->target : array();
  foreach ($entity_ids as $entity_id) {
    if ($entity_id) {
      if ($info) {
        $field[$language][$iterator]['target_id'] = $entity_id;
      }
      else {
        $field = $entity_id;
      }
    }
    else {
      unset($entity->feeds_item->hash);
    }

    if (!$info || $info['cardinality'] == 1) {
      break;
    }
    $iterator++;
  }

  $entity->{$target} = $field;
}

/**
 *  Implements hook_feeds_after_parse().
 */
function pw_gdata_importer_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {

  // checks if filesize of source file differs to target filesize.
  if ($source->id == 'gdata_profiles_importer_v2' || $source->id == 'petition_updater' && !empty($source->feed_nid)) {

    // set reference to processor
    $processor = $source->importer->processor;

    // figure out which entity type we have
    if($source->importer->config['processor']['config']['bundle'] == 'user'){
      $entity_type = 'user';
    }
    elseif(!empty($source->importer->config['content_type'])){
      $entity_type = 'node';
    }
    else{
      // somethings wrong
      return;
    }

    // load by nid if processor is of type feedselfnodeprocessor
    if(!empty($source->feed_nid)){
      $target_entity = node_load($source->feed_nid);
    }

    // identify entity by guid and load it by its uuid
    else{
      foreach ($processor->config['mappings'] as $a_field) {
        if($a_field['target'] == 'guid'){
          $source_mapping = $a_field['source'];
          $source_value_guid = $result->items[0][$source_mapping];
          if(!empty($source_value_guid) && preg_match('/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/', $source_value_guid)){
            $entities = entity_uuid_load($entity_type, array($source_value_guid));
            if(sizeof($entities) > 0){
              $target_entity = array_pop($entities);
            }
          }
        }
      }
    }

    // exit if no entity was found (and go on with import)
    if(!isset($target_entity) || empty($target_entity)){
      return;
    }

    // array with items to unset
    $keys_to_unset = array();

    // run through all mappings
    foreach ($processor->config['mappings'] as $key => $a_field) {

      // fetch field info
      $target_mapping = $a_field['target'];
      $target_field_info = field_info_field($target_mapping);

      // check if target field is of type image
      if (isset($target_field_info['type']) && $target_field_info['type'] == 'image') {

        // fetch field content if exists
        $target_field = field_get_items($entity_type, $target_entity, $target_mapping);
        $target_filesize = !empty($target_field)?$target_field[0]['filesize']:0;

        $source_mapping = $a_field['source'];
        $source_value_url = $result->items[0][$source_mapping];

        // check if source is a valid url
        if (check_url($source_value_url)) {

          // mask as browser
          $options = array(
            'http' => array(
              'header' => "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_4) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.79 Safari/537.1\r\n"
            )
          );
          stream_context_set_default($options);

          $source_headers = get_headers($source_value_url, TRUE);
          if(!empty($source_headers['Content-Length'])){
            $source_filesize = intval($source_headers['Content-Length']);

            // don't import same file again
            if ($target_filesize == $source_filesize) {
              $keys_to_unset[] = $key;
            }
          }
          else{
            // prevent from overwriting with file of zero length
            $keys_to_unset[] = $key;
          }
        }
        else{
          // prevent from overwriting with empty url
          $keys_to_unset[] = $key;
        }
      }
    }

    // set changed mappings
    if (sizeof($keys_to_unset) > 0) {

      // copy protected mappings
      $new_mappings = array();
      $new_mappings['mappings'] = $processor->config['mappings'];
      foreach ($keys_to_unset as $key) {
        unset($new_mappings['mappings'][$key]);
      }
      $processor->addConfig($new_mappings);
    }
  }
}

/**
 * Implements hook_feeds_presave().
 */
function pw_gdata_importer_feeds_presave(FeedsSource $source, $entity, $item, $entity_id) {

  // update to deputy if list or constituency was won
  if ($source->id == 'gdata_elected_profiles') {
    $field_list_won = field_get_items('user', $entity, 'field_user_list_won');
    $field_constituency_won = field_get_items('user', $entity, 'field_user_constituency_won');
    if (!empty($field_list_won) && $field_list_won[0]['value'] == 1 || !empty($field_constituency_won) && $field_constituency_won[0]['value'] == 1) {
      $entity->roles = array();
      foreach (array('Politician', 'Deputy') as $role_name) {
        $rid = user_role_load_by_name($role_name)->rid;
        $entity->roles[$rid] = $role_name;
      }
    }
  }
}

/**
 * Returns tid of constituency by parliament and number.
 *
 * @param FeedsSource $source
 *   The Feed source.
 * @param string $entity_type
 *   Entity type for the entity to be processed.
 * @param string $bundle
 *   Bundle name for the entity to be processed.
 * @param string $target
 *   A string identifying the unique target on the entity.
 * @param array $values
 *   The unique values to be checked.
 *
 * @return int
 *   The existing entity id, or NULL if no existing entity is found.
 *
 * @see pw_gdata_importer_feeds_processor_targets_alter()
 */
function _pw_gdata_importer_constituency_tid(FeedsSource $source, $entity_type, $bundle, $target, array $values) {
  $number  = strtok($values[0], '-');
  $parliament_name = strtok('');
  $parliament_terms = taxonomy_get_term_by_name($parliament_name, 'parliaments');

  if (is_array($parliament_terms) && count($parliament_terms == 1)) {
    $q = db_select('field_data_field_constituency_nr', 'nr');
    $q->join('field_data_field_parliament', 'p', 'nr.entity_id = p.entity_id AND p.bundle = :bundle', [':bundle' => 'constituency']);
    return $q->fields('nr', ['entity_id'])
      ->condition('field_constituency_nr_value', $number)
      ->condition('field_parliament_tid', key($parliament_terms))
      ->execute()
      ->fetchField();
  }
}

/**
 * Callback for mapping constituency street field.
 *
 * Adds given value to existing values if it does not exist yet.
 *
 * @param FeedsSource $source
 *   The Feed source.
 * @param object $entity
 *   An entity object. This must be a taxonomy term
 * @param string $target
 *    A string identifying the target on the entity.
 * @param array $values
 *   The values to populate the target with.
 * @param array $mapping
 *   An associative array of the mapping settings.
 */
function _pw_gdata_importer_add_constituency_street(FeedsSource $source, $entity, $target, array $values, array $mapping) {
  $current_values = db_select('field_data_field_constituency_street', 'f')
    ->fields('f', ['field_constituency_street_value'])
    ->condition('entity_type', 'taxonomy_term')
    ->condition('bundle', 'constituency')
    ->condition('entity_id', entity_id('taxonomy_term', $entity))
    ->execute()
    ->fetchCol();
  $new_values = array_unique(array_merge($current_values, $values));
  text_feeds_set_target($source, $entity, $target, $new_values, $mapping);
}
