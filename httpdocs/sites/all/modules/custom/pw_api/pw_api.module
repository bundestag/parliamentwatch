<?php
/**
 * @file
 */

include_once('pw_api.features.inc');

/**
 * Implements hook_menu().
 *
 * @return array
 */
function pw_api_menu() {
  $items = array();
  $items['admin/config/pw/pw_api/settings'] = array(
    'title' => 'PW API settings',
    'description' => 'Allows to add allowed IP addresses for the internal API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_api_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pw_api.admin.inc',
    );

  // add parliaments hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/parliaments.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_parliaments',
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.parliaments.inc',
      );
    $items[$key] = $item;
  }

  // add constituency hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/parliament/%/constituencies.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_constituencies',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.constituencies.inc',
      );
    $items[$key] = $item;
  }

  // add votes hooks
  foreach (array('xml', 'json') as $file_type) {

    // add petitions
    $key = 'api/parliament/%/petitions.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_petitions',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.votes.inc',
      );
    $items[$key] = $item;

    // add polls
    $key = 'api/parliament/%/polls.'.$file_type;
    $item['page callback'] = 'pw_api_polls';
    $items[$key] = $item;
  }

  // add poll hooks
  foreach (array('xml', 'json') as $file_type) {

    // add poll
    $key = 'api/poll/%/poll.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_poll',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.votes.inc',
      );
    $items[$key] = $item;
  }

  // add profile hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/profile/%/profile.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_profile',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.profiles.inc',
      );
    $items[$key] = $item;

    // add another path for this call
    $key = 'api/parliament/%/profile/%/profile.'.$file_type;
    $item['page arguments'] = array(4, 2);
    $items[$key] = $item;
  }

  // add profiles hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/parliament/%/profiles.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_profiles',
      'page arguments' => array(2, $file_type),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.profiles.inc',
      );
    $items[$key] = $item;
    $items['api/parliament/%/deputies.'.$file_type] = $items[$key];
    $items['api/parliament/%/candidates.'.$file_type] = $items[$key];
  }

  // add hooks for authorized api based on public api
  foreach ($items as $key => $item) {
    if(preg_match('/(api\/.*)(\.\w{3,4})$/', $key, $m)){
      $key_authorizied = $m[1].'-authorized'.$m[2];
      $items[$key_authorizied] = $item;
      $items[$key_authorizied]['access arguments'] = array('access authorized api');
      unset($items[$key_authorizied]['access callback']);
    }
  }

  return $items;
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function pw_api_permission() {
  return array(
    'access authorized api' => array(
      'title' => t('Access authorized API'),
      'description' => t('Read from hidden API to access private data.'),
      ),
    );
}

/**
 * Delivery callback; returns XML.
 *
 * @param array $items
 */
function pw_api_deliver_xml($page_result) {
  drupal_add_http_header('Content-type', 'text/xml; charset=utf8');

  if ($page_result === MENU_NOT_FOUND) {
    drupal_add_http_header('Status', '404 Not Found');
  }
  else {
    $pathinfo = pathinfo(current_path());
    $writer = new XmlWriter();
    $writer->openUri('php://output');
    $writer->setIndent(TRUE);
    $writer->setIndentString('  ');
    $writer->startDocument('1.0', 'UTF-8');
    pw_api_items_to_xml($writer, $page_result);
    $writer->flush();
    drupal_add_http_header('Cache-Control', 'public, max-age=86400');
  }
}


/**
 * converts an array to xml via an referenced XmlWriter object.
 *
 * @param XmlWriter &$writer
 *
 * @param array $items
 */
function pw_api_items_to_xml(&$writer, $items) {
  foreach($items as $key => $value) {

    // clear node name from iterators
    $key = preg_replace('/_\d+$/', '', $key);

    if(is_array($value)) {
      $writer->startElement($key);
      pw_api_items_to_xml($writer, $value);
      $writer->endElement();
    }
    else {
      $writer->writeElement($key, $value);
    }
  }
}


/**
 * Rebuilds all associative arrays with keys like constituency_12345 to flat arrays.
 *
 * @param array $items
 */

function pw_api_json_array_rebuild(&$items){
  foreach ($items as $key => &$value) {
    if(is_array($value)){
      if(preg_match('/_\d+$/', key($value))){
        $items[$key] = array_values($value);
      }
      pw_api_json_array_rebuild($value);
    }
  }
}

/**
 * Shorten all names in json array.
 *
 * @param array $items
 */

function pw_api_shorten_names(&$items){
  $keys = array_keys($items);
  foreach ($keys as $key) {
    if (is_array($items[$key])) {
      pw_api_shorten_names($items[$key]);
    }
    if (!is_numeric($key)){
      for ($i = 2; !isset($newkey) || isset($items[$newkey]); $i++) {
        if (strlen($key) == $i) {
          break;
        }
        $newkey = substr($key, 0, $i);
      }
      $items[$newkey] = $items[$key];
      unset($items[$key]);
    }
  }
}

/**
 * Delivery callback; returns JSON.
 *
 * @param array $page_result
 */

function pw_api_deliver_json($page_result) {
  drupal_add_http_header('Content-Type', 'application/json');

  if ($page_result === MENU_NOT_FOUND) {
    drupal_add_http_header('Status', '404 Not Found');
  }
  else {
    drupal_add_http_header('Cache-Control', 'public, max-age=86400');
    pw_api_json_array_rebuild($page_result);
    print drupal_json_encode($page_result);
  }
}

/**
 * Delivery callback; returns CSV.
 *
 * @param array $page_result
 */
function pw_api_deliver_csv($page_result) {
  drupal_add_http_header('Content-type', 'text/csv; charset=utf8');

  if (is_int($page_result)) {
    switch ($page_result) {
      case MENU_NOT_FOUND:
      drupal_add_http_header('Status', '404 Not Found');
      break;
    }
  } else {
    $handle = fopen('php://output', 'w');
    foreach ($page_result as $item) {
      $fields = array(
        $item['uuid'],
        $item['gender'],
        $item['name'],
        $item['first_name'],
        $item['last_name'],
        $item['party'],
        $item['constituency']['uuid'],
        $item['constituency']['name'],
        $item['constituency']['number'],
        );
      fputcsv($handle, $fields);
    }
  }
}
