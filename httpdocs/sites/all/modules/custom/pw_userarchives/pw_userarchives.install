<?php

/*
 * Implements hook_schema().
 */

use Drupal\pw_globals\PWUser;

function pw_userarchives_schema() {

  $schema['user_archive_cache'] = array(
    'description' => 'Table storing the user revisions valid for different candidacies and mandates of politicians',
    'fields' => array(
      'id' => array(
        'description' => 'Unique id of a user archive cache entry',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users} uid of the politician',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'user_name' => array(
        'description' => 'The {users} name of the politician',
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'The {user_revision} vid of the user revision',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'parliament_name' => array(
        'description' => 'The term name of the parliament',
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
      'number_of_questions' => array(
        'description' => 'Number of questions related to the politician and parliament',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'number_of_answers' => array(
        'description' => 'Number of non-standard answers from the politician related to the parliament',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'number_of_standard_replies' => array(
        'description' => 'Number of standard answers from the politician related to the parliament',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'fraction_name' => array(
        'description' => 'The name of the fraction',
        'type' => 'varchar',
        'length' => 100,
        'not null' => FALSE,
      ),
      'actual_profile' => array(
        'description' => 'Boolean if profile is newest.',
        'mysql_type' => 'tinyint',
        'length' => 4,
        'not null' => TRUE,
        'default' => 0,
      ),
      'question_form_open' => array(
        'description' => 'Boolean if form is open for questions',
        'mysql_type' => 'tinyint',
        'length' => 4,
        'not null' => FALSE,
        'default' => 0,
      ),
      'question_form_open_change' => array(
        'description' => 'Timestamp of the day when the question form open state needs to be revalidated',
        'type' => 'int'
      ),
      'user_joined' => array(
        'description' => 'Date entering the parliament.',
        'mysql_type' => 'date',
        'not null' => FALSE,
      ),
      'user_retired' => array(
        'description' => 'Date leaving the parliament.',
        'mysql_type' => 'date',
        'not null' => FALSE,
      ),
      'timestamp' => array(
        'description' => 'Actually the date of parliament election but falsy used as date of user revision',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Adds further column user_role
 */
function pw_userarchives_update_7100() {
  db_add_field('user_archive_cache', 'user_role', array('type' => 'varchar', 'length' => '45', 'not null' => FALSE, 'description' => 'Role of user: candidate or deputy.'));
}


/**
 * Add indicies for uid, user_name, user_role, vid, parliament_name to table user_archive_cache.
 */
function pw_userarchives_update_7101() {
  db_add_index('user_archive_cache', 'uid', array('uid'));
  db_add_index('user_archive_cache', 'user_name', array('user_name'));
  db_add_index('user_archive_cache', 'user_role', array('user_role'));
  db_add_index('user_archive_cache', 'vid', array('vid'));
  db_add_index('user_archive_cache', 'parliament_name', array('parliament_name'));
}

/**
 * Adds further column fraction_name
 */
function pw_userarchives_update_7102() {
  db_add_field('user_archive_cache', 'fraction_name', array('type' => 'varchar', 'length' => '100', 'description' => 'Fracion of user.'));
  db_add_index('user_archive_cache', 'fraction_name', array('fraction_name'));
}

/**
 * Adds further column actual_profile
 */
function pw_userarchives_update_7103() {
  db_add_field('user_archive_cache', 'actual_profile', array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'size' => 'tiny', 'description' => 'Boolean if profile is newest.'));
  db_add_index('user_archive_cache', 'actual_profile', array('actual_profile'));
}

/**
 * Adds further columns user_joined and user_retired
 */
function pw_userarchives_update_7104() {
  db_add_field('user_archive_cache', 'user_joined', array('type' => 'varchar', 'mysql_type' => 'DATE', 'description' => 'Date entering the parliament.'));
  db_add_field('user_archive_cache', 'user_retired', array('type' => 'varchar', 'mysql_type' => 'DATE', 'description' => 'Date leaving the parliament.'));
  db_add_index('user_archive_cache', 'user_joined', array('user_joined'));
  db_add_index('user_archive_cache', 'user_retired', array('user_retired'));
}

/**
 * Adds further column question_form_open
 */
function pw_userarchives_update_7105() {
  db_add_field('user_archive_cache', 'question_form_open', array('type' => 'int', 'not null' => FALSE, 'default' => 0, 'size' => 'tiny', 'description' => 'Boolean if form is open for questions.'));
  db_add_index('user_archive_cache', 'question_form_open', array('question_form_open'));
}

/**
 * Increase weight.
 */
function pw_userarchives_update_7106() {
  $weight = 1 + db_select('system', 's')
    ->condition('name', 'user_revision')
    ->fields('s', ['weight'])
    ->execute()
    ->fetchField();
  db_update('system')
    ->condition('name', 'pw_userarchives')
    ->fields(['weight' => $weight])
    ->execute();
}

/**
 * Adds further column number_of_standard_replies
 */
function pw_userarchives_update_7107() {
  db_add_field('user_archive_cache', 'number_of_standard_replies', array('type' => 'int', 'not null' => FALSE, 'description' => 'Number of standard replies.'));
  db_add_index('user_archive_cache', 'number_of_standard_replies', array('number_of_standard_replies'));
}

/**
 * Rebuild user_archive_cache.
 */
function pw_userarchives_update_7108() {
  $transaction = db_transaction();

  try {
    $politician_archive_index = search_api_index_load('politician_archive_index');
    $politician_archive_index->datasource()->stopTracking([$politician_archive_index]);
    $politician_archive_index->update(['enabled' => FALSE]);
    db_delete('user_archive_cache')->execute();
    pw_userarchives_cron_ALT();
    $politician_archive_index->update(['enabled' => TRUE]);
    $politician_archive_index->datasource()->startTracking([$politician_archive_index]);
  }
  catch (Exception $e) {
    $transaction->rollback();
    throw $e;
  }
}


/**
 * Deactivate and uninstall user_revision_edit module as it's logic is merged into pw_userarchives module */
function pw_userarchives_update_7109() {
  module_disable(['user_revision_edit']);
  drupal_uninstall_modules(array('user_revision_edit'));
}


/**
 * Delete unused columns from user archive cache
 *
 **/
function pw_userarchives_update_7110() {
  $table = 'user_archive_cache';
  $columns_to_drop = [
    'number_of_sideline_jobs',
    'number_of_speeches',
    'number_of_missed_votings'
  ];
  foreach ($columns_to_drop as $column) {
    if (db_field_exists($table, $column)) {
      db_drop_field($table, $column);
    }
  }
}


/**
 * Add a question_form_open_change field to user archive cache table
 *
 **/
function pw_userarchives_update_7111() {
  db_add_field('user_archive_cache', 'question_form_open_change', array('type' => 'int', 'description' => 'Timestamp of the day when the question form open state needs to be revalidated.'));
}


/**
 * Completely rebuild the user archive cache table
 *
 **/
function pw_userarchives_update_7112(&$sandbox) {

  if (!isset($sandbox['progress'])) {
    db_truncate('user_archive_cache')->execute();
    search_api_index_reindex('politician_archive_index');
    $sandbox['last_id'] = 1;

    $query = db_select('user_revision', 'ur');
    // join revisionable roles for user_roles
    $query->join('field_revision_field_user_roles_for_view_mode_s', 'role_tid', "role_tid.entity_type = 'user' AND role_tid.revision_id = ur.vid");
    $query->join('taxonomy_term_data', 'role', 'role.tid = role_tid.field_user_roles_for_view_mode_s_tid');
    $query->condition('ur.status', '1');
    $query->condition('role.name', array('Deputy', 'Candidate'));
    $query->condition('uid', $sandbox['last_id'], '>');
    $query->addField('ur', 'uid');
    $query->groupBy('uid');
    $result = $query->execute()->fetchAll();
    $sandbox['progress'] = 0;
    $sandbox['max'] = count($result);
    $sandbox['messages'] = [];
  }


  $limit = 10;
  $query = db_select('user_revision', 'ur');
  // join revisionable roles for user_roles
  $query->join('field_revision_field_user_roles_for_view_mode_s', 'role_tid', "role_tid.entity_type = 'user' AND role_tid.revision_id = ur.vid");
  $query->join('taxonomy_term_data', 'role', 'role.tid = role_tid.field_user_roles_for_view_mode_s_tid');
  $query->condition('ur.status', '1');
  $query->condition('role.name', array('Deputy', 'Candidate'));
  $query->condition('uid', $sandbox['last_id'], '>');
  $query->addField('ur', 'uid');
  $query->groupBy('uid');
  $query->orderBy('uid');
  $query->range(0, $limit);
  $result = $query->execute()->fetchAllAssoc('uid');

  $accounts = user_load_multiple(array_keys($result));

  // it can happen that an user could not be loaded as there might
  // be a wrong revision vid in users table - or it does not exist in
  // users table. To clean up this we check
  // if any user found in user revision query above was not loaded by
  // user_load_multiple() and if so we update the vid in users table
  // to be the highest vid in user revisions
  $diffs = array_diff(array_keys($result), array_keys($accounts));
  if (!empty($diffs)) {
    $query = db_select('user_revision', 'ur');
    $query->condition('uid', array_values($diffs));
    $query->addField('ur', 'uid');
    $query->groupBy('uid');
    $query->addExpression('MAX(ur.vid)', 'vid');
    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
      db_update('users')
        ->condition('uid', $record['uid'])
        ->fields([
          'vid' => $record['vid']
        ])
        ->execute();

      watchdog('pw_userarchives', 'The revision vid for user '. $record['uid'] .' was updated in users table to vid '. $record['vid']);
      $account = user_load($record['uid'], TRUE);

      if ($account) {
        $accounts[$record['uid']] = $account;
      }
      else {
        // if we were not able to load the user object although we updated
        // the vid in users table the user does not exist in users table.
        // This uid is a relict in user_revisions table
        db_delete('user_revision')
          ->condition('uid', $record['uid'])
          ->execute();
        watchdog('pw_userarchives', 'The user with the uid '. $record['uid'] .' which was found in user_revision table did not exist in users table. The entry in user_revision table was deleted.');
        $sandbox['progress']++;
        $sandbox['last_id'] = $record['uid'];
      }
    }
  }


  // go through the found user accounts and rebuild the user archive entries
  foreach ($accounts as $uid => $account) {
    if ($account) {
      pw_userarchives_update_by_user($account);
      $PWUser = new PWUser($account);
      $message = 'Entries updated for '. $PWUser->getFullName();

      $sandbox['message'] = $message;
    }
    $sandbox['progress']++;
    $sandbox['last_id'] = $uid;
  }


  if ($sandbox['progress'] != $sandbox['max'] && $sandbox['progress'] < $sandbox['max']) {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
  else {
    $sandbox['#finished'] = 1;
  }

  if ($sandbox['#finished'] == 1) {
    return 'The user archive table was updated for '.  $sandbox['progress'] .' politicians. it was sucessfully finished.';
  }
  else {
    return 'The user archive table was updated for '.  $sandbox['progress'] .' politicians. It is still running.';
  }
}


/**
 * Run through the user archive table and update all question/ answer counters
 *
 **/
function pw_userarchives_update_7113(&$sandbox) {

  if (!isset($sandbox['progress'])) {
    $query = db_select('user_archive_cache', 'uac');
    $query->addField('uac', 'id');
    $result = $query->execute()->fetchAll();
    $sandbox['progress'] = 0;
    $sandbox['max'] = count($result);
    $sandbox['messages'] = [];
    $sandbox['last_id'] = -1;
  }


  $limit = 30;
  $query = db_select('user_archive_cache', 'uac');
  $query->fields('uac');
  $query->condition('id',  $sandbox['last_id'], '>');
  $query->orderBy('id');
  $query->range(0, $limit);
  $records = $query->execute();

  while ($archiveEntryArray = $records->fetchAssoc() ) {
    $userArchiveEntry = \Drupal\pw_userarchives\UserArchiveEntry::createFromDataBaseArray($archiveEntryArray);
    $politicianUserRevision = $userArchiveEntry->getPoliticianUserRevision();
    $number_of_questions = count($politicianUserRevision->getQuestionsNids());
    $number_of_answers = $politicianUserRevision->getAnswersNumbers('non-standard');
    $number_of_standard_replies = $politicianUserRevision->getAnswersNumbers('standard');

    $userArchiveEntry->setNumberOfQuestions($number_of_questions);
    $userArchiveEntry->setNumberOfAnswers($number_of_answers);
    $userArchiveEntry->setNumberOfStandardReplies($number_of_standard_replies);
    $userArchiveEntry->save();

    $sandbox['progress']++;
    $sandbox['last_id'] = $userArchiveEntry->getId();
  }



  if ($sandbox['progress'] != $sandbox['max'] && $sandbox['progress'] < $sandbox['max']) {
    $sandbox['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }
  else {
    $sandbox['#finished'] = 1;
  }

  if ($sandbox['#finished'] == 1) {
    return 'The user archive table was updated for '.  $sandbox['progress'] .' entries. it was sucessfully finished.';
  }
  else {
    return 'The user archive table was updated for '.  $sandbox['progress'] .' entries. It is still running.';
  }
}

