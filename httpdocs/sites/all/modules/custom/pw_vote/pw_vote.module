<?php
/**
 * @file
 * Code for the PW Vote feature.
 */

include_once 'pw_vote.features.inc';

/**
 * Implements hook_menu().
 */
function pw_vote_menu() {
  $items['admin/config/pw/vote'] = [
    'title' => 'PW Vote',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_vote_generate_votes_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'pw_vote.admin.inc',
  ];
  $items['votes/%node'] = [
    'page callback' => 'pw_vote_by_poll_json',
    'page arguments' => [1],
    'access arguments' => ['access content'],
  ];
  return $items;
}

/**
 * Implements hook_search_api_alter_callback_info().
 */
function pw_vote_search_api_alter_callback_info() {
  $callbacks['vote_search_alter_callback'] = [
    'name' => t('Politician reference fields'),
    'description' => t('Adds fields of the related user revision to the indexed data.'),
    'class' => 'VoteSearchAlterCallback',
    'weight' => 100,
  ];
  return $callbacks;
}

/**
 * Implements hook_node_load().
 *
 * Pre-loads polls associated with the given votes to prevent loading them
 * individually, e.g. in pw_vote_to_array().
 */
function pw_vote_node_load($nodes, $types) {
  if (in_array('vote', $types)) {
    $map = function ($node) {
      if (isset($node->field_vote_node[LANGUAGE_NONE][0]['target_id'])) {
        return $node->field_vote_node[LANGUAGE_NONE][0]['target_id'];
      }
    };
    node_load_multiple(array_filter(array_map($map, $nodes)));
  }
}

/**
 * Implements hook_user_view().
 */
function pw_vote_user_view($account, $view_mode, $langcode) {
  if ($view_mode == 'full' && _pw_user_has_role($account, 'Deputy')) {
    $nids = pw_vote_by_user_revision_query($account)->execute()->fetchCol();

    if (!empty($nids)) {
      $nodes = node_load_multiple($nids);
      $inline_js = 'window.votes = ' . drupal_json_encode(array_map('pw_vote_to_array', array_values($nodes))) . ';';
      $filter_attended = function ($item) {
        return ($item->field_vote[LANGUAGE_NONE][0]['tid'] == 19670) ? FALSE : TRUE;
      };
      $account->content['votes_total'] = count($nodes);
      $account->content['votes_attended'] = count(array_filter($nodes, $filter_attended));
      $account->content['#attached']['js'][$inline_js] = [
        'scope' => 'footer',
        'type' => 'inline',
      ];
    }
  }
}


/**
 * Implements hook_user_update().
 *
 *  - Update the votes of the user in Vote Search index 
 */
function pw_vote_user_update(&$edit, $account, $category) {
  // update the votes in search index
  $nids = pw_vote_by_user_revision_query($account)->execute()->fetchCol();
  if (!empty($nids)) {
    search_api_track_item_change('node', $nids);
  }
}


/**
 * Implements hook_pw_user_revision_update
 *
 *  - Update the votes of the user in Vote Search index
 */
function pw_vote_pw_user_revision_edit($user_revision) {
  // update the votes in search index
  $nids = pw_vote_by_user_revision_query($user_revision)->execute()->fetchCol();
  if (!empty($nids)) {
    search_api_track_item_change('node', $nids);
  }
}

/**
 * Checks if user is allowed to enter form
 *
 * @return int
 *   returns uid or false otherwise
 */
function pw_vote_check_user_allowed() {

  // parameter u indicates the voting deputy
  $getparams = drupal_get_query_parameters();
  if (!isset($getparams['u'])) {
    return FALSE;
  }

  // var salt
  $salt = variable_get('pw_salt');
  if (empty($salt)) {
    return FALSE;
  }

  // load politician by salted get parameter
  $uid = db_query("SELECT uid FROM {users} WHERE MD5(CONCAT(:salt, uuid))=:key", array(':salt' => $salt, ':key' => $getparams['u']))->fetchField();

  return $uid;
}

/**
 * Implements hook_form_alter().
 */
function pw_vote_form_alter(&$form, &$form_state, $form_id) {
  // modify vote form
  if ($form_id == 'webform_client_form_57286') {

    // retrieve uid from url parameter u
    $uid = pw_vote_check_user_allowed();
    if(!$uid){
      return FALSE;
    }

    // load main node (e.g. petition)
    $node = menu_get_object();

    // retrieve parliament term id
    $parliament_tid = $node->field_parliament[LANGUAGE_NONE][0]['tid'];

    if (empty($uid) || empty($parliament_tid)) {
      return FALSE;
    }

    // load entity vote
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'vote')
      ->fieldCondition('field_vote_node', 'target_id', $node->nid)
      ->fieldCondition('field_vote_user', 'target_id', $uid)
      ->fieldCondition('field_parliament', 'tid', $node->field_parliament[LANGUAGE_NONE][0]['tid'])
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldOrderBy('field_vote', 'tid');
    $result = $query->execute();

    // vote exists
    if (isset($result['node'])) {

      // load vote and wrap it
      $nid = key($result['node']);
      $vote = node_load($nid);

      $w_vote = entity_metadata_wrapper('node', $vote);

      // changing vote is only allowed till end date or within 24 hours of last change; creating a new one is always allowed.
      if(time() > $w_vote->field_vote_node->field_petition_end_date->value() && $w_vote->field_voted->value() === TRUE && time() - $vote->changed > 86400) {
        $petition_end_date = date('d.m.Y H:i', $w_vote->field_vote_node->field_petition_end_date->value());
        $link_email = l('E-Mail', 'mailto:service@abgeordnetenwatch.de?subject=Mein Stimmverhalten bei '.$node->title, array('absolute' => TRUE));
        drupal_set_message('Die Frist zur Eintragung Ihres Stimmverhaltens ist bereits am ' . $petition_end_date . ' abgelaufen. Bitte setzen Sie sich bei Änderungswünschen mit der Redaktion von '.variable_get('site_name').' unter 040 / 317 69 10 26 oder per '.$link_email.' in Verbindung.', 'warning');
      }

      // check if already voted
      if($w_vote->field_voted->value() === TRUE){

        // set value for voting behavior
        $form['submitted']['vote']['#default_value'] = $w_vote->field_vote->name->value();
      }

      // theme and set portrait
      if ($w_vote->field_vote_user->field_user_picture->value()) {
        $portrait_uri = $w_vote->field_vote_user->field_user_picture->file->value()->uri;
      }
      else {
        $portrait_info = field_info_field('field_user_picture');
        $file = file_load($portrait_info['settings']['default_image']);
        $portrait_uri = $file->uri;
      }
      $portrait = theme('image_style', array(
          'path' => $portrait_uri,
          'style_name' => 'width_medium',
        )
      );
      $form['submitted']['portrait']['#markup'] = $portrait;

      // replace parameters in welcome text
      switch ($w_vote->field_vote_user->field_user_gender->value()) {
        case 'female':
          $salutation = 'Sehr geehrte Frau ' . $w_vote->field_vote_user->field_user_lname->value();
          break;
        case 'male':
          $salutation = 'Sehr geehrter Herr ' . $w_vote->field_vote_user->field_user_lname->value();
          break;
        default:
          $salutation = 'Guten Tag ' . $w_vote->field_vote_user->field_user_fname->value() . ' ' . $w_vote->field_vote_user->field_user_lname->value();
          break;
      }
      $welcome_text = $form['submitted']['welcome']['#markup'];
      $welcome_text = format_string($welcome_text, array(
        '@salutation' => $salutation,
        '@welcome_message' => $w_vote->field_vote_node->field_petition_welcome_message->value(),
      ));
      $welcome_text = format_string($welcome_text, array(
        '@node_title' => $node->title,
      ));
      $form['submitted']['welcome']['#markup'] = $welcome_text;

      // set statement if exists
      $form['submitted']['fieldset_statement']['statement_wrapper']['statement']['#default_value'] = $w_vote->body->value->value();

      // set hidden field
      $form['submitted']['vote_node_id']['#value'] = $w_vote->getIdentifier();

      // add custom validation
      $form['#validate'][] = 'pw_vote_form_validate';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pw_vote_form_pw_vote_poll_filters_form_alter(&$form, &$form_state) {
  $form['form_build_id']['#access'] = FALSE;
  $form['form_token']['#access'] = FALSE;
  $form['form_id']['#access'] = FALSE;
}


/**
 * Implements hook_form_validate().
 */
function pw_vote_form_validate(&$form, &$form_state, $form_id) {

  // petition end date reached
  $uid = pw_vote_check_user_allowed();
  $node = node_load($form['submitted']['vote_node_id']['#value']);
  $w_vote = entity_metadata_wrapper('node', $node);
  if(!$uid || time() > $w_vote->field_vote_node->field_petition_end_date->value() && $w_vote->field_voted->value() === TRUE && time() - $node->changed > 86400) {
    form_set_error('error', 'Die Frist zur Eintragung ist bereits abgelaufen.');
  }
}

/**
 * Implements hook_webform_submission_presave().
 *
 * Saves vote on webform submission.
 */
function pw_vote_webform_submission_insert($node, $submission) {

  // node id of webform "Ihr Standpunkt"
  if ($node->nid == 57286) {

    // map form values
    $form_values = _pw_webform_get_keyed_fields($node, $submission);

    // load node and wrap
    $vote = node_load($form_values['vote_node_id']);
    $w_vote = entity_metadata_wrapper('node', $vote);

    // revision settings
    $vote->revision = 1;
    $vote->log = 'This node was programmatically updated on ' . date('c');

    // set author
    $vote->uid = $w_vote->field_vote_user->uid->value();

    // set title
    $user_fullname = $w_vote->field_vote_user->field_user_fname->value() . ' ' . $w_vote->field_vote_user->field_user_lname->value();
    $vote->title = 'Vote by ' . $user_fullname;

    // voting behavior
    $terms = taxonomy_get_term_by_name($form_values['vote'], 'votes');
    $vote->field_vote[$vote->language][0]['tid'] = key($terms);

    // set vote as voted
    $vote->field_voted[$vote->language][0]['value'] = 1;

    // statement
    $vote->body[$vote->language][0]['value'] = $form_values['statement'];

    // save node
    node_save($vote);

    // clear page cache
    $nodeurl = url(request_uri(),  array('absolute' => TRUE));
    $nodeurl = urldecode($nodeurl);
    cache_clear_all($nodeurl, 'cache_page');

    // politican wants a copy
    $service_account = 'service@abgeordnetenwatch.de';
    if($form_values['copy_email'] == 'send_copy') {
      drupal_mail('pw_vote', microtime(), $w_vote->field_vote_user->mail->value(), language_default(), array('w_vote' => $w_vote), $service_account, $send = TRUE);
    }

    // send a copy to editors
    drupal_mail('pw_vote', microtime(), $service_account, language_default(), array('w_vote' => $w_vote), $service_account, $send = TRUE);
  }

}

/**
 * Implements hook_mail().
 *
 * create mail
 */
function pw_vote_mail($key, &$message, $params) {

  // entity wrapper
  $w_vote = $params['w_vote'];

  // set subject
  $message['subject'] = 'Vielen Dank für Ihre Teilnahme an PetitionPlus!';

  // recipient name
  $recipient_name = $w_vote->field_vote_user->field_user_fname->value() . ' ' . $w_vote->field_vote_user->field_user_lname->value();

  // salutation
  switch ($w_vote->field_vote_user->field_user_gender->value()) {
    case 'female':
      $salutation = 'Sehr geehrte Frau ' . $w_vote->field_vote_user->field_user_lname->value();
      break;
    case 'male':
      $salutation = 'Sehr geehrter Herr ' . $w_vote->field_vote_user->field_user_lname->value();
      break;
    default:
      $salutation = 'Guten Tag ' . $w_vote->field_vote_user->field_user_fname->value() . ' ' . $w_vote->field_vote_user->field_user_lname->value();
      break;
  }

  // url to node e.g. petition
  $node_url = url('node/' . $w_vote->field_vote_node->nid->value(), array('absolute' => TRUE));

  // petition number of signings
  $petition_signings = number_format($w_vote->field_vote_node->field_petition_signings->value(), 0, ',', '.');

  // deadline for editing
  $deadline_for_editing = date('d.m.Y H:i', $w_vote->field_vote_node->field_petition_end_date->value());

  // date when we'll show the results (hardcoded: plus one day)
  $date_show_results = date('d.m.Y', $w_vote->field_vote_node->field_petition_end_date->value()+86400);

  // politicians vote
  $your_vote = $w_vote->field_vote->field_votes_label->value();

  // politicians statement
  $your_statement = $w_vote->body->value->value();

  // theme & set body
  $message['body'][] = theme('mail_thank_you', array(
      'salutation' => $salutation,
      'node_url' => $node_url,
      'petition_signings' => $petition_signings,
      'deadline_for_editing' => $deadline_for_editing,
      'date_show_results' => $date_show_results,
      'your_vote' => $your_vote,
      'your_statement' => $your_statement,
    )
  );
}

/**
 *  Implements hook_block_info().
 */
function pw_vote_block_info() {
  $blocks['profile'] = [
    'info' => t('Voting behavior'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  $blocks['profile_petitions'] = [
    'info' => t('Voting behavior (PetitionPlus)'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  $blocks['poll'] = [
    'info' => t('Voting behavior by poll'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  $blocks['poll_filters'] = [
    'info' => t('Voting behavior by poll filters'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  $blocks['poll_charts'] = [
    'info' => t('Voting behavior by poll charts'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  return $blocks;
}

/**
 *  Implements hook_block_view().
 */
function pw_vote_block_view($delta, $arguments = array()) {
  switch ($delta) {
    case 'profile':
      $block = pw_vote_profile_block('poll');
      break;
    case 'profile_petitions':
      $block = pw_vote_profile_block('pw_petition');
      break;
    case 'poll':
      $block = pw_vote_poll_block();
      break;
    case 'poll_filters':
      $block = pw_vote_poll_filters_block();
      break;
    case 'poll_charts':
      $block = pw_vote_poll_charts_block();
      break;
    default:
      return [];
  }
  return $block;
}

/**
 * Page callback: Delivers JSON representation of votes cast on a poll.
 *
 * @param $node
 *   The node of type poll.
 */
function pw_vote_by_poll_json($node) {
  if ($node->type != 'poll') {
    return MENU_NOT_FOUND;
  }

  $map = function ($item) {
    $voted_dict = [
      19667 => t('Voted yes') . '<i class="icon icon-ok"></i>',
      19668 => t('Voted no') . '<i class="icon icon-close"></i>',
      19669 => t('Abstained') . '<i class="icon icon-circle-o"></i>',
      19670 => t('Did not vote') . '<i class="icon icon-minus"></i>',
    ];

    $profile_picture = theme('image_style', ['path' => $item['fields']['politician_picture_uri'], 'style_name' => 'square_small']);
    if (isset($item['fields']['politician_political_faction'])) {
      $political_faction = $item['fields']['politician_political_faction'];
    }
    else {
      $political_faction = '';
    }
    if (isset($item['fields']['politician_constituency_name'])) {
      $constituency = $item['fields']['politician_constituency_name'];
    }
    else {
      $constituency = '';
    }

    return [
      'politician_picture' => '<span>' . l($profile_picture, $item['fields']['politician_uri'], ['html' => TRUE]) . '</span>',
      'politician_full_name' => l($item['fields']['politician_full_name'][0], $item['fields']['politician_uri']),
      'politician_lname' => $item['fields']['politician_lname'],
      'politician_political_faction' => $political_faction,
      'politician_constituency_name' => $constituency,
      'field_vote' => $item['fields']['field_vote'],
      'field_vote_display' => $voted_dict[$item['fields']['field_vote']],
    ];
  };

  $q = pw_vote_by_poll_search($node);

  if (isset(drupal_get_query_parameters()['keys'])) {
    $q->keys(drupal_get_query_parameters()['keys']);
  }

  if (isset(drupal_get_query_parameters()['political_faction'])) {
    $f = new SearchApiQueryFilter('OR', ['facet:politician_political_faction']);
    foreach (drupal_get_query_parameters()['political_faction'] as $value) {
      $f->condition('politician_political_faction', $value);
    }
    $q->filter($f);
  }

  if (is_array(drupal_get_query_parameters()['field_vote'])) {
    $f = new SearchApiQueryFilter('OR', ['facet:field_vote']);
    foreach (drupal_get_query_parameters()['field_vote'] as $value) {
      $f->condition('field_vote', $value);
    }
    $q->filter($f);
  }

  $response = $q->execute();
  $output = [
    'facets' => $response['search_api_facets'],
    'queryRecordCount' => $response['result count'],
    'records' => array_map($map, array_values($response['results'])),
  ];
  drupal_json_output($output);
}

/**
 * Displays votes section of a profile.
 *
 * @return array
 *   The block render array.
 */
function pw_vote_profile_block($type = 'poll') {
  $block = [];

  if (menu_get_item()['page_callback'] == 'user_revision_show') {
    $map = menu_get_item()['original_map'];
    $account = user_revision_load($map[1], $map[3]);
  }
  else {
    $account = menu_get_object('user');
  }

  if (!$account || !_pw_user_has_role($account, 'Deputy')) {
    return $block;
  }

  $nids = pw_vote_by_user_revision_query($account, $type)
    ->orderBy('decision_date', 'DESC')
    ->extend('PagerDefault')
    ->limit(6)
    ->execute()
    ->fetchCol();


  if (!empty($nids)) {
    $nodes = node_load_multiple($nids);
    switch($type){
      case 'pw_petition':
      $block['subject'] = t('PetitionPlus');
      break;
      default:
      $block['subject'] = t('Voting behavior');
      break;
    }

    $block['content'] = node_view_multiple($nodes, 'embedded');
    $block['content']['pager'] = [
      '#theme' => 'pager',
      '#element' => PagerDefault::$maxElement - 1,
      '#weight' => 100,
    ];
  }

  return $block;
}

/**
 * Displays voting behaviors of deputies on a poll.
 *
 * @return array
 *   The block render array.
 */
function pw_vote_poll_block() {
  $block = [];

  $node = menu_get_object();

  if (!$node || $node->type != 'poll') {
    return $block;
  }

  $block['content'] = [
    '#theme' => 'table__poll_votes',
    '#header' => [
      ['data' => '', 'data-dynatable-column' => 'politician_picture'],
      ['data' => t('Name'), 'data-dynatable-column' => 'politician_full_name', 'data-dynatable-sorts' => 'politician_lname'],
      ['data' => t('Political faction'), 'data-dynatable-column' => 'politician_political_faction'],
      ['data' => t('Constituency'), 'data-dynatable-column' => 'politician_constituency_name'],
      ['data' => t('Voted'), 'data-dynatable-column' => 'field_vote_display'],
    ],
    '#rows' => [[]],
    '#sticky' => FALSE,
    '#attached' => [
      'js' => [
        0 => [
          'data' => ['pw_vote' => ['node' => $node->nid]],
          'type' => 'setting'
        ],
      ],
    ],
  ];

  return $block;
}

/**
 * Displays filters for voting behaviors of deputies on a poll.
 *
 * @return array
 *   The block render array.
 */
function pw_vote_poll_filters_block() {
  $block = [];

  $node = menu_get_object();

  if (!$node || $node->type != 'poll') {
    return $block;
  }

  $facets = pw_vote_by_poll_search($node)->execute()['search_api_facets'];
  $block['content'] = drupal_get_form('pw_vote_poll_filters', $facets);

  return $block;
}

/**
 * Displays charts for polls.
 *
 * @return array
 *   The block render array.
 */
function pw_vote_poll_charts_block() {
  $block = [];
  $node = menu_get_object();

  if (!$node || $node->type != 'poll') {
    return $block;
  }

  $block['subject'] = t('Poll charts');
  $block['content'] = url('votes/' . $node->nid);

  return $block;
}

/**
 * Form constructor for the vote filters form on poll pages.
 */
function pw_vote_poll_filters($form, &$form_state, $facets) {
  $parameters = drupal_get_query_parameters();

  $form['#method'] = 'get';
  $form['#action'] = url(current_path());
  $form['#theme'] = 'filterbar';

  if (strpos($parliament->name, 'EU') === 0) {
    $keys_placeholder = t('Enter a locality or name');
  }
  else {
    $keys_placeholder = t('Enter a postal code, locality or name');
  }

  $form['keys'] = [
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#default_value' => isset($parameters['keys']) ? $parameters['keys'] : '',
    '#attributes' => ['placeholder' => $keys_placeholder],
  ];

  $political_faction_options = _pw_profiles_facet_values($facets['politician_political_faction']);

  $form['political_faction'] = [
    '#type' => 'checkboxes',
    '#title' => t('Political faction'),
    '#title_display' => 'invisible',
    '#options' => array_combine($political_faction_options, $political_faction_options),
    '#default_value' => empty($parameters['political_faction']) ? '' : $parameters['political_faction'],
    '#dropdown' => TRUE,
  ];

  $vote_options = [
    19667 => t('Voted yes'),
    19668 => t('Voted no'),
    19669 => t('Abstained'),
    19670 => t('Did not vote'),
  ];

  $form['field_vote'] = [
    '#type' => 'checkboxes',
    '#title' => t('Voting behavior'),
    '#title_display' => 'invisible',
    '#options' => $vote_options,
    '#default_value' => empty($parameters['field_vote']) ? '' : $parameters['field_vote'],
    '#dropdown' => FALSE,
  ];

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter votes'),
  );

  return $form;
}

/**
 * Implements hook_theme().
 */
function pw_vote_theme() {
  return [
    'mail_thank_you' => [
      'template' => 'mail-thank-you',
    ],
  ];
}

/**
 * Finds and mark votes that deviate from the fractions majority opinion.
 *
 * @param int $nid
 *   Node ID of poll or petition.
 */
function pw_vote_mark_deviant_votes($nid) {
  // Load poll/petition node
  $p_node = node_load($nid);
  if (!($p_node->type == "poll" || $p_node->type == "pw_petition")) {
    return;
  }
  $parliament = taxonomy_term_load($p_node->field_parliament['und'][0]['tid'])->name;

  // Get all users of that parliament at the time of the poll
  $query = db_select('user_archive_cache', 'uac');
  $query ->fields('uac', array('uid', 'fraction_name'))
         ->isNotNull('fraction_name');
  $date = null;
  if ($p_node->type == "poll"){
    $date = $p_node->field_poll_date['und'][0]['value'];
  }
  elseif ($p_node->type == "pw_petition") {
    $date = $p_node->field_petition_end_date['und'][0]['value'];
  }
  _pw_uac_add_conditions($query, array(
      'parliament' => $parliament,
      'roles' => 'deputy',
      'date' => date($date),
    )
  );
  $uac_result = $query->execute()->fetchAll();

  // Generate array with user/fraction/vote information
  foreach($uac_result as $key => $user) {
    $efq = new EntityFieldQuery();
    $efq->entityCondition('entity_type', 'node')
        ->entityCondition('bundle','vote')
        ->fieldCondition('field_vote_user', 'target_id', $user->uid, '=')
        ->fieldCondition('field_vote_node', 'target_id', $nid, '=');
    $votes = $efq->execute();
    if (empty($votes)) {
      echo "";
      unset($uac_result[$key]);
      continue;
    }
    $user->vote_id = (String) array_keys($votes['node'])[0];
    $user->vote_voice_tid = node_load($user->vote_id)->field_vote['und'][0]['tid'];
  }

  // Count votes for each fraction
  $vote_sheet = array();
  foreach($uac_result as $key => $user) {
    if (!$vote_sheet[$user->fraction_name]){
      $vote_sheet[$user->fraction_name] = array('19667' => 0, '19668' => 0, '19669' => 0);
    }
    if (in_array($user->vote_voice_tid,array_keys($vote_sheet[$user->fraction_name]))){
      $vote_sheet[$user->fraction_name][$user->vote_voice_tid]++;
    }
  }

  // Remove majority votes from vote sheet
  foreach($vote_sheet as $vs_fraction => &$values){
    $max = max($values);
    foreach ($values as $key => $value){
      if ($value == $max) {
        unset($values[$key]);
      }
    }
  }
  // Mark the votes still left in the sheet
  foreach($uac_result as $uac_row){
      $values = $vote_sheet[$uac_row->fraction_name];
      // Load current vote node
      $vote_to_mark = node_load($uac_row->vote_id);
      if (in_array($uac_row->vote_voice_tid,array_keys($values))){
        // Mark vote as deviant
        $vote_to_mark->field_deviant_vote['und'][0]['value'] = 1;
      }
      else {
        $vote_to_mark->field_deviant_vote['und'][0]['value'] = 0;
      }
      node_save($vote_to_mark);
  }
}

/**
 * Returns query for all votes of the given account version.
 *
 * @param object $account
 *   The user account (version).
 *
 * @return EntityFieldQuery
 *   The query object
 */
function pw_vote_by_user_revision_query($account, $node_target_type = 'poll') {
  $q = db_select('node', 'n');
  $q->fields('n', ['nid']);
  $q->join('field_data_field_vote_user', 'u', 'n.nid = u.entity_id');
  $q->join('field_data_field_parliament', 'p', 'n.nid = p.entity_id');
  $q->join('field_data_field_vote_node', 'vn', 'n.nid = vn.entity_id');
  $q->join('node', 'n_target', 'vn.field_vote_node_target_id = n_target.nid');
  if($node_target_type == 'pw_petition') {
    $q->join('field_data_field_petition_end_date', 'vnd', 'vn.field_vote_node_target_id = vnd.entity_id');
    $q->addField('vnd', 'field_petition_end_date_value', 'decision_date');
  }
  else {
    $q->join('field_data_field_poll_date', 'vnd', 'vn.field_vote_node_target_id = vnd.entity_id');
    $q->addField('vnd', 'field_poll_date_value', 'decision_date');
  }
  $q->condition('n.type', 'vote');
  $q->condition('n.status', NODE_PUBLISHED);
  $q->condition('u.field_vote_user_target_id', $account->uid);
  $q->condition('n_target.type', $node_target_type);
  $q->condition('n_target.status', NODE_PUBLISHED);
  $q->condition('p.field_parliament_tid', pw_profiles_parliament($account)->tid);

  return $q;
}

/**
 * Returns search query for all votes cast on the given poll.
 *
 * @param object $node
 *   The poll node.
 *
 * @return SearchApiQuery
 *   The search query.
 */
function pw_vote_by_poll_search($node) {
  $facets = pw_vote_by_poll_search_facets();
  return search_api_query('vote_index', ['search_api_facets' => $facets])
    ->condition('field_vote_node', $node->nid);
}

/**
 * Returns list of facets for the voting behavior search.
 *
 * @return array
 *   An associative array to be used as facets option for a query.
 */
function pw_vote_by_poll_search_facets() {
  $common = ['limit' => -1, 'min_count' => 1, 'missing' => TRUE, 'operator' => 'or'];
  return [
    'field_vote' => ['field' => 'field_vote'] + $common,
    'politician_political_faction' => ['field' => 'politician_political_faction'] + $common,
  ];
}

/**
 * Returns array representation of vote for serialization.
 *
 * @param object $node
 *   The vote node.
 * @return array
 *   The array representation.
 */
function pw_vote_to_array($node) {
  if (!empty($node->field_vote_node[LANGUAGE_NONE])) {
    $poll = node_load($node->field_vote_node[LANGUAGE_NONE][0]['target_id']);
  }
  else {
    $poll = NULL;
  }
  $vote = taxonomy_term_load($node->field_vote[LANGUAGE_NONE][0]['tid']);
  $data = [
    'id' => $node->nid,
    'title' => isset($poll) ? $poll->title : NULL,
    'date' => isset($poll->field_poll_date[LANGUAGE_NONE][0]['value']) ? $poll->field_poll_date[LANGUAGE_NONE][0]['value'] : NULL,
    'vote' => $vote->name,
  ];
  return $data;
}
