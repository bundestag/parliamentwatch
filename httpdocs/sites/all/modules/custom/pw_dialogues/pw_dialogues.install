<?php

/**
 * @file
 * Sets the module weight.
 */

/**
 * Implements hook_enable().
 */
function pw_dialogues_enable() {
  $job_scheduler_weight = db_query('SELECT weight FROM {system} WHERE name = :job_scheduler', array(':job_scheduler' => 'job_scheduler'))->fetchField();

  db_update('system')
    ->fields(array('weight' => $job_scheduler_weight + 1))
    ->condition('name', basename(__FILE__, '.install'))
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function pw_dialogues_uninstall() {
  variable_del('pw_dialogues_importer_last_import');
  variable_del('pw_dialogues_importer_source');
}

/**
 * Configure display of dialogue nodes and comments.
 */
function pw_dialogues_update_7001() {
  $topic = field_info_instance('node', 'field_dialogue_topic', 'dialogue');
  $topic['display']['default']['label'] = 'inline';
  $topic['display']['default']['type'] = 'taxonomy_term_reference_plain';
  field_update_instance($topic);
}

/**
 * Configure topic facet.
 */
function pw_dialogues_update_7002() {
  $adapter = facetapi_adapter_load('search_api@node_index');
  $facet = facetapi_facet_load('field_dialogue_topic', 'search_api@node_index');

  $block_realm = facetapi_realm_load('block');
  $adapter->getFacet($facet)->getSettings($block_realm)->settings['widget'] = 'facetapi_checkbox_links';
  facetapi_save_facet_enabled($adapter, $block_realm, $facet);

  $adapter->getFacet($facet)->getSettings(NULL)->settings['operator'] = 'or';
  facetapi_save_facet_disabled($adapter, array(), $facet);
}

/**
 * Add body to node index.
 */
function pw_dialogues_update_7003() {
  $index = search_api_index_load('node_index');
  $options = $index->options;
  $options['fields'] = array_merge($index->options['fields'], array(
    'body:value' => array('type' => 'text'),
    'comments:field_dialogue_comment_body:value' => array('type' => 'text'),
  ));
  $options['additional fields'] = array(
    'comments' => 'comments',
    'comments:field_dialogue_comment_body' => 'comments:field_dialogue_comment_body',
  );
  $index->update(array('options' => $options));
}


/**
 * Store question attachments in new file field
 */
function pw_dialogues_update_7010() {

  $query = db_select('field_data_field_dialogue_documents', 'd')
    ->condition('bundle', 'dialogue')
    ->fields('d')
    ->execute();
  $info = field_info_instance('node', 'field_dialogue_attachments', 'dialogue');
  $allowed_extensions = explode(' ', $info["settings"]["file_extensions"]);

  while ($record = $query->fetchAssoc()) {
    $dialogue_node = node_load($record["entity_id"]);
    $file_pathinfo = pathinfo($record["field_dialogue_documents_url"]);

    if ($dialogue_node && in_array($file_pathinfo['extension'], $allowed_extensions)) {

      $file_temp = file_get_contents($record["field_dialogue_documents_url"]);
      if ($file_temp) {
        $drupal_file = file_save_data($file_temp, 'private://'. $info["settings"]["file_directory"] .'/'. $file_pathinfo["basename"],FILE_EXISTS_RENAME);
        if ($drupal_file) {
          $file = [
            'fid' => $drupal_file->fid,
            'display' => 1,
            'filename' => $drupal_file->filename,
            'filemime' => $drupal_file->filemime,
            'uri' => $drupal_file->uri,
            'status' => 1,
            'uid' => 1
          ];
          $dialogue_node->field_dialogue_attachments[LANGUAGE_NONE][] = $file;
          node_save($dialogue_node);
        }
      }
    }
  }
}
