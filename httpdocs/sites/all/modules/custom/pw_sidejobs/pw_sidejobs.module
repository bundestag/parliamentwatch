<?php

/**
 * @file
 * Code for the PW Sidejobs feature.
 */

include_once 'pw_sidejobs.features.inc';

/**
 * Implements hook_node_view().
 */
function pw_sidejobs_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'sidejob' && $view_mode == 'embedded') {
    $base_income_range = pw_sidejobs_base_income_range(pw_sidejobs_classification($node));
    $income_range = pw_sidejobs_income_range($node);
    $income_interval = pw_sidejobs_interval($node);
    $date = pw_sidejobs_date($node);
    $enddate_is_today = isset($date[1]) && $date[1]->format('Y-m-d') == date('Y-m-d');
    $field_parliament_valid = field_get_items('taxonomy_term', pw_globals_parliament($node), 'field_parliament_valid');
    $date_parliament_start = end($field_parliament_valid)['value'];

    $node->content['field_sidejob_date'] = '';
    if (substr($date_parliament_start, 0, 10) == $date[0]->format('Y-m-d') && $income_interval == 0 || $date[0]->format('n') == 1 && $date[0]->format('j') == 1) {
      $node->content['field_sidejob_date'] = $date[0]->format('Y');
    }
    else {
      if ($income_interval == 1) {
        if ($enddate_is_today) {
          $node->content['field_sidejob_date'] = t('since').' '.$date[0]->format('d.m.Y');
        }
        else {
          $node->content['field_sidejob_date'] = $date[0]->format('d.m.Y');
        }
      }
    }

    if (isset($date[1]) && !$enddate_is_today) {
      if (!empty($node->content['field_sidejob_date'])) {
        $node->content['field_sidejob_date'] .= '–' . $date[1]->format('d.m.Y');
      }
      else {
        $node->content['field_sidejob_date'] = t('until').' '.$date[1]->format('d.m.Y');
      }
    }

    if (!empty($income_range)) {
      $min = number_format($income_range[0], '0', ',', '.');
      $max = number_format($income_range[1], '0', ',', '.');
      $node->content['income_range'] = $min . '–' . $max . ' €';
      $min = number_format($base_income_range[0], '0', ',', '.');
      $max = number_format($base_income_range[1], '0', ',', '.');
      $node->content['base_income_range'] = $min . '–' . $max . ' €';
    }
    else {
      $node->content['income_range'] = '';
    }
  }
}

/*
 * Implements hook_cron()
 */
function pw_sidejobs_cron(){

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'sidejob')
    ->fieldCondition('field_sidejob_income_interval', 'value', '0', '>')
    ->propertyCondition('status', NODE_PUBLISHED);
  $result = $query->execute();

  if($result['node']){
    foreach(node_load_multiple(array_keys($result['node'])) as $node){
      node_save($node);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function pw_sidejobs_block_info() {
  $blocks['profile'] = [
    'info' => t('Sideline jobs'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pw_sidejobs_block_view($delta = '') {
  switch ($delta) {
    case 'profile':
      return pw_sidejobs_profile_block();
    default:
      return [];
  }
}

/**
 * Displays sideline jobs section of a profile.
 */
function pw_sidejobs_profile_block() {
  $block = [];

  if (menu_get_item()['page_callback'] == 'user_revision_show') {
    $map = menu_get_item()['original_map'];
    $account = user_revision_load($map[1], $map[3]);
  }
  else {
    $account = menu_get_object('user');
  }

  if (!$account) {
    return $block;
  }

  $result = pw_sidejobs_by_user_revision_query($account)
    ->execute();

  if (!empty($result['node'])) {
    $nodes = node_load_multiple(array_keys($result['node']));
    $block['subject'] = t('Sideline jobs');
    $block['content'] = node_view_multiple($nodes, 'embedded');
  }

  return $block;
}

/**
 * Returns all sideline jobs of the given account.
 *
 * @param object $account
 *   The user entity
 *
 * @return array
 *   The sideline jobs associated with the user entity
 */
function pw_sidejobs_load($account) {
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $q->entityCondition('bundle', 'sidejob');
  $q->fieldCondition('field_politician', 'target_id', $account->uid);
  $q->propertyOrderBy('changed', 'DESC');

  $result = $q->execute();

  if (!empty($result['node'])) {
    $nodes = node_load_multiple(array_keys($result['node']));
  }
  else {
    $nodes = [];
  }

  return $nodes;
}


/**
 * Returns query for all sideline jobs of the given account version.
 *
 * @param object $account
 *   The user account (version).
 *
 * @return EntityFieldQuery
 *   The query object.
 */
function pw_sidejobs_by_user_revision_query($account) {
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $q->entityCondition('bundle', 'sidejob');
  $q->propertyCondition('status', NODE_PUBLISHED);
  $q->fieldCondition('field_politician', 'target_id', $account->uid);
  $q->fieldCondition('field_parliament', 'tid', pw_profiles_parliament($account)->tid);

  return $q;
}

/**
 * Returns the interval at which the income for the given sidejob is received.
 *
 * @param $node
 *   The node of type sidejob.
 *
 * @return int
 *   The interval at which the income is received.
 */
function pw_sidejobs_interval($node) {
  $items = field_get_items('node', $node, 'field_sidejob_income_interval');

  if ($items) {
    $interval = $items[0]['value'];
  }
  else {
    $interval = 0;
  }

  return $interval;
}

/**
 * Returns the classification of the given sideline job.
 *
 * @param $node
 *   The node of type sidejob.
 *
 * @return int
 *   The classification.
 */
function pw_sidejobs_classification($node) {
  $items = field_get_items('node', $node, 'field_sidejob_classification');

  if ($items) {
    $classification = $items[0]['value'];
  }
  else {
    $classification = 0;
  }

  return $classification;
}

/**
 * Returns the range of income accumulated with the given sideline job.
 *
 * If the income range cannot be computed an empty array is returned.
 *
 * @param $node
 *   The node of type sidejob.
 *
 * @return array
 *   An array with the minimum and maximum income.
 */
function pw_sidejobs_income_range($node) {
  $income_range = pw_sidejobs_base_income_range(pw_sidejobs_classification($node));
  $multiplier = pw_sidejobs_multiplier(pw_sidejobs_interval($node), pw_sidejobs_date($node));
  return array_filter(array_map(function ($value) use ($multiplier) { return $value * $multiplier; }, $income_range));
}

/**
 * Returns the income range for the given classification of a sideline job.
 *
 * @param int $classification
 *   The classification of a sideline job.
 *
 * @return array
 *   An array with the minimum and maximum income.
 */
function pw_sidejobs_base_income_range($classification) {
  switch ($classification) {
    case 1:
      return [1000, 3500];
    case 2:
      return [3500, 7000];
    case 3:
      return [7000, 15000];
    case 4:
      return [15000, 30000];
    case 5:
      return [30000, 50000];
    case 6:
      return [50000, 75000];
    case 7:
      return [75000, 100000];
    case 8:
      return [100000, 150000];
    case 9:
      return [150000, 250000];
    case 10:
      return [250000, 250000];
    default:
      return [];
  }
}

/**
 * Returns the date or period for the given sideline job.
 *
 * @param $node
 *   The node of type sidejob.
 *
 * @return DateTime[]
 *   An array with one or two DateTime objects.
 */
function pw_sidejobs_date($node) {
  $dates_start = [];
  $dates_end = [date('Y-m-d 00:00:00')];

  $field_parliament_valid = field_get_items('taxonomy_term', pw_globals_parliament($node), 'field_parliament_valid');
  array_push($dates_start, end($field_parliament_valid)['value']);
  array_push($dates_end, end($field_parliament_valid)['value2']);

  $field_date_start = field_get_items('node', $node, 'field_sidejob_date_start');
  if ($field_date_start !== FALSE) {
    array_push($dates_start, $field_date_start[0]['value']);
  }

  $field_date_end = field_get_items('node', $node, 'field_sidejob_date_end');
  if ($field_date_end !== FALSE) {
    array_push($dates_end, $field_date_end[0]['value']);
  }

  $politician = pw_globals_politician($node);

  $field_user_joined = field_get_items('user', $politician, 'field_user_joined');
  if ($field_user_joined !== FALSE) {
    array_push($dates_start, $field_user_joined[0]['value']);
  }

  $field_user_retired = field_get_items('user', $politician, 'field_user_retired');
  if ($field_user_retired !== FALSE) {
    array_push($dates_end, $field_user_retired[0]['value']);
  }

  $date[] = new DateTime(max(array_filter($dates_start)));

  if (pw_sidejobs_interval($node) > 0) {
    $date[] = new DateTime(min(array_filter($dates_end)));
  }

  return $date;
}

/**
 * Returns the multiplier for the given sideline job.
 *
 * This number is used to calculate the accumulated income for the applicable
 * date range.
 *
 * @param int $interval
 *   The interval at which income is received.
 * @param DateTime[] $date
 *   The date or period in which the income is received.
 *
 * @return int
 *   The multiplier.
 */
function pw_sidejobs_multiplier($interval, $date) {
  if ($interval == 0) {
    return 1;
  }

  if ($date[0] > $date[1]) {
    return 0;
  }

  if ($interval == 12) {
    if ($date[0]->format('m-d') != '01-01') {
      $date_start = new DateTime(($date[0]->format('Y') + 1).'-01-01');
      $datetime_diff = $date_start->diff($date[1]);
    }
    else {
      $datetime_diff = $date[0]->diff($date[1]);
    }
    $multiplier = $datetime_diff->y;
    $multiplier++;
  }
  else {
    $date_start = new DateTime($date[0]->format('Y-m').'-01');
    $datetime_diff = $date_start->diff($date[1]);
    $multiplier = $datetime_diff->y * 12 + $datetime_diff->m;
    if ($datetime_diff->d > 0) {
      $multiplier++;
    }
  }

  return (int) $multiplier;
}
