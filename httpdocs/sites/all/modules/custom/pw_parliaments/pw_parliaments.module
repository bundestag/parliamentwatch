<?php
/**
 * @file
 * Code for the PW Parliaments feature.
 */

include_once 'pw_parliaments.features.inc';

/**
 * Implements hook_taxonomy_term_presave().
 */
function pw_parliaments_taxonomy_term_presave($term) {
  // check if is parliaments vocabulary
  if ($term->vid == 18 && module_exists('pw_userarchives')) {
    db_delete('user_archive_cache')
      ->condition('parliament_name', $term->original->name)
      ->execute();
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function pw_parliaments_taxonomy_term_update($term) {
  // check if is parliaments vocabulary
  if ($term->vid == 18 && module_exists('pw_userarchives')) {
    pw_userarchives_cron_ALT();
    if (module_exists('pw_cache')) {
      $query = db_select('user_archive_cache', 'uac')
        ->fields('uac', array('user_name', 'vid', 'actual_profile'))
        ->condition('parliament_name', $term->name);
      $result = $query->execute();
      if ($result->rowCount() > 0) {
        while ($row = $result->fetchAssoc()) {
          if ($row['actual_profile'] == 1) {
            $expire_paths[] = 'profile/' . $row['user_name'];
          } else {
            $expire_paths[] = 'profile/' . $row['user_name'] . '/archive/' . $row['vid'];
          }
        }
        pw_cache_expire_cache($expire_paths);
      }
    }
  }
}

/**
 * Implements hook_block_list_alter().
 *
 * Removes title block from taxonomy term pages of funded parliaments.
 */
function pw_parliaments_block_list_alter(&$blocks) {
  $term = menu_get_object('taxonomy_term', 2);

  if (!isset($term) || !pw_globals_parliament_is_funded($term)) {
    return;
  }

  foreach ($blocks as $key => $block) {
    if ($block->module == 'pw_globals' && $block->delta == 'title') {
      unset($blocks[$key]);
    }
  }
}

/**
 * Returns the election date of the given parliament.
 *
 * @param object $term
 *   The parliament term.
 *
 * @return DateTime
 *   The election date.
 */
function pw_parliaments_election_date($term) {
  $date = NULL;
  $items = field_get_items('taxonomy_term', $term, 'field_parliament_election');

  if ($items) {
    $date = new DateTime($items[0]['value'], new DateTimeZone($items[0]['timezone']));
  }

  return $date;
}

/**
 * Returns the start date of the legislative period (Wahlperiode).
 *
 * It is assumed that the value of the second item of field_parliament_valid
 * holds the start date of the legislative period. This assumption might not
 * be accurate, but the value is used for this purpose nevertheless.
 *
 * @param $term
 *   The parliament term.
 *
 * @return DateTime
 *   The start date of the legislative period.
 */
function pw_parliaments_start_date($term) {
  $date = NULL;

  $items = field_get_items('taxonomy_term', $term, 'field_parliament_valid');
  if (is_array($items) && count($items == 2)) {
    $date = new DateTime($items[1]['value'], new DateTimeZone($items[1]['timezone']));
  }

  return $date;
}

/**
 * Returns the previous iteration of the given parliament
 *
 * @param object $term
 *   The parliament term.
 *
 * @return object
 *   The previous iteration of the given parliament.
 */
function pw_parliaments_previous($term) {
  $items = field_get_items('taxonomy_term', $term, 'field_parliament_previous');

  if ($items) {
    return taxonomy_term_load($items[0]['tid']);
  }
}

/**
 * Returns the next iteration of the given parliament.
 *
 * @param $term
 *   The parliament term
 *
 * @return object
 *   The next iteration of the given parliament.
 */
function pw_parliaments_next($term) {
  $tid = db_select('field_data_field_parliament_previous', 'prev')
    ->fields('prev', ['entity_id'])
    ->condition('prev.field_parliament_previous_tid', $term->tid)
    ->execute()
    ->fetchField();

  if ($tid) {
    return taxonomy_term_load($tid);
  }
}

/**
 * Returns all preceding iterations of the given parliament.
 *
 * @param object $term
 *   The parliament term.
 *
 * @return array
 *   The previous parliaments.
 */
function pw_parliaments_predecessors($term) {
  $predecessors = [];

  $previous = pw_parliaments_previous($term);

  if (isset($previous)) {
    $predecessors = pw_parliaments_predecessors($previous);
    $predecessors[] = $previous;
  }

  return $predecessors;
}

/**
 * Returns all succeeding iterations of the given parliament.
 *
 * @param object $term
 *   The parliament term.
 *
 * @return array
 *   The succeeding parliaments.
 */
function pw_parliaments_successors($term) {
  $successors = [];

  $next = pw_parliaments_next($term);

  if (isset($next)) {
    $successors = array_merge([$next], pw_parliaments_successors($next));
  }

  return $successors;
}
