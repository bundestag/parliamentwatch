<?php
/**
 * @file
 * Code for the PW Committees feature.
 */

include_once 'pw_committees.features.inc';

/**
 * Implements hook_menu().
 */
function pw_committees_menu() {
  $items['committees/%taxonomy_term'] = [
    'title' => 'Committees',
    'page arguments' => [1],
    'page callback' => 'pw_committees_page',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implements hook_preprocess_page().
 */
function pw_committees_preprocess_node(&$variables) {
  if (isset($variables['node']) && $variables['node']->type == 'committee' && $variables['view_mode'] == 'full') {
    $variables['politicians'] = pw_committee_members_block();
  }
}

/**
 * Implements hook_node_view().
 */
function pw_committees_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'committee' && node_is_page($node)) {
    $parliament_tid = $node->field_parliament[LANGUAGE_NONE][0]['tid'];
    menu_tree_set_path('main-menu', "committees/$parliament_tid");
  }
}


/**
 * Page callback: Displays a listing of committees.
 */
function pw_committees_page($parliament_term) {
  $build = [];

  $q = pw_committees_base_query();
  $q->condition('f_parl.field_parliament_tid', $parliament_term->tid);
  $q->orderBy('n.title');
  $nids = $q->execute()->fetchCol();

  if (!empty($nids)) {
    $nodes = node_load_multiple($nids);

    $build = node_view_multiple($nodes, 'tile');
    $build['#theme_wrappers'] = ['container__tiles'];
    $build['pager'] = [
      '#theme' => 'pager',
      '#weight' => 5,
    ];
  }

  return $build;
}


/**
 *  Implements hook_block_info().
 */
function pw_committees_block_info() {
  $blocks['profile_committees'] = [
    'info' => t('Profile Commmittees'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  $blocks['committee_members'] = [
    'info' => t('Committee members'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  return $blocks;
}


/**
 *  Implements hook_block_view().
 */
function pw_committees_block_view($delta, $arguments = array()) {
  switch ($delta) {
    case 'profile_committees':
      $block = pw_committees_profile_block();
      break;
    case 'committee_members':
      $block = pw_committee_members_block();
      break;
    default:
      return [];
  }
  return $block;
}


/**
 * Displays committee section of a profile.
 *
 * @return array
 *   The block render array.
 */
function pw_committees_profile_block() {

  $block = [];

  if (menu_get_item()['page_callback'] == 'user_revision_show') {
    $map = menu_get_item()['original_map'];
    $account = user_revision_load($map[1], $map[3]);
  }
  else {
    $account = menu_get_object('user');
  }

  if (!$account || !_pw_user_has_role($account, 'Politician')) {
    return $block;
  }

  $field_user_parliament = field_get_items('user', $account, 'field_user_parliament');

  $q = pw_committees_base_query();
  $q->condition('f_parl.field_parliament_tid', $field_user_parliament[0]['tid']);
  $or = db_or();
  $or->condition('f_chair.field_committee_chairman_target_id', $account->uid);
  $or->condition('f_vice.field_committee_vice_chairman_target_id', $account->uid);
  $or->condition('f_members.field_committee_members_target_id', $account->uid);
  $or->condition('f_alt_members.field_committee_alt_members_target_id', $account->uid);
  $q->condition($or);
  $q->orderBy('n.title');
  $nids = $q->execute()->fetchCol();

  if(empty($nids)) {
    return $block;
  }

  $nodes = node_load_multiple($nids);

  $membership_fields = pw_committees_get_membership_config();
  $memberships = [];

  foreach($membership_fields as $role_name => $field_name) {
    foreach($nodes as $nid => $node) {
      $field_values = field_get_items('node', $node, $field_name);
      foreach($field_values as $field_value) {
        if($field_value['target_id'] == $account->uid) {
          if(!array_key_exists($role_name, $memberships)) {
            $memberships[$role_name] = [$nid => $node];
          }
          else {
            $memberships[$role_name][$nid] = $node;
          }
          break 2;
        }
      }
    }
  }

  $block['subject'] = t('Committees');
  $block['content'] = [];
  foreach($memberships as $role => $membership) {
    $content = node_view_multiple($membership, 'embedded');
    $content['#prefix'] = '<div class="tile committee-list mh-item"><h4>'.t($role).'</h4><ul>';
    $content['#suffix'] = '</ul></div>';
    $block['content'][] = $content;
  }

  return $block;
}


/**
 * Displays members section on committee page.
 *
 * @return array
 *   The block render array.
 */
function pw_committee_members_block() {

  $build = [];

  $field_parliament = field_get_items('node', menu_get_object(), 'field_parliament');

  if (menu_get_object()->type != 'committee' || empty($field_parliament)) {
    return $build;
  }

  $parliament = taxonomy_term_load($field_parliament[0]['tid']);

  foreach (pw_committees_get_membership_config() as $role_name => $field_name) {
    $user_references = field_get_items('node', menu_get_object(), $field_name);
    if (!empty($user_references)) {
      $uids = array_map(function($item) { return $item['target_id']; }, $user_references);
      $query = db_select('user_archive_cache', 'uac');
      $query->fields('uac', array('vid'));
      _pw_uac_add_conditions($query, array(
          'parliament' => $parliament->name,
          'uid' => $uids,
          )
      );
      $query->orderBy('number_of_answers', 'DESC');
      $query->orderBy('number_of_questions', 'DESC');
      $vids = $query->execute()->fetchCol();
      $politicians = pw_userarchives_politician_load_multiple($vids);
      $weight = 0;
      foreach ($politicians as $vid => $politician) {
        $build[$field_name][$vid] = user_view($politician, 'tile');
        $build[$field_name][$vid]['#weight'] = ++$weight;
      }
    }
  }

  return $build;
}


/**
 * Returns an array of fields with roles as keys.
 *
 * @return array
 *   The membership array.
 */
function pw_committees_get_membership_config() {
  return ['Chairman' =>'field_committee_chairman', 'Vice-Chairman' => 'field_committee_vice_chairman', 'Member' => 'field_committee_members', 'Alternate member' => 'field_committee_alt_members'];
}


/**
 * Returns a query for fetching published nodes of type committee.
 *
 * @return SelectQuery
 *   The query object.
 */
function pw_committees_base_query() {
  $q = db_select('node', 'n');
  $q->fields('n');
  $q->join('field_data_field_parliament', 'f_parl', "f_parl.entity_type = 'node' AND f_parl.entity_id = n.nid");
  $q->leftJoin('field_data_field_committee_chairman', 'f_chair', "f_chair.entity_type = 'node' AND f_chair.entity_id = n.nid");
  $q->leftJoin('field_data_field_committee_vice_chairman', 'f_vice', "f_vice.entity_type = 'node' AND f_vice.entity_id = n.nid");
  $q->leftJoin('field_data_field_committee_members', 'f_members', "f_members.entity_type = 'node' AND f_members.entity_id = n.nid");
  $q->leftJoin('field_data_field_committee_alt_members', 'f_alt_members', "f_alt_members.entity_type = 'node' AND f_alt_members.entity_id = n.nid");
  $q->condition('n.type', 'committee');
  $q->condition('n.status', NODE_PUBLISHED);
  return $q;
}
