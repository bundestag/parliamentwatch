<?php
/**
 * @file
 * Code for the PW Committees feature.
 */

include_once 'pw_committees.features.inc';

/**
 * Implements hook_menu().
 */
function pw_committees_menu() {
  $items['committees/%taxonomy_term'] = [
    'title' => 'Committees',
    'page arguments' => [1],
    'page callback' => 'pw_committees_page',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implements hook_node_view().
 */
function pw_committees_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'committee' && node_is_page($node)) {
    $parliament_tid = $node->field_parliament[LANGUAGE_NONE][0]['tid'];
    menu_tree_set_path('main-menu', "committees/$parliament_tid");
  }
}


/**
 * Page callback: Displays a listing of committees.
 */
function pw_committees_page($parliament_term) {
  $build = [];

  $result = pw_committees_base_query()
    ->propertyOrderBy('title')
    ->fieldCondition('field_parliament', 'tid', $parliament_term->tid)
    ->pager(12)
    ->execute();

  if (!empty($result['node'])) {
    $nodes = node_load_multiple(array_keys($result['node']));

    $build = node_view_multiple($nodes, 'tile');
    $build['#theme_wrappers'] = ['container__tiles'];
    $build['pager'] = [
      '#theme' => 'pager',
      '#weight' => 5,
    ];
  }

  return $build;
}


/**
 *  Implements hook_block_info().
 */
function pw_committees_block_info() {
  $blocks['profile_committees'] = [
    'info' => t('Profile Commmittees'),
    'cache' => DRUPAL_NO_CACHE,
  ];
  return $blocks;
}


/**
 *  Implements hook_block_view().
 */
function pw_committees_block_view($delta, $arguments = array()) {
  switch ($delta) {
    case 'profile_committees':
      $block = pw_committees_profile_block();
      break;
    default:
      return [];
  }
  return $block;
}


/**
 * Displays committee section of a profile.
 *
 * @return array
 *   The block render array.
 */
function pw_committees_profile_block() {

  $block = [];

  if (menu_get_item()['page_callback'] == 'user_revision_show') {
    $map = menu_get_item()['original_map'];
    $account = user_revision_load($map[1], $map[3]);
  }
  else {
    $account = menu_get_object('user');
  }

  if (!$account || !_pw_user_has_role($account, 'Politician')) {
    return $block;
  }

  $field_parliament = field_get_items('user', $account, 'field_user_parliament');

  $nids = pw_committees_base_query()
    ->fieldCondition('field_parliament', 'tid', $field_parliament[0]['tid'])
    ->propertyOrderBy('title')
    ->execute();

  if(empty($nids['node'])) {
    return $block;
  }

  $nodes = node_load_multiple(array_keys($nids['node']));

  $membership_fields = array('Chairman' =>'field_committee_chairman', 'Vice-Chairman' => 'field_committee_vice_chairman', 'Member' => 'field_committee_members', 'Alternate member' => 'field_committee_alt_members');
  $memberships = array();

  foreach($nodes as $nid => $node) {
    foreach($membership_fields as $role_name => $field_name) {
      $field_values = field_get_items('node', $node, $field_name);
      foreach($field_values as $field_value) {
        if($field_value['target_id'] == $account->uid) {
          if(!array_key_exists($role_name, $memberships)) {
            $memberships[$role_name] = array($nid => $node);
          }
          else {
            $memberships[$role_name][$nid] = $node;
          }
        }
      }
    }
  }

  $block['subject'] = t('Committees');
  $block['content'] = array();
  foreach($memberships as $role => $membership) {
    $content = node_view_multiple($membership, 'embedded');
    $content['#prefix'] = '<div>'.t($role).'</div>';
    $block['content'][] = $content;
  }

  return $block;
}


/**
 * Returns a query for fetching published nodes of type poll.
 *
 * @return EntityFieldQuery
 *   The query object.
 */
function pw_committees_base_query() {
  $q = new EntityFieldQuery();
  $q->entityCondition('entity_type', 'node');
  $q->entityCondition('bundle', 'committee');
  $q->propertyCondition('status', NODE_PUBLISHED);

  return $q;
}
